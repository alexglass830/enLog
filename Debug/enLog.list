
enLog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800a4e4  0800a4e4  0001a4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a59c  0800a59c  00020138  2**0
                  CONTENTS
  4 .ARM          00000000  0800a59c  0800a59c  00020138  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a59c  0800a59c  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a59c  0800a59c  0001a59c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5a0  0800a5a0  0001a5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  0800a5a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f9c  20000138  0800a6dc  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010d4  0800a6dc  000210d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dd9f  00000000  00000000  00020161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004917  00000000  00000000  0003df00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  00042818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  00043b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d277  00000000  00000000  00044d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019bf3  00000000  00000000  00061f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091920  00000000  00000000  0007bb72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010d492  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d24  00000000  00000000  0010d4e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000138 	.word	0x20000138
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a4cc 	.word	0x0800a4cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000013c 	.word	0x2000013c
 8000148:	0800a4cc 	.word	0x0800a4cc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb64 	bl	800081c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80f 	bl	8000176 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f958 	bl	800040c <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f86e 	bl	800023c <MX_ADC1_Init>
  MX_RTC_Init();
 8000160:	f000 f8aa 	bl	80002b8 <MX_RTC_Init>
  MX_SPI2_Init();
 8000164:	f000 f8f2 	bl	800034c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000168:	f000 f926 	bl	80003b8 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800016c:	f006 fcde 	bl	8006b2c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000170:	f009 fd24 	bl	8009bbc <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000174:	e7fe      	b.n	8000174 <main+0x28>

08000176 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000176:	b580      	push	{r7, lr}
 8000178:	b094      	sub	sp, #80	; 0x50
 800017a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000180:	2228      	movs	r2, #40	; 0x28
 8000182:	2100      	movs	r1, #0
 8000184:	4618      	mov	r0, r3
 8000186:	f00a f999 	bl	800a4bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018a:	f107 0314 	add.w	r3, r7, #20
 800018e:	2200      	movs	r2, #0
 8000190:	601a      	str	r2, [r3, #0]
 8000192:	605a      	str	r2, [r3, #4]
 8000194:	609a      	str	r2, [r3, #8]
 8000196:	60da      	str	r2, [r3, #12]
 8000198:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800019a:	1d3b      	adds	r3, r7, #4
 800019c:	2200      	movs	r2, #0
 800019e:	601a      	str	r2, [r3, #0]
 80001a0:	605a      	str	r2, [r3, #4]
 80001a2:	609a      	str	r2, [r3, #8]
 80001a4:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80001a6:	2305      	movs	r3, #5
 80001a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b0:	2300      	movs	r3, #0
 80001b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80001b4:	2301      	movs	r3, #1
 80001b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b8:	2301      	movs	r3, #1
 80001ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001bc:	2302      	movs	r3, #2
 80001be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001d0:	4618      	mov	r0, r3
 80001d2:	f002 fd3f 	bl	8002c54 <HAL_RCC_OscConfig>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d001      	beq.n	80001e0 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80001dc:	f000 f992 	bl	8000504 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e0:	230f      	movs	r3, #15
 80001e2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e4:	2302      	movs	r3, #2
 80001e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001f0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80001f6:	f107 0314 	add.w	r3, r7, #20
 80001fa:	2101      	movs	r1, #1
 80001fc:	4618      	mov	r0, r3
 80001fe:	f002 ffa9 	bl	8003154 <HAL_RCC_ClockConfig>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d001      	beq.n	800020c <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000208:	f000 f97c 	bl	8000504 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
 800020c:	2313      	movs	r3, #19
 800020e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000210:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000214:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000216:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800021a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800021c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000220:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4618      	mov	r0, r3
 8000226:	f003 f92f 	bl	8003488 <HAL_RCCEx_PeriphCLKConfig>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000230:	f000 f968 	bl	8000504 <Error_Handler>
  }
}
 8000234:	bf00      	nop
 8000236:	3750      	adds	r7, #80	; 0x50
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}

0800023c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	605a      	str	r2, [r3, #4]
 800024a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800024c:	4b18      	ldr	r3, [pc, #96]	; (80002b0 <MX_ADC1_Init+0x74>)
 800024e:	4a19      	ldr	r2, [pc, #100]	; (80002b4 <MX_ADC1_Init+0x78>)
 8000250:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000252:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <MX_ADC1_Init+0x74>)
 8000254:	2200      	movs	r2, #0
 8000256:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000258:	4b15      	ldr	r3, [pc, #84]	; (80002b0 <MX_ADC1_Init+0x74>)
 800025a:	2200      	movs	r2, #0
 800025c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800025e:	4b14      	ldr	r3, [pc, #80]	; (80002b0 <MX_ADC1_Init+0x74>)
 8000260:	2200      	movs	r2, #0
 8000262:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000264:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <MX_ADC1_Init+0x74>)
 8000266:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800026a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800026c:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <MX_ADC1_Init+0x74>)
 800026e:	2200      	movs	r2, #0
 8000270:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000272:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <MX_ADC1_Init+0x74>)
 8000274:	2201      	movs	r2, #1
 8000276:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000278:	480d      	ldr	r0, [pc, #52]	; (80002b0 <MX_ADC1_Init+0x74>)
 800027a:	f000 fb31 	bl	80008e0 <HAL_ADC_Init>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000284:	f000 f93e 	bl	8000504 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000288:	2306      	movs	r3, #6
 800028a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800028c:	2301      	movs	r3, #1
 800028e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000290:	2300      	movs	r3, #0
 8000292:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	4619      	mov	r1, r3
 8000298:	4805      	ldr	r0, [pc, #20]	; (80002b0 <MX_ADC1_Init+0x74>)
 800029a:	f000 fbf9 	bl	8000a90 <HAL_ADC_ConfigChannel>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002a4:	f000 f92e 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002a8:	bf00      	nop
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	2000042c 	.word	0x2000042c
 80002b4:	40012400 	.word	0x40012400

080002b8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2100      	movs	r1, #0
 80002c2:	460a      	mov	r2, r1
 80002c4:	801a      	strh	r2, [r3, #0]
 80002c6:	460a      	mov	r2, r1
 80002c8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80002ca:	2300      	movs	r3, #0
 80002cc:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80002ce:	4b1d      	ldr	r3, [pc, #116]	; (8000344 <MX_RTC_Init+0x8c>)
 80002d0:	4a1d      	ldr	r2, [pc, #116]	; (8000348 <MX_RTC_Init+0x90>)
 80002d2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80002d4:	4b1b      	ldr	r3, [pc, #108]	; (8000344 <MX_RTC_Init+0x8c>)
 80002d6:	f04f 32ff 	mov.w	r2, #4294967295
 80002da:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80002dc:	4b19      	ldr	r3, [pc, #100]	; (8000344 <MX_RTC_Init+0x8c>)
 80002de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002e2:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80002e4:	4817      	ldr	r0, [pc, #92]	; (8000344 <MX_RTC_Init+0x8c>)
 80002e6:	f003 fa49 	bl	800377c <HAL_RTC_Init>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80002f0:	f000 f908 	bl	8000504 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80002f4:	2300      	movs	r3, #0
 80002f6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80002f8:	2300      	movs	r3, #0
 80002fa:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80002fc:	2300      	movs	r3, #0
 80002fe:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2201      	movs	r2, #1
 8000304:	4619      	mov	r1, r3
 8000306:	480f      	ldr	r0, [pc, #60]	; (8000344 <MX_RTC_Init+0x8c>)
 8000308:	f003 face 	bl	80038a8 <HAL_RTC_SetTime>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000312:	f000 f8f7 	bl	8000504 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000316:	2301      	movs	r3, #1
 8000318:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800031a:	2301      	movs	r3, #1
 800031c:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 800031e:	2301      	movs	r3, #1
 8000320:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000322:	2300      	movs	r3, #0
 8000324:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000326:	463b      	mov	r3, r7
 8000328:	2201      	movs	r2, #1
 800032a:	4619      	mov	r1, r3
 800032c:	4805      	ldr	r0, [pc, #20]	; (8000344 <MX_RTC_Init+0x8c>)
 800032e:	f003 fb53 	bl	80039d8 <HAL_RTC_SetDate>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000338:	f000 f8e4 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800033c:	bf00      	nop
 800033e:	3708      	adds	r7, #8
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	2000045c 	.word	0x2000045c
 8000348:	40002800 	.word	0x40002800

0800034c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000350:	4b17      	ldr	r3, [pc, #92]	; (80003b0 <MX_SPI2_Init+0x64>)
 8000352:	4a18      	ldr	r2, [pc, #96]	; (80003b4 <MX_SPI2_Init+0x68>)
 8000354:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000356:	4b16      	ldr	r3, [pc, #88]	; (80003b0 <MX_SPI2_Init+0x64>)
 8000358:	f44f 7282 	mov.w	r2, #260	; 0x104
 800035c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800035e:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <MX_SPI2_Init+0x64>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <MX_SPI2_Init+0x64>)
 8000366:	2200      	movs	r2, #0
 8000368:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800036a:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <MX_SPI2_Init+0x64>)
 800036c:	2200      	movs	r2, #0
 800036e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000370:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <MX_SPI2_Init+0x64>)
 8000372:	2200      	movs	r2, #0
 8000374:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000376:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <MX_SPI2_Init+0x64>)
 8000378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800037c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800037e:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <MX_SPI2_Init+0x64>)
 8000380:	2230      	movs	r2, #48	; 0x30
 8000382:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000384:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <MX_SPI2_Init+0x64>)
 8000386:	2200      	movs	r2, #0
 8000388:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800038a:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <MX_SPI2_Init+0x64>)
 800038c:	2200      	movs	r2, #0
 800038e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000390:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <MX_SPI2_Init+0x64>)
 8000392:	2200      	movs	r2, #0
 8000394:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000396:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <MX_SPI2_Init+0x64>)
 8000398:	220a      	movs	r2, #10
 800039a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800039c:	4804      	ldr	r0, [pc, #16]	; (80003b0 <MX_SPI2_Init+0x64>)
 800039e:	f003 fd7b 	bl	8003e98 <HAL_SPI_Init>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80003a8:	f000 f8ac 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	200003d4 	.word	0x200003d4
 80003b4:	40003800 	.word	0x40003800

080003b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <MX_USART2_UART_Init+0x4c>)
 80003be:	4a12      	ldr	r2, [pc, #72]	; (8000408 <MX_USART2_UART_Init+0x50>)
 80003c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003c2:	4b10      	ldr	r3, [pc, #64]	; (8000404 <MX_USART2_UART_Init+0x4c>)
 80003c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <MX_USART2_UART_Init+0x4c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <MX_USART2_UART_Init+0x4c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <MX_USART2_UART_Init+0x4c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003dc:	4b09      	ldr	r3, [pc, #36]	; (8000404 <MX_USART2_UART_Init+0x4c>)
 80003de:	220c      	movs	r2, #12
 80003e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003e2:	4b08      	ldr	r3, [pc, #32]	; (8000404 <MX_USART2_UART_Init+0x4c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <MX_USART2_UART_Init+0x4c>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ee:	4805      	ldr	r0, [pc, #20]	; (8000404 <MX_USART2_UART_Init+0x4c>)
 80003f0:	f004 f81e 	bl	8004430 <HAL_UART_Init>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003fa:	f000 f883 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	20000470 	.word	0x20000470
 8000408:	40004400 	.word	0x40004400

0800040c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b088      	sub	sp, #32
 8000410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000412:	f107 0310 	add.w	r3, r7, #16
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000420:	4b34      	ldr	r3, [pc, #208]	; (80004f4 <MX_GPIO_Init+0xe8>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a33      	ldr	r2, [pc, #204]	; (80004f4 <MX_GPIO_Init+0xe8>)
 8000426:	f043 0310 	orr.w	r3, r3, #16
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b31      	ldr	r3, [pc, #196]	; (80004f4 <MX_GPIO_Init+0xe8>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0310 	and.w	r3, r3, #16
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000438:	4b2e      	ldr	r3, [pc, #184]	; (80004f4 <MX_GPIO_Init+0xe8>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a2d      	ldr	r2, [pc, #180]	; (80004f4 <MX_GPIO_Init+0xe8>)
 800043e:	f043 0320 	orr.w	r3, r3, #32
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b2b      	ldr	r3, [pc, #172]	; (80004f4 <MX_GPIO_Init+0xe8>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0320 	and.w	r3, r3, #32
 800044c:	60bb      	str	r3, [r7, #8]
 800044e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000450:	4b28      	ldr	r3, [pc, #160]	; (80004f4 <MX_GPIO_Init+0xe8>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a27      	ldr	r2, [pc, #156]	; (80004f4 <MX_GPIO_Init+0xe8>)
 8000456:	f043 0304 	orr.w	r3, r3, #4
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b25      	ldr	r3, [pc, #148]	; (80004f4 <MX_GPIO_Init+0xe8>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0304 	and.w	r3, r3, #4
 8000464:	607b      	str	r3, [r7, #4]
 8000466:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000468:	4b22      	ldr	r3, [pc, #136]	; (80004f4 <MX_GPIO_Init+0xe8>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a21      	ldr	r2, [pc, #132]	; (80004f4 <MX_GPIO_Init+0xe8>)
 800046e:	f043 0308 	orr.w	r3, r3, #8
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <MX_GPIO_Init+0xe8>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0308 	and.w	r3, r3, #8
 800047c:	603b      	str	r3, [r7, #0]
 800047e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(status_led_GPIO_Port, status_led_Pin, GPIO_PIN_RESET);
 8000480:	2200      	movs	r2, #0
 8000482:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000486:	481c      	ldr	r0, [pc, #112]	; (80004f8 <MX_GPIO_Init+0xec>)
 8000488:	f000 fece 	bl	8001228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin_Pin|rec_led_Pin, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	f240 2102 	movw	r1, #514	; 0x202
 8000492:	481a      	ldr	r0, [pc, #104]	; (80004fc <MX_GPIO_Init+0xf0>)
 8000494:	f000 fec8 	bl	8001228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : status_led_Pin */
  GPIO_InitStruct.Pin = status_led_Pin;
 8000498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800049c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049e:	2301      	movs	r3, #1
 80004a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a2:	2300      	movs	r3, #0
 80004a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a6:	2302      	movs	r3, #2
 80004a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(status_led_GPIO_Port, &GPIO_InitStruct);
 80004aa:	f107 0310 	add.w	r3, r7, #16
 80004ae:	4619      	mov	r1, r3
 80004b0:	4811      	ldr	r0, [pc, #68]	; (80004f8 <MX_GPIO_Init+0xec>)
 80004b2:	f000 fd35 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : controll_button_Pin */
  GPIO_InitStruct.Pin = controll_button_Pin;
 80004b6:	2302      	movs	r3, #2
 80004b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004be:	2301      	movs	r3, #1
 80004c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(controll_button_GPIO_Port, &GPIO_InitStruct);
 80004c2:	f107 0310 	add.w	r3, r7, #16
 80004c6:	4619      	mov	r1, r3
 80004c8:	480d      	ldr	r0, [pc, #52]	; (8000500 <MX_GPIO_Init+0xf4>)
 80004ca:	f000 fd29 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin_Pin rec_led_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin_Pin|rec_led_Pin;
 80004ce:	f240 2302 	movw	r3, #514	; 0x202
 80004d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d4:	2301      	movs	r3, #1
 80004d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d8:	2300      	movs	r3, #0
 80004da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004dc:	2302      	movs	r3, #2
 80004de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e0:	f107 0310 	add.w	r3, r7, #16
 80004e4:	4619      	mov	r1, r3
 80004e6:	4805      	ldr	r0, [pc, #20]	; (80004fc <MX_GPIO_Init+0xf0>)
 80004e8:	f000 fd1a 	bl	8000f20 <HAL_GPIO_Init>

}
 80004ec:	bf00      	nop
 80004ee:	3720      	adds	r7, #32
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40011000 	.word	0x40011000
 80004fc:	40010c00 	.word	0x40010c00
 8000500:	40010800 	.word	0x40010800

08000504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
}
 800050a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050c:	e7fe      	b.n	800050c <Error_Handler+0x8>
	...

08000510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <HAL_MspInit+0x5c>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	4a14      	ldr	r2, [pc, #80]	; (800056c <HAL_MspInit+0x5c>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6193      	str	r3, [r2, #24]
 8000522:	4b12      	ldr	r3, [pc, #72]	; (800056c <HAL_MspInit+0x5c>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <HAL_MspInit+0x5c>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	4a0e      	ldr	r2, [pc, #56]	; (800056c <HAL_MspInit+0x5c>)
 8000534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000538:	61d3      	str	r3, [r2, #28]
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <HAL_MspInit+0x5c>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <HAL_MspInit+0x60>)
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <HAL_MspInit+0x60>)
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000562:	bf00      	nop
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	40021000 	.word	0x40021000
 8000570:	40010000 	.word	0x40010000

08000574 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <HAL_ADC_MspInit+0x6c>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d121      	bne.n	80005d8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000594:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <HAL_ADC_MspInit+0x70>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a12      	ldr	r2, [pc, #72]	; (80005e4 <HAL_ADC_MspInit+0x70>)
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6193      	str	r3, [r2, #24]
 80005a0:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <HAL_ADC_MspInit+0x70>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ac:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <HAL_ADC_MspInit+0x70>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a0c      	ldr	r2, [pc, #48]	; (80005e4 <HAL_ADC_MspInit+0x70>)
 80005b2:	f043 0304 	orr.w	r3, r3, #4
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <HAL_ADC_MspInit+0x70>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f003 0304 	and.w	r3, r3, #4
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005c4:	2340      	movs	r3, #64	; 0x40
 80005c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c8:	2303      	movs	r3, #3
 80005ca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005cc:	f107 0310 	add.w	r3, r7, #16
 80005d0:	4619      	mov	r1, r3
 80005d2:	4805      	ldr	r0, [pc, #20]	; (80005e8 <HAL_ADC_MspInit+0x74>)
 80005d4:	f000 fca4 	bl	8000f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005d8:	bf00      	nop
 80005da:	3720      	adds	r7, #32
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40012400 	.word	0x40012400
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40010800 	.word	0x40010800

080005ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <HAL_RTC_MspInit+0x3c>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d110      	bne.n	8000620 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80005fe:	f002 fb1d 	bl	8002c3c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <HAL_RTC_MspInit+0x40>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	4a09      	ldr	r2, [pc, #36]	; (800062c <HAL_RTC_MspInit+0x40>)
 8000608:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800060c:	61d3      	str	r3, [r2, #28]
 800060e:	4b07      	ldr	r3, [pc, #28]	; (800062c <HAL_RTC_MspInit+0x40>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <HAL_RTC_MspInit+0x44>)
 800061c:	2201      	movs	r2, #1
 800061e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40002800 	.word	0x40002800
 800062c:	40021000 	.word	0x40021000
 8000630:	4242043c 	.word	0x4242043c

08000634 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a1c      	ldr	r2, [pc, #112]	; (80006c0 <HAL_SPI_MspInit+0x8c>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d131      	bne.n	80006b8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <HAL_SPI_MspInit+0x90>)
 8000656:	69db      	ldr	r3, [r3, #28]
 8000658:	4a1a      	ldr	r2, [pc, #104]	; (80006c4 <HAL_SPI_MspInit+0x90>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065e:	61d3      	str	r3, [r2, #28]
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <HAL_SPI_MspInit+0x90>)
 8000662:	69db      	ldr	r3, [r3, #28]
 8000664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <HAL_SPI_MspInit+0x90>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <HAL_SPI_MspInit+0x90>)
 8000672:	f043 0308 	orr.w	r3, r3, #8
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <HAL_SPI_MspInit+0x90>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f003 0308 	and.w	r3, r3, #8
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000684:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000688:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068e:	2303      	movs	r3, #3
 8000690:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000692:	f107 0310 	add.w	r3, r7, #16
 8000696:	4619      	mov	r1, r3
 8000698:	480b      	ldr	r0, [pc, #44]	; (80006c8 <HAL_SPI_MspInit+0x94>)
 800069a:	f000 fc41 	bl	8000f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800069e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4619      	mov	r1, r3
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <HAL_SPI_MspInit+0x94>)
 80006b4:	f000 fc34 	bl	8000f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40003800 	.word	0x40003800
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010c00 	.word	0x40010c00

080006cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 0310 	add.w	r3, r7, #16
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a1b      	ldr	r2, [pc, #108]	; (8000754 <HAL_UART_MspInit+0x88>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d12f      	bne.n	800074c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <HAL_UART_MspInit+0x8c>)
 80006ee:	69db      	ldr	r3, [r3, #28]
 80006f0:	4a19      	ldr	r2, [pc, #100]	; (8000758 <HAL_UART_MspInit+0x8c>)
 80006f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f6:	61d3      	str	r3, [r2, #28]
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <HAL_UART_MspInit+0x8c>)
 80006fa:	69db      	ldr	r3, [r3, #28]
 80006fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <HAL_UART_MspInit+0x8c>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a13      	ldr	r2, [pc, #76]	; (8000758 <HAL_UART_MspInit+0x8c>)
 800070a:	f043 0304 	orr.w	r3, r3, #4
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <HAL_UART_MspInit+0x8c>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800071c:	2304      	movs	r3, #4
 800071e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000724:	2303      	movs	r3, #3
 8000726:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	4619      	mov	r1, r3
 800072e:	480b      	ldr	r0, [pc, #44]	; (800075c <HAL_UART_MspInit+0x90>)
 8000730:	f000 fbf6 	bl	8000f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000734:	2308      	movs	r3, #8
 8000736:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	4619      	mov	r1, r3
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <HAL_UART_MspInit+0x90>)
 8000748:	f000 fbea 	bl	8000f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800074c:	bf00      	nop
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40004400 	.word	0x40004400
 8000758:	40021000 	.word	0x40021000
 800075c:	40010800 	.word	0x40010800

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <NMI_Handler+0x4>

08000766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <HardFault_Handler+0x4>

0800076c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <MemManage_Handler+0x4>

08000772 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <BusFault_Handler+0x4>

08000778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <UsageFault_Handler+0x4>

0800077e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr

0800078a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr

08000796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr

080007a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a6:	f000 f87f 	bl	80008a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007b4:	4802      	ldr	r0, [pc, #8]	; (80007c0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007b6:	f000 fe80 	bl	80014ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000de8 	.word	0x20000de8

080007c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d0:	480c      	ldr	r0, [pc, #48]	; (8000804 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007d2:	490d      	ldr	r1, [pc, #52]	; (8000808 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007d4:	4a0d      	ldr	r2, [pc, #52]	; (800080c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d8:	e002      	b.n	80007e0 <LoopCopyDataInit>

080007da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007de:	3304      	adds	r3, #4

080007e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e4:	d3f9      	bcc.n	80007da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007e8:	4c0a      	ldr	r4, [pc, #40]	; (8000814 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ec:	e001      	b.n	80007f2 <LoopFillZerobss>

080007ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f0:	3204      	adds	r2, #4

080007f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f4:	d3fb      	bcc.n	80007ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007f6:	f7ff ffe5 	bl	80007c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007fa:	f009 fe3b 	bl	800a474 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007fe:	f7ff fca5 	bl	800014c <main>
  bx lr
 8000802:	4770      	bx	lr
  ldr r0, =_sdata
 8000804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000808:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 800080c:	0800a5a4 	.word	0x0800a5a4
  ldr r2, =_sbss
 8000810:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 8000814:	200010d4 	.word	0x200010d4

08000818 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000818:	e7fe      	b.n	8000818 <ADC1_2_IRQHandler>
	...

0800081c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <HAL_Init+0x28>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a07      	ldr	r2, [pc, #28]	; (8000844 <HAL_Init+0x28>)
 8000826:	f043 0310 	orr.w	r3, r3, #16
 800082a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800082c:	2003      	movs	r0, #3
 800082e:	f000 fb35 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000832:	200f      	movs	r0, #15
 8000834:	f000 f808 	bl	8000848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000838:	f7ff fe6a 	bl	8000510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40022000 	.word	0x40022000

08000848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <HAL_InitTick+0x54>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <HAL_InitTick+0x58>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	4619      	mov	r1, r3
 800085a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000862:	fbb2 f3f3 	udiv	r3, r2, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f000 fb4d 	bl	8000f06 <HAL_SYSTICK_Config>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	e00e      	b.n	8000894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b0f      	cmp	r3, #15
 800087a:	d80a      	bhi.n	8000892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800087c:	2200      	movs	r2, #0
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	f000 fb15 	bl	8000eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000888:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <HAL_InitTick+0x5c>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800088e:	2300      	movs	r3, #0
 8000890:	e000      	b.n	8000894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000000 	.word	0x20000000
 80008a0:	20000008 	.word	0x20000008
 80008a4:	20000004 	.word	0x20000004

080008a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008ac:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <HAL_IncTick+0x1c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <HAL_IncTick+0x20>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4413      	add	r3, r2
 80008b8:	4a03      	ldr	r2, [pc, #12]	; (80008c8 <HAL_IncTick+0x20>)
 80008ba:	6013      	str	r3, [r2, #0]
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	20000008 	.word	0x20000008
 80008c8:	200004b4 	.word	0x200004b4

080008cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return uwTick;
 80008d0:	4b02      	ldr	r3, [pc, #8]	; (80008dc <HAL_GetTick+0x10>)
 80008d2:	681b      	ldr	r3, [r3, #0]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	200004b4 	.word	0x200004b4

080008e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008e8:	2300      	movs	r3, #0
 80008ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80008ec:	2300      	movs	r3, #0
 80008ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d101      	bne.n	8000902 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e0be      	b.n	8000a80 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800090c:	2b00      	cmp	r3, #0
 800090e:	d109      	bne.n	8000924 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2200      	movs	r2, #0
 8000914:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2200      	movs	r2, #0
 800091a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff fe28 	bl	8000574 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f000 f9ab 	bl	8000c80 <ADC_ConversionStop_Disable>
 800092a:	4603      	mov	r3, r0
 800092c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000932:	f003 0310 	and.w	r3, r3, #16
 8000936:	2b00      	cmp	r3, #0
 8000938:	f040 8099 	bne.w	8000a6e <HAL_ADC_Init+0x18e>
 800093c:	7dfb      	ldrb	r3, [r7, #23]
 800093e:	2b00      	cmp	r3, #0
 8000940:	f040 8095 	bne.w	8000a6e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000948:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800094c:	f023 0302 	bic.w	r3, r3, #2
 8000950:	f043 0202 	orr.w	r2, r3, #2
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000960:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	7b1b      	ldrb	r3, [r3, #12]
 8000966:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000968:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	4313      	orrs	r3, r2
 800096e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000978:	d003      	beq.n	8000982 <HAL_ADC_Init+0xa2>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d102      	bne.n	8000988 <HAL_ADC_Init+0xa8>
 8000982:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000986:	e000      	b.n	800098a <HAL_ADC_Init+0xaa>
 8000988:	2300      	movs	r3, #0
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	4313      	orrs	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	7d1b      	ldrb	r3, [r3, #20]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d119      	bne.n	80009cc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	7b1b      	ldrb	r3, [r3, #12]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d109      	bne.n	80009b4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	3b01      	subs	r3, #1
 80009a6:	035a      	lsls	r2, r3, #13
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	e00b      	b.n	80009cc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b8:	f043 0220 	orr.w	r2, r3, #32
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c4:	f043 0201 	orr.w	r2, r3, #1
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	430a      	orrs	r2, r1
 80009de:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	689a      	ldr	r2, [r3, #8]
 80009e6:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <HAL_ADC_Init+0x1a8>)
 80009e8:	4013      	ands	r3, r2
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	6812      	ldr	r2, [r2, #0]
 80009ee:	68b9      	ldr	r1, [r7, #8]
 80009f0:	430b      	orrs	r3, r1
 80009f2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009fc:	d003      	beq.n	8000a06 <HAL_ADC_Init+0x126>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d104      	bne.n	8000a10 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	691b      	ldr	r3, [r3, #16]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	051b      	lsls	r3, r3, #20
 8000a0e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a16:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	430a      	orrs	r2, r1
 8000a22:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	689a      	ldr	r2, [r3, #8]
 8000a2a:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <HAL_ADC_Init+0x1ac>)
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d10b      	bne.n	8000a4c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2200      	movs	r2, #0
 8000a38:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a3e:	f023 0303 	bic.w	r3, r3, #3
 8000a42:	f043 0201 	orr.w	r2, r3, #1
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a4a:	e018      	b.n	8000a7e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a50:	f023 0312 	bic.w	r3, r3, #18
 8000a54:	f043 0210 	orr.w	r2, r3, #16
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a60:	f043 0201 	orr.w	r2, r3, #1
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a6c:	e007      	b.n	8000a7e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a72:	f043 0210 	orr.w	r2, r3, #16
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3718      	adds	r7, #24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	ffe1f7fd 	.word	0xffe1f7fd
 8000a8c:	ff1f0efe 	.word	0xff1f0efe

08000a90 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d101      	bne.n	8000ab0 <HAL_ADC_ConfigChannel+0x20>
 8000aac:	2302      	movs	r3, #2
 8000aae:	e0dc      	b.n	8000c6a <HAL_ADC_ConfigChannel+0x1da>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	2b06      	cmp	r3, #6
 8000abe:	d81c      	bhi.n	8000afa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685a      	ldr	r2, [r3, #4]
 8000aca:	4613      	mov	r3, r2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	4413      	add	r3, r2
 8000ad0:	3b05      	subs	r3, #5
 8000ad2:	221f      	movs	r2, #31
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	4019      	ands	r1, r3
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	6818      	ldr	r0, [r3, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685a      	ldr	r2, [r3, #4]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	4413      	add	r3, r2
 8000aea:	3b05      	subs	r3, #5
 8000aec:	fa00 f203 	lsl.w	r2, r0, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	430a      	orrs	r2, r1
 8000af6:	635a      	str	r2, [r3, #52]	; 0x34
 8000af8:	e03c      	b.n	8000b74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	2b0c      	cmp	r3, #12
 8000b00:	d81c      	bhi.n	8000b3c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685a      	ldr	r2, [r3, #4]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	4413      	add	r3, r2
 8000b12:	3b23      	subs	r3, #35	; 0x23
 8000b14:	221f      	movs	r2, #31
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	4019      	ands	r1, r3
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	6818      	ldr	r0, [r3, #0]
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685a      	ldr	r2, [r3, #4]
 8000b26:	4613      	mov	r3, r2
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	4413      	add	r3, r2
 8000b2c:	3b23      	subs	r3, #35	; 0x23
 8000b2e:	fa00 f203 	lsl.w	r2, r0, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	430a      	orrs	r2, r1
 8000b38:	631a      	str	r2, [r3, #48]	; 0x30
 8000b3a:	e01b      	b.n	8000b74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685a      	ldr	r2, [r3, #4]
 8000b46:	4613      	mov	r3, r2
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	4413      	add	r3, r2
 8000b4c:	3b41      	subs	r3, #65	; 0x41
 8000b4e:	221f      	movs	r2, #31
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	43db      	mvns	r3, r3
 8000b56:	4019      	ands	r1, r3
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	6818      	ldr	r0, [r3, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	4613      	mov	r3, r2
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	4413      	add	r3, r2
 8000b66:	3b41      	subs	r3, #65	; 0x41
 8000b68:	fa00 f203 	lsl.w	r2, r0, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	430a      	orrs	r2, r1
 8000b72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b09      	cmp	r3, #9
 8000b7a:	d91c      	bls.n	8000bb6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	68d9      	ldr	r1, [r3, #12]
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	4613      	mov	r3, r2
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	4413      	add	r3, r2
 8000b8c:	3b1e      	subs	r3, #30
 8000b8e:	2207      	movs	r2, #7
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	4019      	ands	r1, r3
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	6898      	ldr	r0, [r3, #8]
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	4413      	add	r3, r2
 8000ba6:	3b1e      	subs	r3, #30
 8000ba8:	fa00 f203 	lsl.w	r2, r0, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	e019      	b.n	8000bea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	6919      	ldr	r1, [r3, #16]
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	4413      	add	r3, r2
 8000bc6:	2207      	movs	r2, #7
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	4019      	ands	r1, r3
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	6898      	ldr	r0, [r3, #8]
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	4413      	add	r3, r2
 8000bde:	fa00 f203 	lsl.w	r2, r0, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	430a      	orrs	r2, r1
 8000be8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b10      	cmp	r3, #16
 8000bf0:	d003      	beq.n	8000bfa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000bf6:	2b11      	cmp	r3, #17
 8000bf8:	d132      	bne.n	8000c60 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a1d      	ldr	r2, [pc, #116]	; (8000c74 <HAL_ADC_ConfigChannel+0x1e4>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d125      	bne.n	8000c50 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d126      	bne.n	8000c60 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	689a      	ldr	r2, [r3, #8]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000c20:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2b10      	cmp	r3, #16
 8000c28:	d11a      	bne.n	8000c60 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c2a:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <HAL_ADC_ConfigChannel+0x1e8>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a13      	ldr	r2, [pc, #76]	; (8000c7c <HAL_ADC_ConfigChannel+0x1ec>)
 8000c30:	fba2 2303 	umull	r2, r3, r2, r3
 8000c34:	0c9a      	lsrs	r2, r3, #18
 8000c36:	4613      	mov	r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	4413      	add	r3, r2
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c40:	e002      	b.n	8000c48 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	3b01      	subs	r3, #1
 8000c46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d1f9      	bne.n	8000c42 <HAL_ADC_ConfigChannel+0x1b2>
 8000c4e:	e007      	b.n	8000c60 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c54:	f043 0220 	orr.w	r2, r3, #32
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr
 8000c74:	40012400 	.word	0x40012400
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	431bde83 	.word	0x431bde83

08000c80 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d12e      	bne.n	8000cf8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	689a      	ldr	r2, [r3, #8]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f022 0201 	bic.w	r2, r2, #1
 8000ca8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000caa:	f7ff fe0f 	bl	80008cc <HAL_GetTick>
 8000cae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000cb0:	e01b      	b.n	8000cea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000cb2:	f7ff fe0b 	bl	80008cc <HAL_GetTick>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d914      	bls.n	8000cea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d10d      	bne.n	8000cea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd2:	f043 0210 	orr.w	r2, r3, #16
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cde:	f043 0201 	orr.w	r2, r3, #1
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e007      	b.n	8000cfa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d0dc      	beq.n	8000cb2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d20:	4013      	ands	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d36:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	60d3      	str	r3, [r2, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <__NVIC_GetPriorityGrouping+0x18>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	f003 0307 	and.w	r3, r3, #7
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	db0b      	blt.n	8000d92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	f003 021f 	and.w	r2, r3, #31
 8000d80:	4906      	ldr	r1, [pc, #24]	; (8000d9c <__NVIC_EnableIRQ+0x34>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	095b      	lsrs	r3, r3, #5
 8000d88:	2001      	movs	r0, #1
 8000d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	e000e100 	.word	0xe000e100

08000da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	db0a      	blt.n	8000dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	490c      	ldr	r1, [pc, #48]	; (8000dec <__NVIC_SetPriority+0x4c>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	0112      	lsls	r2, r2, #4
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	440b      	add	r3, r1
 8000dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc8:	e00a      	b.n	8000de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4908      	ldr	r1, [pc, #32]	; (8000df0 <__NVIC_SetPriority+0x50>)
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	f003 030f 	and.w	r3, r3, #15
 8000dd6:	3b04      	subs	r3, #4
 8000dd8:	0112      	lsls	r2, r2, #4
 8000dda:	b2d2      	uxtb	r2, r2
 8000ddc:	440b      	add	r3, r1
 8000dde:	761a      	strb	r2, [r3, #24]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000e100 	.word	0xe000e100
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b089      	sub	sp, #36	; 0x24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f1c3 0307 	rsb	r3, r3, #7
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	bf28      	it	cs
 8000e12:	2304      	movcs	r3, #4
 8000e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	2b06      	cmp	r3, #6
 8000e1c:	d902      	bls.n	8000e24 <NVIC_EncodePriority+0x30>
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3b03      	subs	r3, #3
 8000e22:	e000      	b.n	8000e26 <NVIC_EncodePriority+0x32>
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43da      	mvns	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	401a      	ands	r2, r3
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	fa01 f303 	lsl.w	r3, r1, r3
 8000e46:	43d9      	mvns	r1, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	4313      	orrs	r3, r2
         );
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3724      	adds	r7, #36	; 0x24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e68:	d301      	bcc.n	8000e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00f      	b.n	8000e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <SysTick_Config+0x40>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e76:	210f      	movs	r1, #15
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f7ff ff90 	bl	8000da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <SysTick_Config+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <SysTick_Config+0x40>)
 8000e88:	2207      	movs	r2, #7
 8000e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	e000e010 	.word	0xe000e010

08000e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff2d 	bl	8000d04 <__NVIC_SetPriorityGrouping>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec4:	f7ff ff42 	bl	8000d4c <__NVIC_GetPriorityGrouping>
 8000ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	6978      	ldr	r0, [r7, #20]
 8000ed0:	f7ff ff90 	bl	8000df4 <NVIC_EncodePriority>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff5f 	bl	8000da0 <__NVIC_SetPriority>
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff35 	bl	8000d68 <__NVIC_EnableIRQ>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ffa2 	bl	8000e58 <SysTick_Config>
 8000f14:	4603      	mov	r3, r0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b08b      	sub	sp, #44	; 0x2c
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f32:	e169      	b.n	8001208 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f34:	2201      	movs	r2, #1
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	69fa      	ldr	r2, [r7, #28]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	f040 8158 	bne.w	8001202 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	4a9a      	ldr	r2, [pc, #616]	; (80011c0 <HAL_GPIO_Init+0x2a0>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d05e      	beq.n	800101a <HAL_GPIO_Init+0xfa>
 8000f5c:	4a98      	ldr	r2, [pc, #608]	; (80011c0 <HAL_GPIO_Init+0x2a0>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d875      	bhi.n	800104e <HAL_GPIO_Init+0x12e>
 8000f62:	4a98      	ldr	r2, [pc, #608]	; (80011c4 <HAL_GPIO_Init+0x2a4>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d058      	beq.n	800101a <HAL_GPIO_Init+0xfa>
 8000f68:	4a96      	ldr	r2, [pc, #600]	; (80011c4 <HAL_GPIO_Init+0x2a4>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d86f      	bhi.n	800104e <HAL_GPIO_Init+0x12e>
 8000f6e:	4a96      	ldr	r2, [pc, #600]	; (80011c8 <HAL_GPIO_Init+0x2a8>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d052      	beq.n	800101a <HAL_GPIO_Init+0xfa>
 8000f74:	4a94      	ldr	r2, [pc, #592]	; (80011c8 <HAL_GPIO_Init+0x2a8>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d869      	bhi.n	800104e <HAL_GPIO_Init+0x12e>
 8000f7a:	4a94      	ldr	r2, [pc, #592]	; (80011cc <HAL_GPIO_Init+0x2ac>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d04c      	beq.n	800101a <HAL_GPIO_Init+0xfa>
 8000f80:	4a92      	ldr	r2, [pc, #584]	; (80011cc <HAL_GPIO_Init+0x2ac>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d863      	bhi.n	800104e <HAL_GPIO_Init+0x12e>
 8000f86:	4a92      	ldr	r2, [pc, #584]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d046      	beq.n	800101a <HAL_GPIO_Init+0xfa>
 8000f8c:	4a90      	ldr	r2, [pc, #576]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d85d      	bhi.n	800104e <HAL_GPIO_Init+0x12e>
 8000f92:	2b12      	cmp	r3, #18
 8000f94:	d82a      	bhi.n	8000fec <HAL_GPIO_Init+0xcc>
 8000f96:	2b12      	cmp	r3, #18
 8000f98:	d859      	bhi.n	800104e <HAL_GPIO_Init+0x12e>
 8000f9a:	a201      	add	r2, pc, #4	; (adr r2, 8000fa0 <HAL_GPIO_Init+0x80>)
 8000f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa0:	0800101b 	.word	0x0800101b
 8000fa4:	08000ff5 	.word	0x08000ff5
 8000fa8:	08001007 	.word	0x08001007
 8000fac:	08001049 	.word	0x08001049
 8000fb0:	0800104f 	.word	0x0800104f
 8000fb4:	0800104f 	.word	0x0800104f
 8000fb8:	0800104f 	.word	0x0800104f
 8000fbc:	0800104f 	.word	0x0800104f
 8000fc0:	0800104f 	.word	0x0800104f
 8000fc4:	0800104f 	.word	0x0800104f
 8000fc8:	0800104f 	.word	0x0800104f
 8000fcc:	0800104f 	.word	0x0800104f
 8000fd0:	0800104f 	.word	0x0800104f
 8000fd4:	0800104f 	.word	0x0800104f
 8000fd8:	0800104f 	.word	0x0800104f
 8000fdc:	0800104f 	.word	0x0800104f
 8000fe0:	0800104f 	.word	0x0800104f
 8000fe4:	08000ffd 	.word	0x08000ffd
 8000fe8:	08001011 	.word	0x08001011
 8000fec:	4a79      	ldr	r2, [pc, #484]	; (80011d4 <HAL_GPIO_Init+0x2b4>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d013      	beq.n	800101a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ff2:	e02c      	b.n	800104e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	623b      	str	r3, [r7, #32]
          break;
 8000ffa:	e029      	b.n	8001050 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	3304      	adds	r3, #4
 8001002:	623b      	str	r3, [r7, #32]
          break;
 8001004:	e024      	b.n	8001050 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	3308      	adds	r3, #8
 800100c:	623b      	str	r3, [r7, #32]
          break;
 800100e:	e01f      	b.n	8001050 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	330c      	adds	r3, #12
 8001016:	623b      	str	r3, [r7, #32]
          break;
 8001018:	e01a      	b.n	8001050 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d102      	bne.n	8001028 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001022:	2304      	movs	r3, #4
 8001024:	623b      	str	r3, [r7, #32]
          break;
 8001026:	e013      	b.n	8001050 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d105      	bne.n	800103c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001030:	2308      	movs	r3, #8
 8001032:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69fa      	ldr	r2, [r7, #28]
 8001038:	611a      	str	r2, [r3, #16]
          break;
 800103a:	e009      	b.n	8001050 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800103c:	2308      	movs	r3, #8
 800103e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69fa      	ldr	r2, [r7, #28]
 8001044:	615a      	str	r2, [r3, #20]
          break;
 8001046:	e003      	b.n	8001050 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001048:	2300      	movs	r3, #0
 800104a:	623b      	str	r3, [r7, #32]
          break;
 800104c:	e000      	b.n	8001050 <HAL_GPIO_Init+0x130>
          break;
 800104e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	2bff      	cmp	r3, #255	; 0xff
 8001054:	d801      	bhi.n	800105a <HAL_GPIO_Init+0x13a>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	e001      	b.n	800105e <HAL_GPIO_Init+0x13e>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3304      	adds	r3, #4
 800105e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	2bff      	cmp	r3, #255	; 0xff
 8001064:	d802      	bhi.n	800106c <HAL_GPIO_Init+0x14c>
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	e002      	b.n	8001072 <HAL_GPIO_Init+0x152>
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	3b08      	subs	r3, #8
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	210f      	movs	r1, #15
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	fa01 f303 	lsl.w	r3, r1, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	401a      	ands	r2, r3
 8001084:	6a39      	ldr	r1, [r7, #32]
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	fa01 f303 	lsl.w	r3, r1, r3
 800108c:	431a      	orrs	r2, r3
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 80b1 	beq.w	8001202 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010a0:	4b4d      	ldr	r3, [pc, #308]	; (80011d8 <HAL_GPIO_Init+0x2b8>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	4a4c      	ldr	r2, [pc, #304]	; (80011d8 <HAL_GPIO_Init+0x2b8>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	6193      	str	r3, [r2, #24]
 80010ac:	4b4a      	ldr	r3, [pc, #296]	; (80011d8 <HAL_GPIO_Init+0x2b8>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010b8:	4a48      	ldr	r2, [pc, #288]	; (80011dc <HAL_GPIO_Init+0x2bc>)
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	089b      	lsrs	r3, r3, #2
 80010be:	3302      	adds	r3, #2
 80010c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	220f      	movs	r2, #15
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	4013      	ands	r3, r2
 80010da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a40      	ldr	r2, [pc, #256]	; (80011e0 <HAL_GPIO_Init+0x2c0>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d013      	beq.n	800110c <HAL_GPIO_Init+0x1ec>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a3f      	ldr	r2, [pc, #252]	; (80011e4 <HAL_GPIO_Init+0x2c4>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d00d      	beq.n	8001108 <HAL_GPIO_Init+0x1e8>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a3e      	ldr	r2, [pc, #248]	; (80011e8 <HAL_GPIO_Init+0x2c8>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d007      	beq.n	8001104 <HAL_GPIO_Init+0x1e4>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a3d      	ldr	r2, [pc, #244]	; (80011ec <HAL_GPIO_Init+0x2cc>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d101      	bne.n	8001100 <HAL_GPIO_Init+0x1e0>
 80010fc:	2303      	movs	r3, #3
 80010fe:	e006      	b.n	800110e <HAL_GPIO_Init+0x1ee>
 8001100:	2304      	movs	r3, #4
 8001102:	e004      	b.n	800110e <HAL_GPIO_Init+0x1ee>
 8001104:	2302      	movs	r3, #2
 8001106:	e002      	b.n	800110e <HAL_GPIO_Init+0x1ee>
 8001108:	2301      	movs	r3, #1
 800110a:	e000      	b.n	800110e <HAL_GPIO_Init+0x1ee>
 800110c:	2300      	movs	r3, #0
 800110e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001110:	f002 0203 	and.w	r2, r2, #3
 8001114:	0092      	lsls	r2, r2, #2
 8001116:	4093      	lsls	r3, r2
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	4313      	orrs	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800111e:	492f      	ldr	r1, [pc, #188]	; (80011dc <HAL_GPIO_Init+0x2bc>)
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	089b      	lsrs	r3, r3, #2
 8001124:	3302      	adds	r3, #2
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d006      	beq.n	8001146 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001138:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	492c      	ldr	r1, [pc, #176]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	600b      	str	r3, [r1, #0]
 8001144:	e006      	b.n	8001154 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001146:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	43db      	mvns	r3, r3
 800114e:	4928      	ldr	r1, [pc, #160]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001150:	4013      	ands	r3, r2
 8001152:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d006      	beq.n	800116e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001160:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	4922      	ldr	r1, [pc, #136]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	604b      	str	r3, [r1, #4]
 800116c:	e006      	b.n	800117c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	43db      	mvns	r3, r3
 8001176:	491e      	ldr	r1, [pc, #120]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001178:	4013      	ands	r3, r2
 800117a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d006      	beq.n	8001196 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	4918      	ldr	r1, [pc, #96]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	608b      	str	r3, [r1, #8]
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001196:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	43db      	mvns	r3, r3
 800119e:	4914      	ldr	r1, [pc, #80]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d021      	beq.n	80011f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	490e      	ldr	r1, [pc, #56]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	60cb      	str	r3, [r1, #12]
 80011bc:	e021      	b.n	8001202 <HAL_GPIO_Init+0x2e2>
 80011be:	bf00      	nop
 80011c0:	10320000 	.word	0x10320000
 80011c4:	10310000 	.word	0x10310000
 80011c8:	10220000 	.word	0x10220000
 80011cc:	10210000 	.word	0x10210000
 80011d0:	10120000 	.word	0x10120000
 80011d4:	10110000 	.word	0x10110000
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010000 	.word	0x40010000
 80011e0:	40010800 	.word	0x40010800
 80011e4:	40010c00 	.word	0x40010c00
 80011e8:	40011000 	.word	0x40011000
 80011ec:	40011400 	.word	0x40011400
 80011f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_GPIO_Init+0x304>)
 80011f6:	68da      	ldr	r2, [r3, #12]
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	4909      	ldr	r1, [pc, #36]	; (8001224 <HAL_GPIO_Init+0x304>)
 80011fe:	4013      	ands	r3, r2
 8001200:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	3301      	adds	r3, #1
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	fa22 f303 	lsr.w	r3, r2, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	f47f ae8e 	bne.w	8000f34 <HAL_GPIO_Init+0x14>
  }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	372c      	adds	r7, #44	; 0x2c
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	40010400 	.word	0x40010400

08001228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]
 8001234:	4613      	mov	r3, r2
 8001236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001238:	787b      	ldrb	r3, [r7, #1]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800123e:	887a      	ldrh	r2, [r7, #2]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001244:	e003      	b.n	800124e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001246:	887b      	ldrh	r3, [r7, #2]
 8001248:	041a      	lsls	r2, r3, #16
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	611a      	str	r2, [r3, #16]
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125a:	b08b      	sub	sp, #44	; 0x2c
 800125c:	af06      	add	r7, sp, #24
 800125e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e0fd      	b.n	8001466 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d106      	bne.n	8001284 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f008 fe38 	bl	8009ef4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2203      	movs	r2, #3
 8001288:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f003 f9cf 	bl	8004634 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	687e      	ldr	r6, [r7, #4]
 800129e:	466d      	mov	r5, sp
 80012a0:	f106 0410 	add.w	r4, r6, #16
 80012a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012a8:	6823      	ldr	r3, [r4, #0]
 80012aa:	602b      	str	r3, [r5, #0]
 80012ac:	1d33      	adds	r3, r6, #4
 80012ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012b0:	6838      	ldr	r0, [r7, #0]
 80012b2:	f003 f999 	bl	80045e8 <USB_CoreInit>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d005      	beq.n	80012c8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2202      	movs	r2, #2
 80012c0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e0ce      	b.n	8001466 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f003 f9ca 	bl	8004668 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012d4:	2300      	movs	r3, #0
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	e04c      	b.n	8001374 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	4613      	mov	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	440b      	add	r3, r1
 80012ea:	3301      	adds	r3, #1
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	1c5a      	adds	r2, r3, #1
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	440b      	add	r3, r1
 8001300:	7bfa      	ldrb	r2, [r7, #15]
 8001302:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	b298      	uxth	r0, r3
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	440b      	add	r3, r1
 8001316:	3336      	adds	r3, #54	; 0x36
 8001318:	4602      	mov	r2, r0
 800131a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	440b      	add	r3, r1
 800132c:	3303      	adds	r3, #3
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001332:	7bfa      	ldrb	r2, [r7, #15]
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	440b      	add	r3, r1
 8001340:	3338      	adds	r3, #56	; 0x38
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001346:	7bfa      	ldrb	r2, [r7, #15]
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	440b      	add	r3, r1
 8001354:	333c      	adds	r3, #60	; 0x3c
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800135a:	7bfa      	ldrb	r2, [r7, #15]
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	440b      	add	r3, r1
 8001368:	3340      	adds	r3, #64	; 0x40
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	3301      	adds	r3, #1
 8001372:	73fb      	strb	r3, [r7, #15]
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	429a      	cmp	r2, r3
 800137c:	d3ad      	bcc.n	80012da <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]
 8001382:	e044      	b.n	800140e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001384:	7bfa      	ldrb	r2, [r7, #15]
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	440b      	add	r3, r1
 8001392:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	440b      	add	r3, r1
 80013a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013ac:	7bfa      	ldrb	r2, [r7, #15]
 80013ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013b0:	7bfa      	ldrb	r2, [r7, #15]
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	440b      	add	r3, r1
 80013be:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013c6:	7bfa      	ldrb	r2, [r7, #15]
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	440b      	add	r3, r1
 80013d4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013dc:	7bfa      	ldrb	r2, [r7, #15]
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	4613      	mov	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	440b      	add	r3, r1
 80013ea:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013f2:	7bfa      	ldrb	r2, [r7, #15]
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	440b      	add	r3, r1
 8001400:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	3301      	adds	r3, #1
 800140c:	73fb      	strb	r3, [r7, #15]
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	429a      	cmp	r2, r3
 8001416:	d3b5      	bcc.n	8001384 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	687e      	ldr	r6, [r7, #4]
 8001420:	466d      	mov	r5, sp
 8001422:	f106 0410 	add.w	r4, r6, #16
 8001426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800142a:	6823      	ldr	r3, [r4, #0]
 800142c:	602b      	str	r3, [r5, #0]
 800142e:	1d33      	adds	r3, r6, #4
 8001430:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001432:	6838      	ldr	r0, [r7, #0]
 8001434:	f003 f924 	bl	8004680 <USB_DevInit>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d005      	beq.n	800144a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2202      	movs	r2, #2
 8001442:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e00d      	b.n	8001466 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2201      	movs	r2, #1
 8001456:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f005 faab 	bl	80069ba <USB_DevDisconnect>

  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800146e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800147c:	2b01      	cmp	r3, #1
 800147e:	d101      	bne.n	8001484 <HAL_PCD_Start+0x16>
 8001480:	2302      	movs	r3, #2
 8001482:	e016      	b.n	80014b2 <HAL_PCD_Start+0x44>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f003 f8b9 	bl	8004608 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001496:	2101      	movs	r1, #1
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f008 ffb4 	bl	800a406 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f005 fa7f 	bl	80069a6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b088      	sub	sp, #32
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f005 fa81 	bl	80069ce <USB_ReadInterrupts>
 80014cc:	4603      	mov	r3, r0
 80014ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014d6:	d102      	bne.n	80014de <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 fb8e 	bl	8001bfa <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f005 fa73 	bl	80069ce <USB_ReadInterrupts>
 80014e8:	4603      	mov	r3, r0
 80014ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014f2:	d112      	bne.n	800151a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001506:	b292      	uxth	r2, r2
 8001508:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f008 fd6c 	bl	8009fea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001512:	2100      	movs	r1, #0
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f925 	bl	8001764 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f005 fa55 	bl	80069ce <USB_ReadInterrupts>
 8001524:	4603      	mov	r3, r0
 8001526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800152e:	d10b      	bne.n	8001548 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001538:	b29a      	uxth	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001542:	b292      	uxth	r2, r2
 8001544:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f005 fa3e 	bl	80069ce <USB_ReadInterrupts>
 8001552:	4603      	mov	r3, r0
 8001554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800155c:	d10b      	bne.n	8001576 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001566:	b29a      	uxth	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001570:	b292      	uxth	r2, r2
 8001572:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f005 fa27 	bl	80069ce <USB_ReadInterrupts>
 8001580:	4603      	mov	r3, r0
 8001582:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800158a:	d126      	bne.n	80015da <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001594:	b29a      	uxth	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0204 	bic.w	r2, r2, #4
 800159e:	b292      	uxth	r2, r2
 80015a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0208 	bic.w	r2, r2, #8
 80015b6:	b292      	uxth	r2, r2
 80015b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f008 fd4d 	bl	800a05c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015d4:	b292      	uxth	r2, r2
 80015d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f005 f9f5 	bl	80069ce <USB_ReadInterrupts>
 80015e4:	4603      	mov	r3, r0
 80015e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015ee:	f040 8084 	bne.w	80016fa <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	77fb      	strb	r3, [r7, #31]
 80015f6:	e011      	b.n	800161c <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	7ffb      	ldrb	r3, [r7, #31]
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	441a      	add	r2, r3
 8001604:	7ffb      	ldrb	r3, [r7, #31]
 8001606:	8812      	ldrh	r2, [r2, #0]
 8001608:	b292      	uxth	r2, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	f107 0120 	add.w	r1, r7, #32
 8001610:	440b      	add	r3, r1
 8001612:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001616:	7ffb      	ldrb	r3, [r7, #31]
 8001618:	3301      	adds	r3, #1
 800161a:	77fb      	strb	r3, [r7, #31]
 800161c:	7ffb      	ldrb	r3, [r7, #31]
 800161e:	2b07      	cmp	r3, #7
 8001620:	d9ea      	bls.n	80015f8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800162a:	b29a      	uxth	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f042 0201 	orr.w	r2, r2, #1
 8001634:	b292      	uxth	r2, r2
 8001636:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001642:	b29a      	uxth	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 0201 	bic.w	r2, r2, #1
 800164c:	b292      	uxth	r2, r2
 800164e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001652:	bf00      	nop
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800165c:	b29b      	uxth	r3, r3
 800165e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f6      	beq.n	8001654 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800166e:	b29a      	uxth	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001678:	b292      	uxth	r2, r2
 800167a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800167e:	2300      	movs	r3, #0
 8001680:	77fb      	strb	r3, [r7, #31]
 8001682:	e010      	b.n	80016a6 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001684:	7ffb      	ldrb	r3, [r7, #31]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6812      	ldr	r2, [r2, #0]
 800168a:	4611      	mov	r1, r2
 800168c:	7ffa      	ldrb	r2, [r7, #31]
 800168e:	0092      	lsls	r2, r2, #2
 8001690:	440a      	add	r2, r1
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	f107 0120 	add.w	r1, r7, #32
 8001698:	440b      	add	r3, r1
 800169a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800169e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80016a0:	7ffb      	ldrb	r3, [r7, #31]
 80016a2:	3301      	adds	r3, #1
 80016a4:	77fb      	strb	r3, [r7, #31]
 80016a6:	7ffb      	ldrb	r3, [r7, #31]
 80016a8:	2b07      	cmp	r3, #7
 80016aa:	d9eb      	bls.n	8001684 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0208 	orr.w	r2, r2, #8
 80016be:	b292      	uxth	r2, r2
 80016c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016d6:	b292      	uxth	r2, r2
 80016d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0204 	orr.w	r2, r2, #4
 80016ee:	b292      	uxth	r2, r2
 80016f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f008 fc97 	bl	800a028 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f005 f965 	bl	80069ce <USB_ReadInterrupts>
 8001704:	4603      	mov	r3, r0
 8001706:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800170a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800170e:	d10e      	bne.n	800172e <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001718:	b29a      	uxth	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001722:	b292      	uxth	r2, r2
 8001724:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f008 fc50 	bl	8009fce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f005 f94b 	bl	80069ce <USB_ReadInterrupts>
 8001738:	4603      	mov	r3, r0
 800173a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001742:	d10b      	bne.n	800175c <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800174c:	b29a      	uxth	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001756:	b292      	uxth	r2, r2
 8001758:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800175c:	bf00      	nop
 800175e:	3720      	adds	r7, #32
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <HAL_PCD_SetAddress+0x1a>
 800177a:	2302      	movs	r3, #2
 800177c:	e013      	b.n	80017a6 <HAL_PCD_SetAddress+0x42>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	78fa      	ldrb	r2, [r7, #3]
 800178a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	78fa      	ldrb	r2, [r7, #3]
 8001794:	4611      	mov	r1, r2
 8001796:	4618      	mov	r0, r3
 8001798:	f005 f8f2 	bl	8006980 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b084      	sub	sp, #16
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	4608      	mov	r0, r1
 80017b8:	4611      	mov	r1, r2
 80017ba:	461a      	mov	r2, r3
 80017bc:	4603      	mov	r3, r0
 80017be:	70fb      	strb	r3, [r7, #3]
 80017c0:	460b      	mov	r3, r1
 80017c2:	803b      	strh	r3, [r7, #0]
 80017c4:	4613      	mov	r3, r2
 80017c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	da0e      	bge.n	80017f2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	4413      	add	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2201      	movs	r2, #1
 80017ee:	705a      	strb	r2, [r3, #1]
 80017f0:	e00e      	b.n	8001810 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	f003 0207 	and.w	r2, r3, #7
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	4413      	add	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	b2da      	uxtb	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800181c:	883a      	ldrh	r2, [r7, #0]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	78ba      	ldrb	r2, [r7, #2]
 8001826:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	785b      	ldrb	r3, [r3, #1]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d004      	beq.n	800183a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	b29a      	uxth	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800183a:	78bb      	ldrb	r3, [r7, #2]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d102      	bne.n	8001846 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800184c:	2b01      	cmp	r3, #1
 800184e:	d101      	bne.n	8001854 <HAL_PCD_EP_Open+0xa6>
 8001850:	2302      	movs	r3, #2
 8001852:	e00e      	b.n	8001872 <HAL_PCD_EP_Open+0xc4>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68f9      	ldr	r1, [r7, #12]
 8001862:	4618      	mov	r0, r3
 8001864:	f002 ff42 	bl	80046ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001870:	7afb      	ldrb	r3, [r7, #11]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	460b      	mov	r3, r1
 8001884:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001886:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800188a:	2b00      	cmp	r3, #0
 800188c:	da0e      	bge.n	80018ac <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2201      	movs	r2, #1
 80018a8:	705a      	strb	r2, [r3, #1]
 80018aa:	e00e      	b.n	80018ca <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	f003 0207 	and.w	r2, r3, #7
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d101      	bne.n	80018e4 <HAL_PCD_EP_Close+0x6a>
 80018e0:	2302      	movs	r3, #2
 80018e2:	e00e      	b.n	8001902 <HAL_PCD_EP_Close+0x88>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68f9      	ldr	r1, [r7, #12]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f003 fa64 	bl	8004dc0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	603b      	str	r3, [r7, #0]
 8001916:	460b      	mov	r3, r1
 8001918:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800191a:	7afb      	ldrb	r3, [r7, #11]
 800191c:	f003 0207 	and.w	r2, r3, #7
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	2200      	movs	r2, #0
 8001942:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	2200      	movs	r2, #0
 8001948:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800194a:	7afb      	ldrb	r3, [r7, #11]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	b2da      	uxtb	r2, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001956:	7afb      	ldrb	r3, [r7, #11]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	2b00      	cmp	r3, #0
 800195e:	d106      	bne.n	800196e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6979      	ldr	r1, [r7, #20]
 8001966:	4618      	mov	r0, r3
 8001968:	f003 fc16 	bl	8005198 <USB_EPStartXfer>
 800196c:	e005      	b.n	800197a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6979      	ldr	r1, [r7, #20]
 8001974:	4618      	mov	r0, r3
 8001976:	f003 fc0f 	bl	8005198 <USB_EPStartXfer>
  }

  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001990:	78fb      	ldrb	r3, [r7, #3]
 8001992:	f003 0207 	and.w	r2, r3, #7
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	440b      	add	r3, r1
 80019a2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr

080019b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	460b      	mov	r3, r1
 80019c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019c2:	7afb      	ldrb	r3, [r7, #11]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	1c5a      	adds	r2, r3, #1
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	4413      	add	r3, r2
 80019d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	2200      	movs	r2, #0
 80019f6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	2201      	movs	r2, #1
 80019fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019fe:	7afb      	ldrb	r3, [r7, #11]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a0a:	7afb      	ldrb	r3, [r7, #11]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d106      	bne.n	8001a22 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6979      	ldr	r1, [r7, #20]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f003 fbbc 	bl	8005198 <USB_EPStartXfer>
 8001a20:	e005      	b.n	8001a2e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6979      	ldr	r1, [r7, #20]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f003 fbb5 	bl	8005198 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	f003 0207 	and.w	r2, r3, #7
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d901      	bls.n	8001a56 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e04c      	b.n	8001af0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	da0e      	bge.n	8001a7c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2201      	movs	r2, #1
 8001a78:	705a      	strb	r2, [r3, #1]
 8001a7a:	e00c      	b.n	8001a96 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a7c:	78fa      	ldrb	r2, [r7, #3]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a9c:	78fb      	ldrb	r3, [r7, #3]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d101      	bne.n	8001ab6 <HAL_PCD_EP_SetStall+0x7e>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e01c      	b.n	8001af0 <HAL_PCD_EP_SetStall+0xb8>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68f9      	ldr	r1, [r7, #12]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f004 fe5e 	bl	8006786 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d108      	bne.n	8001ae6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	f004 ff83 	bl	80069ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b04:	78fb      	ldrb	r3, [r7, #3]
 8001b06:	f003 020f 	and.w	r2, r3, #15
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d901      	bls.n	8001b16 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e040      	b.n	8001b98 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	da0e      	bge.n	8001b3c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2201      	movs	r2, #1
 8001b38:	705a      	strb	r2, [r3, #1]
 8001b3a:	e00e      	b.n	8001b5a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	f003 0207 	and.w	r2, r3, #7
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_PCD_EP_ClrStall+0x82>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e00e      	b.n	8001b98 <HAL_PCD_EP_ClrStall+0xa0>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68f9      	ldr	r1, [r7, #12]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f004 fe4c 	bl	8006826 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d101      	bne.n	8001bba <HAL_PCD_EP_Flush+0x1a>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e01b      	b.n	8001bf2 <HAL_PCD_EP_Flush+0x52>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 8001bc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	da09      	bge.n	8001bde <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	f002 fd72 	bl	80046c0 <USB_FlushTxFifo>
 8001bdc:	e004      	b.n	8001be8 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f002 fd77 	bl	80046d6 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b08e      	sub	sp, #56	; 0x38
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c02:	e2ec      	b.n	80021de <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c0c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001c0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001c1a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f040 8161 	bne.w	8001ee6 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001c24:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d152      	bne.n	8001cd4 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c3e:	81fb      	strh	r3, [r7, #14]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	89fb      	ldrh	r3, [r7, #14]
 8001c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3328      	adds	r3, #40	; 0x28
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	461a      	mov	r2, r3
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	4413      	add	r3, r2
 8001c76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	695a      	ldr	r2, [r3, #20]
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	441a      	add	r2, r3
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001c92:	2100      	movs	r1, #0
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f008 f980 	bl	8009f9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 829b 	beq.w	80021de <PCD_EP_ISR_Handler+0x5e4>
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f040 8296 	bne.w	80021de <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	b292      	uxth	r2, r2
 8001cc6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001cd2:	e284      	b.n	80021de <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ce4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d034      	beq.n	8001d58 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4413      	add	r3, r2
 8001d02:	3306      	adds	r3, #6
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d26:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	f004 fead 	bl	8006a8c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d3e:	4013      	ands	r3, r2
 8001d40:	823b      	strh	r3, [r7, #16]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	8a3a      	ldrh	r2, [r7, #16]
 8001d48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d4c:	b292      	uxth	r2, r2
 8001d4e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f008 f8f5 	bl	8009f40 <HAL_PCD_SetupStageCallback>
 8001d56:	e242      	b.n	80021de <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d58:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f280 823e 	bge.w	80021de <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d6e:	4013      	ands	r3, r2
 8001d70:	83bb      	strh	r3, [r7, #28]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	8bba      	ldrh	r2, [r7, #28]
 8001d78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d7c:	b292      	uxth	r2, r2
 8001d7e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	4413      	add	r3, r2
 8001d94:	3306      	adds	r3, #6
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d019      	beq.n	8001de8 <PCD_EP_ISR_Handler+0x1ee>
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d015      	beq.n	8001de8 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	6959      	ldr	r1, [r3, #20]
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	f004 fe5d 	bl	8006a8c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	695a      	ldr	r2, [r3, #20]
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	441a      	add	r2, r3
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001de0:	2100      	movs	r1, #0
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f008 f8be 	bl	8009f64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f040 81f2 	bne.w	80021de <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	61bb      	str	r3, [r7, #24]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	4413      	add	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d112      	bne.n	8001e48 <PCD_EP_ISR_Handler+0x24e>
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	801a      	strh	r2, [r3, #0]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	801a      	strh	r2, [r3, #0]
 8001e46:	e02f      	b.n	8001ea8 <PCD_EP_ISR_Handler+0x2ae>
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	2b3e      	cmp	r3, #62	; 0x3e
 8001e4e:	d813      	bhi.n	8001e78 <PCD_EP_ISR_Handler+0x27e>
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	085b      	lsrs	r3, r3, #1
 8001e56:	633b      	str	r3, [r7, #48]	; 0x30
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d002      	beq.n	8001e6a <PCD_EP_ISR_Handler+0x270>
 8001e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e66:	3301      	adds	r3, #1
 8001e68:	633b      	str	r3, [r7, #48]	; 0x30
 8001e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	029b      	lsls	r3, r3, #10
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	801a      	strh	r2, [r3, #0]
 8001e76:	e017      	b.n	8001ea8 <PCD_EP_ISR_Handler+0x2ae>
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	095b      	lsrs	r3, r3, #5
 8001e7e:	633b      	str	r3, [r7, #48]	; 0x30
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	f003 031f 	and.w	r3, r3, #31
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d102      	bne.n	8001e92 <PCD_EP_ISR_Handler+0x298>
 8001e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	633b      	str	r3, [r7, #48]	; 0x30
 8001e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	029b      	lsls	r3, r3, #10
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eb8:	827b      	strh	r3, [r7, #18]
 8001eba:	8a7b      	ldrh	r3, [r7, #18]
 8001ebc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001ec0:	827b      	strh	r3, [r7, #18]
 8001ec2:	8a7b      	ldrh	r3, [r7, #18]
 8001ec4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ec8:	827b      	strh	r3, [r7, #18]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	8a7b      	ldrh	r3, [r7, #18]
 8001ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	8013      	strh	r3, [r2, #0]
 8001ee4:	e17b      	b.n	80021de <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ef8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f280 80ea 	bge.w	80020d6 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f18:	4013      	ands	r3, r2
 8001f1a:	853b      	strh	r3, [r7, #40]	; 0x28
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f30:	b292      	uxth	r2, r2
 8001f32:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001f34:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	4413      	add	r3, r2
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	7b1b      	ldrb	r3, [r3, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d122      	bne.n	8001f98 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4413      	add	r3, r2
 8001f66:	3306      	adds	r3, #6
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f7a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001f7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 8087 	beq.w	8002092 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	6959      	ldr	r1, [r3, #20]
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	88da      	ldrh	r2, [r3, #6]
 8001f90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f92:	f004 fd7b 	bl	8006a8c <USB_ReadPMA>
 8001f96:	e07c      	b.n	8002092 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	78db      	ldrb	r3, [r3, #3]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d108      	bne.n	8001fb2 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001fa0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f927 	bl	80021fa <HAL_PCD_EP_DB_Receive>
 8001fac:	4603      	mov	r3, r0
 8001fae:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001fb0:	e06f      	b.n	8002092 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fcc:	847b      	strh	r3, [r7, #34]	; 0x22
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	441a      	add	r2, r3
 8001fdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d021      	beq.n	8002050 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002014:	b29b      	uxth	r3, r3
 8002016:	461a      	mov	r2, r3
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4413      	add	r3, r2
 8002020:	3302      	adds	r3, #2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6812      	ldr	r2, [r2, #0]
 8002028:	4413      	add	r3, r2
 800202a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002034:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002036:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002038:	2b00      	cmp	r3, #0
 800203a:	d02a      	beq.n	8002092 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6818      	ldr	r0, [r3, #0]
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	6959      	ldr	r1, [r3, #20]
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	891a      	ldrh	r2, [r3, #8]
 8002048:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800204a:	f004 fd1f 	bl	8006a8c <USB_ReadPMA>
 800204e:	e020      	b.n	8002092 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002058:	b29b      	uxth	r3, r3
 800205a:	461a      	mov	r2, r3
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	3306      	adds	r3, #6
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	4413      	add	r3, r2
 800206e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002078:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800207a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	6959      	ldr	r1, [r3, #20]
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	895a      	ldrh	r2, [r3, #10]
 800208c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800208e:	f004 fcfd 	bl	8006a8c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	69da      	ldr	r2, [r3, #28]
 8002096:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002098:	441a      	add	r2, r3
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	695a      	ldr	r2, [r3, #20]
 80020a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020a4:	441a      	add	r2, r3
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d004      	beq.n	80020bc <PCD_EP_ISR_Handler+0x4c2>
 80020b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d206      	bcs.n	80020ca <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	4619      	mov	r1, r3
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f007 ff4e 	bl	8009f64 <HAL_PCD_DataOutStageCallback>
 80020c8:	e005      	b.n	80020d6 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020d0:	4618      	mov	r0, r3
 80020d2:	f003 f861 	bl	8005198 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80020d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d07e      	beq.n	80021de <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80020e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	b29b      	uxth	r3, r3
 8002106:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800210a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800210e:	843b      	strh	r3, [r7, #32]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	461a      	mov	r2, r3
 8002116:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	441a      	add	r2, r3
 800211e:	8c3b      	ldrh	r3, [r7, #32]
 8002120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002128:	b29b      	uxth	r3, r3
 800212a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	78db      	ldrb	r3, [r3, #3]
 8002130:	2b03      	cmp	r3, #3
 8002132:	d00c      	beq.n	800214e <PCD_EP_ISR_Handler+0x554>
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	78db      	ldrb	r3, [r3, #3]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002140:	2b02      	cmp	r3, #2
 8002142:	d146      	bne.n	80021d2 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002144:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214a:	2b00      	cmp	r3, #0
 800214c:	d141      	bne.n	80021d2 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002156:	b29b      	uxth	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4413      	add	r3, r2
 8002162:	3302      	adds	r3, #2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	4413      	add	r3, r2
 800216c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002176:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	699a      	ldr	r2, [r3, #24]
 800217c:	8bfb      	ldrh	r3, [r7, #30]
 800217e:	429a      	cmp	r2, r3
 8002180:	d906      	bls.n	8002190 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	699a      	ldr	r2, [r3, #24]
 8002186:	8bfb      	ldrh	r3, [r7, #30]
 8002188:	1ad2      	subs	r2, r2, r3
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	619a      	str	r2, [r3, #24]
 800218e:	e002      	b.n	8002196 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	2200      	movs	r2, #0
 8002194:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	4619      	mov	r1, r3
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f007 fef8 	bl	8009f9a <HAL_PCD_DataInStageCallback>
 80021aa:	e018      	b.n	80021de <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	695a      	ldr	r2, [r3, #20]
 80021b0:	8bfb      	ldrh	r3, [r7, #30]
 80021b2:	441a      	add	r2, r3
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	69da      	ldr	r2, [r3, #28]
 80021bc:	8bfb      	ldrh	r3, [r7, #30]
 80021be:	441a      	add	r2, r3
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021ca:	4618      	mov	r0, r3
 80021cc:	f002 ffe4 	bl	8005198 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80021d0:	e005      	b.n	80021de <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80021d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021d4:	461a      	mov	r2, r3
 80021d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f91b 	bl	8002414 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	b21b      	sxth	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f6ff ad0a 	blt.w	8001c04 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3738      	adds	r7, #56	; 0x38
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b088      	sub	sp, #32
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	4613      	mov	r3, r2
 8002206:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002208:	88fb      	ldrh	r3, [r7, #6]
 800220a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d07e      	beq.n	8002310 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800221a:	b29b      	uxth	r3, r3
 800221c:	461a      	mov	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4413      	add	r3, r2
 8002226:	3302      	adds	r3, #2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	6812      	ldr	r2, [r2, #0]
 800222e:	4413      	add	r3, r2
 8002230:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800223a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	699a      	ldr	r2, [r3, #24]
 8002240:	8b7b      	ldrh	r3, [r7, #26]
 8002242:	429a      	cmp	r2, r3
 8002244:	d306      	bcc.n	8002254 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	699a      	ldr	r2, [r3, #24]
 800224a:	8b7b      	ldrh	r3, [r7, #26]
 800224c:	1ad2      	subs	r2, r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	619a      	str	r2, [r3, #24]
 8002252:	e002      	b.n	800225a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2200      	movs	r2, #0
 8002258:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d123      	bne.n	80022aa <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	b29b      	uxth	r3, r3
 8002274:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800227c:	833b      	strh	r3, [r7, #24]
 800227e:	8b3b      	ldrh	r3, [r7, #24]
 8002280:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002284:	833b      	strh	r3, [r7, #24]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	441a      	add	r2, r3
 8002294:	8b3b      	ldrh	r3, [r7, #24]
 8002296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800229a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800229e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d01f      	beq.n	80022f4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ce:	82fb      	strh	r3, [r7, #22]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	441a      	add	r2, r3
 80022de:	8afb      	ldrh	r3, [r7, #22]
 80022e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80022f4:	8b7b      	ldrh	r3, [r7, #26]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 8087 	beq.w	800240a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	6959      	ldr	r1, [r3, #20]
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	891a      	ldrh	r2, [r3, #8]
 8002308:	8b7b      	ldrh	r3, [r7, #26]
 800230a:	f004 fbbf 	bl	8006a8c <USB_ReadPMA>
 800230e:	e07c      	b.n	800240a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002318:	b29b      	uxth	r3, r3
 800231a:	461a      	mov	r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4413      	add	r3, r2
 8002324:	3306      	adds	r3, #6
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	4413      	add	r3, r2
 800232e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002338:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	699a      	ldr	r2, [r3, #24]
 800233e:	8b7b      	ldrh	r3, [r7, #26]
 8002340:	429a      	cmp	r2, r3
 8002342:	d306      	bcc.n	8002352 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	699a      	ldr	r2, [r3, #24]
 8002348:	8b7b      	ldrh	r3, [r7, #26]
 800234a:	1ad2      	subs	r2, r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	619a      	str	r2, [r3, #24]
 8002350:	e002      	b.n	8002358 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2200      	movs	r2, #0
 8002356:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d123      	bne.n	80023a8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	461a      	mov	r2, r3
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	b29b      	uxth	r3, r3
 8002372:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800237a:	83fb      	strh	r3, [r7, #30]
 800237c:	8bfb      	ldrh	r3, [r7, #30]
 800237e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002382:	83fb      	strh	r3, [r7, #30]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	461a      	mov	r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	441a      	add	r2, r3
 8002392:	8bfb      	ldrh	r3, [r7, #30]
 8002394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800239c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80023a8:	88fb      	ldrh	r3, [r7, #6]
 80023aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d11f      	bne.n	80023f2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023cc:	83bb      	strh	r3, [r7, #28]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	441a      	add	r2, r3
 80023dc:	8bbb      	ldrh	r3, [r7, #28]
 80023de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023f2:	8b7b      	ldrh	r3, [r7, #26]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	6959      	ldr	r1, [r3, #20]
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	895a      	ldrh	r2, [r3, #10]
 8002404:	8b7b      	ldrh	r3, [r7, #26]
 8002406:	f004 fb41 	bl	8006a8c <USB_ReadPMA>
    }
  }

  return count;
 800240a:	8b7b      	ldrh	r3, [r7, #26]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3720      	adds	r7, #32
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b0a2      	sub	sp, #136	; 0x88
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	4613      	mov	r3, r2
 8002420:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002422:	88fb      	ldrh	r3, [r7, #6]
 8002424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 81c7 	beq.w	80027bc <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002436:	b29b      	uxth	r3, r3
 8002438:	461a      	mov	r2, r3
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4413      	add	r3, r2
 8002442:	3302      	adds	r3, #2
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	4413      	add	r3, r2
 800244c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002456:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	699a      	ldr	r2, [r3, #24]
 800245e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002462:	429a      	cmp	r2, r3
 8002464:	d907      	bls.n	8002476 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	699a      	ldr	r2, [r3, #24]
 800246a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800246e:	1ad2      	subs	r2, r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	619a      	str	r2, [r3, #24]
 8002474:	e002      	b.n	800247c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2200      	movs	r2, #0
 800247a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	2b00      	cmp	r3, #0
 8002482:	f040 80b9 	bne.w	80025f8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	785b      	ldrb	r3, [r3, #1]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d126      	bne.n	80024dc <HAL_PCD_EP_DB_Transmit+0xc8>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800249c:	b29b      	uxth	r3, r3
 800249e:	461a      	mov	r2, r3
 80024a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a2:	4413      	add	r3, r2
 80024a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	011a      	lsls	r2, r3, #4
 80024ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ae:	4413      	add	r3, r2
 80024b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	801a      	strh	r2, [r3, #0]
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	801a      	strh	r2, [r3, #0]
 80024da:	e01a      	b.n	8002512 <HAL_PCD_EP_DB_Transmit+0xfe>
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	785b      	ldrb	r3, [r3, #1]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d116      	bne.n	8002512 <HAL_PCD_EP_DB_Transmit+0xfe>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	633b      	str	r3, [r7, #48]	; 0x30
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f8:	4413      	add	r3, r2
 80024fa:	633b      	str	r3, [r7, #48]	; 0x30
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	011a      	lsls	r2, r3, #4
 8002502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002504:	4413      	add	r3, r2
 8002506:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800250c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250e:	2200      	movs	r2, #0
 8002510:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	623b      	str	r3, [r7, #32]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	785b      	ldrb	r3, [r3, #1]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d126      	bne.n	800256e <HAL_PCD_EP_DB_Transmit+0x15a>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	61bb      	str	r3, [r7, #24]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800252e:	b29b      	uxth	r3, r3
 8002530:	461a      	mov	r2, r3
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	4413      	add	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	011a      	lsls	r2, r3, #4
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	4413      	add	r3, r2
 8002542:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	b29b      	uxth	r3, r3
 800254e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002552:	b29a      	uxth	r2, r3
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	801a      	strh	r2, [r3, #0]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	b29b      	uxth	r3, r3
 800255e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002566:	b29a      	uxth	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	801a      	strh	r2, [r3, #0]
 800256c:	e017      	b.n	800259e <HAL_PCD_EP_DB_Transmit+0x18a>
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	785b      	ldrb	r3, [r3, #1]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d113      	bne.n	800259e <HAL_PCD_EP_DB_Transmit+0x18a>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800257e:	b29b      	uxth	r3, r3
 8002580:	461a      	mov	r2, r3
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	4413      	add	r3, r2
 8002586:	623b      	str	r3, [r7, #32]
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	011a      	lsls	r2, r3, #4
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	4413      	add	r3, r2
 8002592:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002596:	61fb      	str	r3, [r7, #28]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	2200      	movs	r2, #0
 800259c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	4619      	mov	r1, r3
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f007 fcf8 	bl	8009f9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025aa:	88fb      	ldrh	r3, [r7, #6]
 80025ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 82d4 	beq.w	8002b5e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d0:	827b      	strh	r3, [r7, #18]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	441a      	add	r2, r3
 80025e0:	8a7b      	ldrh	r3, [r7, #18]
 80025e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	8013      	strh	r3, [r2, #0]
 80025f6:	e2b2      	b.n	8002b5e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d021      	beq.n	8002646 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	b29b      	uxth	r3, r3
 8002614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800261c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	441a      	add	r2, r3
 800262e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800263a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800263e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002642:	b29b      	uxth	r3, r3
 8002644:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800264c:	2b01      	cmp	r3, #1
 800264e:	f040 8286 	bne.w	8002b5e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800265a:	441a      	add	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	69da      	ldr	r2, [r3, #28]
 8002664:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002668:	441a      	add	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	6a1a      	ldr	r2, [r3, #32]
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	429a      	cmp	r2, r3
 8002678:	d309      	bcc.n	800268e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	6a1a      	ldr	r2, [r3, #32]
 8002684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002686:	1ad2      	subs	r2, r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	621a      	str	r2, [r3, #32]
 800268c:	e015      	b.n	80026ba <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d107      	bne.n	80026a6 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002696:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800269a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026a4:	e009      	b.n	80026ba <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2200      	movs	r2, #0
 80026b8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	785b      	ldrb	r3, [r3, #1]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d155      	bne.n	800276e <HAL_PCD_EP_DB_Transmit+0x35a>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	461a      	mov	r2, r3
 80026d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d6:	4413      	add	r3, r2
 80026d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	011a      	lsls	r2, r3, #4
 80026e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e2:	4413      	add	r3, r2
 80026e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026e8:	637b      	str	r3, [r7, #52]	; 0x34
 80026ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d112      	bne.n	8002716 <HAL_PCD_EP_DB_Transmit+0x302>
 80026f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fe:	801a      	strh	r2, [r3, #0]
 8002700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	b29b      	uxth	r3, r3
 8002706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800270a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800270e:	b29a      	uxth	r2, r3
 8002710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002712:	801a      	strh	r2, [r3, #0]
 8002714:	e047      	b.n	80027a6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002718:	2b3e      	cmp	r3, #62	; 0x3e
 800271a:	d811      	bhi.n	8002740 <HAL_PCD_EP_DB_Transmit+0x32c>
 800271c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800271e:	085b      	lsrs	r3, r3, #1
 8002720:	64bb      	str	r3, [r7, #72]	; 0x48
 8002722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <HAL_PCD_EP_DB_Transmit+0x31e>
 800272c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800272e:	3301      	adds	r3, #1
 8002730:	64bb      	str	r3, [r7, #72]	; 0x48
 8002732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002734:	b29b      	uxth	r3, r3
 8002736:	029b      	lsls	r3, r3, #10
 8002738:	b29a      	uxth	r2, r3
 800273a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273c:	801a      	strh	r2, [r3, #0]
 800273e:	e032      	b.n	80027a6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	64bb      	str	r3, [r7, #72]	; 0x48
 8002746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	2b00      	cmp	r3, #0
 800274e:	d102      	bne.n	8002756 <HAL_PCD_EP_DB_Transmit+0x342>
 8002750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002752:	3b01      	subs	r3, #1
 8002754:	64bb      	str	r3, [r7, #72]	; 0x48
 8002756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002758:	b29b      	uxth	r3, r3
 800275a:	029b      	lsls	r3, r3, #10
 800275c:	b29b      	uxth	r3, r3
 800275e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002766:	b29a      	uxth	r2, r3
 8002768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276a:	801a      	strh	r2, [r3, #0]
 800276c:	e01b      	b.n	80027a6 <HAL_PCD_EP_DB_Transmit+0x392>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	785b      	ldrb	r3, [r3, #1]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d117      	bne.n	80027a6 <HAL_PCD_EP_DB_Transmit+0x392>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	643b      	str	r3, [r7, #64]	; 0x40
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002784:	b29b      	uxth	r3, r3
 8002786:	461a      	mov	r2, r3
 8002788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800278a:	4413      	add	r3, r2
 800278c:	643b      	str	r3, [r7, #64]	; 0x40
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	011a      	lsls	r2, r3, #4
 8002794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002796:	4413      	add	r3, r2
 8002798:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800279c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800279e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027a4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	6959      	ldr	r1, [r3, #20]
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	891a      	ldrh	r2, [r3, #8]
 80027b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	f004 f924 	bl	8006a02 <USB_WritePMA>
 80027ba:	e1d0      	b.n	8002b5e <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4413      	add	r3, r2
 80027d0:	3306      	adds	r3, #6
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	699a      	ldr	r2, [r3, #24]
 80027ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d307      	bcc.n	8002804 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	699a      	ldr	r2, [r3, #24]
 80027f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027fc:	1ad2      	subs	r2, r2, r3
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	619a      	str	r2, [r3, #24]
 8002802:	e002      	b.n	800280a <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2200      	movs	r2, #0
 8002808:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	2b00      	cmp	r3, #0
 8002810:	f040 80c4 	bne.w	800299c <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	785b      	ldrb	r3, [r3, #1]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d126      	bne.n	800286a <HAL_PCD_EP_DB_Transmit+0x456>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800282a:	b29b      	uxth	r3, r3
 800282c:	461a      	mov	r2, r3
 800282e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002830:	4413      	add	r3, r2
 8002832:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	011a      	lsls	r2, r3, #4
 800283a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800283c:	4413      	add	r3, r2
 800283e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002842:	66bb      	str	r3, [r7, #104]	; 0x68
 8002844:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	b29b      	uxth	r3, r3
 800284a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800284e:	b29a      	uxth	r2, r3
 8002850:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002852:	801a      	strh	r2, [r3, #0]
 8002854:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	b29b      	uxth	r3, r3
 800285a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800285e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002862:	b29a      	uxth	r2, r3
 8002864:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002866:	801a      	strh	r2, [r3, #0]
 8002868:	e01a      	b.n	80028a0 <HAL_PCD_EP_DB_Transmit+0x48c>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	785b      	ldrb	r3, [r3, #1]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d116      	bne.n	80028a0 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	677b      	str	r3, [r7, #116]	; 0x74
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002880:	b29b      	uxth	r3, r3
 8002882:	461a      	mov	r2, r3
 8002884:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002886:	4413      	add	r3, r2
 8002888:	677b      	str	r3, [r7, #116]	; 0x74
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	011a      	lsls	r2, r3, #4
 8002890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002892:	4413      	add	r3, r2
 8002894:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002898:	673b      	str	r3, [r7, #112]	; 0x70
 800289a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800289c:	2200      	movs	r2, #0
 800289e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	785b      	ldrb	r3, [r3, #1]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d12f      	bne.n	800290e <HAL_PCD_EP_DB_Transmit+0x4fa>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028be:	b29b      	uxth	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028c6:	4413      	add	r3, r2
 80028c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	011a      	lsls	r2, r3, #4
 80028d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028d6:	4413      	add	r3, r2
 80028d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80028e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028f2:	801a      	strh	r2, [r3, #0]
 80028f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002904:	b29a      	uxth	r2, r3
 8002906:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800290a:	801a      	strh	r2, [r3, #0]
 800290c:	e017      	b.n	800293e <HAL_PCD_EP_DB_Transmit+0x52a>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	785b      	ldrb	r3, [r3, #1]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d113      	bne.n	800293e <HAL_PCD_EP_DB_Transmit+0x52a>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800291e:	b29b      	uxth	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002924:	4413      	add	r3, r2
 8002926:	67bb      	str	r3, [r7, #120]	; 0x78
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	011a      	lsls	r2, r3, #4
 800292e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002930:	4413      	add	r3, r2
 8002932:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002936:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002938:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800293a:	2200      	movs	r2, #0
 800293c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	4619      	mov	r1, r3
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f007 fb28 	bl	8009f9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002950:	2b00      	cmp	r3, #0
 8002952:	f040 8104 	bne.w	8002b5e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	b29b      	uxth	r3, r3
 8002968:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800296c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002970:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	441a      	add	r2, r3
 8002982:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800298a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800298e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002996:	b29b      	uxth	r3, r3
 8002998:	8013      	strh	r3, [r2, #0]
 800299a:	e0e0      	b.n	8002b5e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d121      	bne.n	80029ea <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	461a      	mov	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	441a      	add	r2, r3
 80029d2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80029d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	f040 80b4 	bne.w	8002b5e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029fe:	441a      	add	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	69da      	ldr	r2, [r3, #28]
 8002a08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a0c:	441a      	add	r2, r3
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	6a1a      	ldr	r2, [r3, #32]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d309      	bcc.n	8002a32 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	6a1a      	ldr	r2, [r3, #32]
 8002a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a2a:	1ad2      	subs	r2, r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	621a      	str	r2, [r3, #32]
 8002a30:	e015      	b.n	8002a5e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d107      	bne.n	8002a4a <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002a3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a3e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a48:	e009      	b.n	8002a5e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2200      	movs	r2, #0
 8002a54:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	667b      	str	r3, [r7, #100]	; 0x64
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	785b      	ldrb	r3, [r3, #1]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d155      	bne.n	8002b18 <HAL_PCD_EP_DB_Transmit+0x704>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a80:	4413      	add	r3, r2
 8002a82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	011a      	lsls	r2, r3, #4
 8002a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a92:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d112      	bne.n	8002ac0 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002a9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aa8:	801a      	strh	r2, [r3, #0]
 8002aaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002abc:	801a      	strh	r2, [r3, #0]
 8002abe:	e044      	b.n	8002b4a <HAL_PCD_EP_DB_Transmit+0x736>
 8002ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ac2:	2b3e      	cmp	r3, #62	; 0x3e
 8002ac4:	d811      	bhi.n	8002aea <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ac8:	085b      	lsrs	r3, r3, #1
 8002aca:	657b      	str	r3, [r7, #84]	; 0x54
 8002acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002ad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ad8:	3301      	adds	r3, #1
 8002ada:	657b      	str	r3, [r7, #84]	; 0x54
 8002adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	029b      	lsls	r3, r3, #10
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ae6:	801a      	strh	r2, [r3, #0]
 8002ae8:	e02f      	b.n	8002b4a <HAL_PCD_EP_DB_Transmit+0x736>
 8002aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aec:	095b      	lsrs	r3, r3, #5
 8002aee:	657b      	str	r3, [r7, #84]	; 0x54
 8002af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002af2:	f003 031f 	and.w	r3, r3, #31
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d102      	bne.n	8002b00 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002afc:	3b01      	subs	r3, #1
 8002afe:	657b      	str	r3, [r7, #84]	; 0x54
 8002b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	029b      	lsls	r3, r3, #10
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b14:	801a      	strh	r2, [r3, #0]
 8002b16:	e018      	b.n	8002b4a <HAL_PCD_EP_DB_Transmit+0x736>
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	785b      	ldrb	r3, [r3, #1]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d114      	bne.n	8002b4a <HAL_PCD_EP_DB_Transmit+0x736>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b2e:	4413      	add	r3, r2
 8002b30:	667b      	str	r3, [r7, #100]	; 0x64
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	011a      	lsls	r2, r3, #4
 8002b38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b40:	663b      	str	r3, [r7, #96]	; 0x60
 8002b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b48:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	6959      	ldr	r1, [r3, #20]
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	895a      	ldrh	r2, [r3, #10]
 8002b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	f003 ff52 	bl	8006a02 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b78:	823b      	strh	r3, [r7, #16]
 8002b7a:	8a3b      	ldrh	r3, [r7, #16]
 8002b7c:	f083 0310 	eor.w	r3, r3, #16
 8002b80:	823b      	strh	r3, [r7, #16]
 8002b82:	8a3b      	ldrh	r3, [r7, #16]
 8002b84:	f083 0320 	eor.w	r3, r3, #32
 8002b88:	823b      	strh	r3, [r7, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	441a      	add	r2, r3
 8002b98:	8a3b      	ldrh	r3, [r7, #16]
 8002b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3788      	adds	r7, #136	; 0x88
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	607b      	str	r3, [r7, #4]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	817b      	strh	r3, [r7, #10]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002bca:	897b      	ldrh	r3, [r7, #10]
 8002bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00b      	beq.n	8002bee <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bd6:	897b      	ldrh	r3, [r7, #10]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4413      	add	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	e009      	b.n	8002c02 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bee:	897a      	ldrh	r2, [r7, #10]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	4413      	add	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c02:	893b      	ldrh	r3, [r7, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d107      	bne.n	8002c18 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	80da      	strh	r2, [r3, #6]
 8002c16:	e00b      	b.n	8002c30 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	0c1b      	lsrs	r3, r3, #16
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	371c      	adds	r7, #28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
}
 8002c46:	bf00      	nop
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	420e0020 	.word	0x420e0020

08002c54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e26c      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8087 	beq.w	8002d82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c74:	4b92      	ldr	r3, [pc, #584]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 030c 	and.w	r3, r3, #12
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d00c      	beq.n	8002c9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c80:	4b8f      	ldr	r3, [pc, #572]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 030c 	and.w	r3, r3, #12
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d112      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x5e>
 8002c8c:	4b8c      	ldr	r3, [pc, #560]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c98:	d10b      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9a:	4b89      	ldr	r3, [pc, #548]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d06c      	beq.n	8002d80 <HAL_RCC_OscConfig+0x12c>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d168      	bne.n	8002d80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e246      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cba:	d106      	bne.n	8002cca <HAL_RCC_OscConfig+0x76>
 8002cbc:	4b80      	ldr	r3, [pc, #512]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a7f      	ldr	r2, [pc, #508]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	e02e      	b.n	8002d28 <HAL_RCC_OscConfig+0xd4>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10c      	bne.n	8002cec <HAL_RCC_OscConfig+0x98>
 8002cd2:	4b7b      	ldr	r3, [pc, #492]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a7a      	ldr	r2, [pc, #488]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	4b78      	ldr	r3, [pc, #480]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a77      	ldr	r2, [pc, #476]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	e01d      	b.n	8002d28 <HAL_RCC_OscConfig+0xd4>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cf4:	d10c      	bne.n	8002d10 <HAL_RCC_OscConfig+0xbc>
 8002cf6:	4b72      	ldr	r3, [pc, #456]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a71      	ldr	r2, [pc, #452]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	4b6f      	ldr	r3, [pc, #444]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a6e      	ldr	r2, [pc, #440]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	e00b      	b.n	8002d28 <HAL_RCC_OscConfig+0xd4>
 8002d10:	4b6b      	ldr	r3, [pc, #428]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a6a      	ldr	r2, [pc, #424]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	4b68      	ldr	r3, [pc, #416]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a67      	ldr	r2, [pc, #412]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d013      	beq.n	8002d58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d30:	f7fd fdcc 	bl	80008cc <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d38:	f7fd fdc8 	bl	80008cc <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b64      	cmp	r3, #100	; 0x64
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e1fa      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	4b5d      	ldr	r3, [pc, #372]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f0      	beq.n	8002d38 <HAL_RCC_OscConfig+0xe4>
 8002d56:	e014      	b.n	8002d82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d58:	f7fd fdb8 	bl	80008cc <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d60:	f7fd fdb4 	bl	80008cc <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	; 0x64
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e1e6      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d72:	4b53      	ldr	r3, [pc, #332]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x10c>
 8002d7e:	e000      	b.n	8002d82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d063      	beq.n	8002e56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d8e:	4b4c      	ldr	r3, [pc, #304]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00b      	beq.n	8002db2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d9a:	4b49      	ldr	r3, [pc, #292]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d11c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x18c>
 8002da6:	4b46      	ldr	r3, [pc, #280]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d116      	bne.n	8002de0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002db2:	4b43      	ldr	r3, [pc, #268]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d005      	beq.n	8002dca <HAL_RCC_OscConfig+0x176>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d001      	beq.n	8002dca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e1ba      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dca:	4b3d      	ldr	r3, [pc, #244]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4939      	ldr	r1, [pc, #228]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dde:	e03a      	b.n	8002e56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d020      	beq.n	8002e2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de8:	4b36      	ldr	r3, [pc, #216]	; (8002ec4 <HAL_RCC_OscConfig+0x270>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dee:	f7fd fd6d 	bl	80008cc <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002df6:	f7fd fd69 	bl	80008cc <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e19b      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e08:	4b2d      	ldr	r3, [pc, #180]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e14:	4b2a      	ldr	r3, [pc, #168]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	4927      	ldr	r1, [pc, #156]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	600b      	str	r3, [r1, #0]
 8002e28:	e015      	b.n	8002e56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e2a:	4b26      	ldr	r3, [pc, #152]	; (8002ec4 <HAL_RCC_OscConfig+0x270>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7fd fd4c 	bl	80008cc <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e38:	f7fd fd48 	bl	80008cc <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e17a      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d03a      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d019      	beq.n	8002e9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e6a:	4b17      	ldr	r3, [pc, #92]	; (8002ec8 <HAL_RCC_OscConfig+0x274>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e70:	f7fd fd2c 	bl	80008cc <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e78:	f7fd fd28 	bl	80008cc <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e15a      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e96:	2001      	movs	r0, #1
 8002e98:	f000 fad8 	bl	800344c <RCC_Delay>
 8002e9c:	e01c      	b.n	8002ed8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <HAL_RCC_OscConfig+0x274>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea4:	f7fd fd12 	bl	80008cc <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eaa:	e00f      	b.n	8002ecc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eac:	f7fd fd0e 	bl	80008cc <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d908      	bls.n	8002ecc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e140      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	42420000 	.word	0x42420000
 8002ec8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ecc:	4b9e      	ldr	r3, [pc, #632]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1e9      	bne.n	8002eac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 80a6 	beq.w	8003032 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eea:	4b97      	ldr	r3, [pc, #604]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10d      	bne.n	8002f12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef6:	4b94      	ldr	r3, [pc, #592]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	4a93      	ldr	r2, [pc, #588]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f00:	61d3      	str	r3, [r2, #28]
 8002f02:	4b91      	ldr	r3, [pc, #580]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	60bb      	str	r3, [r7, #8]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f12:	4b8e      	ldr	r3, [pc, #568]	; (800314c <HAL_RCC_OscConfig+0x4f8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d118      	bne.n	8002f50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f1e:	4b8b      	ldr	r3, [pc, #556]	; (800314c <HAL_RCC_OscConfig+0x4f8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a8a      	ldr	r2, [pc, #552]	; (800314c <HAL_RCC_OscConfig+0x4f8>)
 8002f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f2a:	f7fd fccf 	bl	80008cc <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f32:	f7fd fccb 	bl	80008cc <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b64      	cmp	r3, #100	; 0x64
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e0fd      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f44:	4b81      	ldr	r3, [pc, #516]	; (800314c <HAL_RCC_OscConfig+0x4f8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0f0      	beq.n	8002f32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d106      	bne.n	8002f66 <HAL_RCC_OscConfig+0x312>
 8002f58:	4b7b      	ldr	r3, [pc, #492]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	4a7a      	ldr	r2, [pc, #488]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f5e:	f043 0301 	orr.w	r3, r3, #1
 8002f62:	6213      	str	r3, [r2, #32]
 8002f64:	e02d      	b.n	8002fc2 <HAL_RCC_OscConfig+0x36e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10c      	bne.n	8002f88 <HAL_RCC_OscConfig+0x334>
 8002f6e:	4b76      	ldr	r3, [pc, #472]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	4a75      	ldr	r2, [pc, #468]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f74:	f023 0301 	bic.w	r3, r3, #1
 8002f78:	6213      	str	r3, [r2, #32]
 8002f7a:	4b73      	ldr	r3, [pc, #460]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	4a72      	ldr	r2, [pc, #456]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f80:	f023 0304 	bic.w	r3, r3, #4
 8002f84:	6213      	str	r3, [r2, #32]
 8002f86:	e01c      	b.n	8002fc2 <HAL_RCC_OscConfig+0x36e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	2b05      	cmp	r3, #5
 8002f8e:	d10c      	bne.n	8002faa <HAL_RCC_OscConfig+0x356>
 8002f90:	4b6d      	ldr	r3, [pc, #436]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	4a6c      	ldr	r2, [pc, #432]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f96:	f043 0304 	orr.w	r3, r3, #4
 8002f9a:	6213      	str	r3, [r2, #32]
 8002f9c:	4b6a      	ldr	r3, [pc, #424]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	4a69      	ldr	r2, [pc, #420]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	6213      	str	r3, [r2, #32]
 8002fa8:	e00b      	b.n	8002fc2 <HAL_RCC_OscConfig+0x36e>
 8002faa:	4b67      	ldr	r3, [pc, #412]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	4a66      	ldr	r2, [pc, #408]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002fb0:	f023 0301 	bic.w	r3, r3, #1
 8002fb4:	6213      	str	r3, [r2, #32]
 8002fb6:	4b64      	ldr	r3, [pc, #400]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	4a63      	ldr	r2, [pc, #396]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002fbc:	f023 0304 	bic.w	r3, r3, #4
 8002fc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d015      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fca:	f7fd fc7f 	bl	80008cc <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd0:	e00a      	b.n	8002fe8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd2:	f7fd fc7b 	bl	80008cc <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e0ab      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe8:	4b57      	ldr	r3, [pc, #348]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0ee      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x37e>
 8002ff4:	e014      	b.n	8003020 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff6:	f7fd fc69 	bl	80008cc <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ffc:	e00a      	b.n	8003014 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffe:	f7fd fc65 	bl	80008cc <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	f241 3288 	movw	r2, #5000	; 0x1388
 800300c:	4293      	cmp	r3, r2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e095      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003014:	4b4c      	ldr	r3, [pc, #304]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1ee      	bne.n	8002ffe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003020:	7dfb      	ldrb	r3, [r7, #23]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d105      	bne.n	8003032 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003026:	4b48      	ldr	r3, [pc, #288]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	4a47      	ldr	r2, [pc, #284]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 800302c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003030:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 8081 	beq.w	800313e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800303c:	4b42      	ldr	r3, [pc, #264]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 030c 	and.w	r3, r3, #12
 8003044:	2b08      	cmp	r3, #8
 8003046:	d061      	beq.n	800310c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d146      	bne.n	80030de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003050:	4b3f      	ldr	r3, [pc, #252]	; (8003150 <HAL_RCC_OscConfig+0x4fc>)
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003056:	f7fd fc39 	bl	80008cc <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305e:	f7fd fc35 	bl	80008cc <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e067      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003070:	4b35      	ldr	r3, [pc, #212]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f0      	bne.n	800305e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003084:	d108      	bne.n	8003098 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003086:	4b30      	ldr	r3, [pc, #192]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	492d      	ldr	r1, [pc, #180]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8003094:	4313      	orrs	r3, r2
 8003096:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003098:	4b2b      	ldr	r3, [pc, #172]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a19      	ldr	r1, [r3, #32]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	430b      	orrs	r3, r1
 80030aa:	4927      	ldr	r1, [pc, #156]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b0:	4b27      	ldr	r3, [pc, #156]	; (8003150 <HAL_RCC_OscConfig+0x4fc>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b6:	f7fd fc09 	bl	80008cc <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030be:	f7fd fc05 	bl	80008cc <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e037      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030d0:	4b1d      	ldr	r3, [pc, #116]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0f0      	beq.n	80030be <HAL_RCC_OscConfig+0x46a>
 80030dc:	e02f      	b.n	800313e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030de:	4b1c      	ldr	r3, [pc, #112]	; (8003150 <HAL_RCC_OscConfig+0x4fc>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e4:	f7fd fbf2 	bl	80008cc <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ec:	f7fd fbee 	bl	80008cc <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e020      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030fe:	4b12      	ldr	r3, [pc, #72]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x498>
 800310a:	e018      	b.n	800313e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d101      	bne.n	8003118 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e013      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	429a      	cmp	r2, r3
 800312a:	d106      	bne.n	800313a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003136:	429a      	cmp	r2, r3
 8003138:	d001      	beq.n	800313e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40021000 	.word	0x40021000
 800314c:	40007000 	.word	0x40007000
 8003150:	42420060 	.word	0x42420060

08003154 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0d0      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003168:	4b6a      	ldr	r3, [pc, #424]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d910      	bls.n	8003198 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003176:	4b67      	ldr	r3, [pc, #412]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 0207 	bic.w	r2, r3, #7
 800317e:	4965      	ldr	r1, [pc, #404]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	4313      	orrs	r3, r2
 8003184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003186:	4b63      	ldr	r3, [pc, #396]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d001      	beq.n	8003198 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0b8      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d020      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031b0:	4b59      	ldr	r3, [pc, #356]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	4a58      	ldr	r2, [pc, #352]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031c8:	4b53      	ldr	r3, [pc, #332]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	4a52      	ldr	r2, [pc, #328]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d4:	4b50      	ldr	r3, [pc, #320]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	494d      	ldr	r1, [pc, #308]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d040      	beq.n	8003274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d107      	bne.n	800320a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fa:	4b47      	ldr	r3, [pc, #284]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d115      	bne.n	8003232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e07f      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b02      	cmp	r3, #2
 8003210:	d107      	bne.n	8003222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003212:	4b41      	ldr	r3, [pc, #260]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d109      	bne.n	8003232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e073      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003222:	4b3d      	ldr	r3, [pc, #244]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e06b      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003232:	4b39      	ldr	r3, [pc, #228]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f023 0203 	bic.w	r2, r3, #3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	4936      	ldr	r1, [pc, #216]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 8003240:	4313      	orrs	r3, r2
 8003242:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003244:	f7fd fb42 	bl	80008cc <HAL_GetTick>
 8003248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324a:	e00a      	b.n	8003262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800324c:	f7fd fb3e 	bl	80008cc <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	f241 3288 	movw	r2, #5000	; 0x1388
 800325a:	4293      	cmp	r3, r2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e053      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003262:	4b2d      	ldr	r3, [pc, #180]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 020c 	and.w	r2, r3, #12
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	429a      	cmp	r2, r3
 8003272:	d1eb      	bne.n	800324c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003274:	4b27      	ldr	r3, [pc, #156]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d210      	bcs.n	80032a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003282:	4b24      	ldr	r3, [pc, #144]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 0207 	bic.w	r2, r3, #7
 800328a:	4922      	ldr	r1, [pc, #136]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003292:	4b20      	ldr	r3, [pc, #128]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e032      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b0:	4b19      	ldr	r3, [pc, #100]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	4916      	ldr	r1, [pc, #88]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d009      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032ce:	4b12      	ldr	r3, [pc, #72]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	490e      	ldr	r1, [pc, #56]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032e2:	f000 f821 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 80032e6:	4602      	mov	r2, r0
 80032e8:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	490a      	ldr	r1, [pc, #40]	; (800331c <HAL_RCC_ClockConfig+0x1c8>)
 80032f4:	5ccb      	ldrb	r3, [r1, r3]
 80032f6:	fa22 f303 	lsr.w	r3, r2, r3
 80032fa:	4a09      	ldr	r2, [pc, #36]	; (8003320 <HAL_RCC_ClockConfig+0x1cc>)
 80032fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032fe:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_RCC_ClockConfig+0x1d0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7fd faa0 	bl	8000848 <HAL_InitTick>

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40022000 	.word	0x40022000
 8003318:	40021000 	.word	0x40021000
 800331c:	0800a548 	.word	0x0800a548
 8003320:	20000000 	.word	0x20000000
 8003324:	20000004 	.word	0x20000004

08003328 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003328:	b490      	push	{r4, r7}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800332e:	4b2a      	ldr	r3, [pc, #168]	; (80033d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003330:	1d3c      	adds	r4, r7, #4
 8003332:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003334:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003338:	f240 2301 	movw	r3, #513	; 0x201
 800333c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	61fb      	str	r3, [r7, #28]
 8003342:	2300      	movs	r3, #0
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	2300      	movs	r3, #0
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003352:	4b22      	ldr	r3, [pc, #136]	; (80033dc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 030c 	and.w	r3, r3, #12
 800335e:	2b04      	cmp	r3, #4
 8003360:	d002      	beq.n	8003368 <HAL_RCC_GetSysClockFreq+0x40>
 8003362:	2b08      	cmp	r3, #8
 8003364:	d003      	beq.n	800336e <HAL_RCC_GetSysClockFreq+0x46>
 8003366:	e02d      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003368:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800336a:	623b      	str	r3, [r7, #32]
      break;
 800336c:	e02d      	b.n	80033ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	0c9b      	lsrs	r3, r3, #18
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800337a:	4413      	add	r3, r2
 800337c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003380:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d013      	beq.n	80033b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800338c:	4b13      	ldr	r3, [pc, #76]	; (80033dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	0c5b      	lsrs	r3, r3, #17
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800339a:	4413      	add	r3, r2
 800339c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80033a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	4a0e      	ldr	r2, [pc, #56]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033a6:	fb02 f203 	mul.w	r2, r2, r3
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
 80033b2:	e004      	b.n	80033be <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	4a0b      	ldr	r2, [pc, #44]	; (80033e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033b8:	fb02 f303 	mul.w	r3, r2, r3
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	623b      	str	r3, [r7, #32]
      break;
 80033c2:	e002      	b.n	80033ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033c4:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033c6:	623b      	str	r3, [r7, #32]
      break;
 80033c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ca:	6a3b      	ldr	r3, [r7, #32]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3728      	adds	r7, #40	; 0x28
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc90      	pop	{r4, r7}
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	0800a4e4 	.word	0x0800a4e4
 80033dc:	40021000 	.word	0x40021000
 80033e0:	007a1200 	.word	0x007a1200
 80033e4:	003d0900 	.word	0x003d0900

080033e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ec:	4b02      	ldr	r3, [pc, #8]	; (80033f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80033ee:	681b      	ldr	r3, [r3, #0]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr
 80033f8:	20000000 	.word	0x20000000

080033fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003400:	f7ff fff2 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 8003404:	4602      	mov	r2, r0
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	0a1b      	lsrs	r3, r3, #8
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	4903      	ldr	r1, [pc, #12]	; (8003420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003412:	5ccb      	ldrb	r3, [r1, r3]
 8003414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003418:	4618      	mov	r0, r3
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40021000 	.word	0x40021000
 8003420:	0800a558 	.word	0x0800a558

08003424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003428:	f7ff ffde 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 800342c:	4602      	mov	r2, r0
 800342e:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	0adb      	lsrs	r3, r3, #11
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	4903      	ldr	r1, [pc, #12]	; (8003448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800343a:	5ccb      	ldrb	r3, [r1, r3]
 800343c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003440:	4618      	mov	r0, r3
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40021000 	.word	0x40021000
 8003448:	0800a558 	.word	0x0800a558

0800344c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003454:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <RCC_Delay+0x34>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a0a      	ldr	r2, [pc, #40]	; (8003484 <RCC_Delay+0x38>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	0a5b      	lsrs	r3, r3, #9
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	fb02 f303 	mul.w	r3, r2, r3
 8003466:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003468:	bf00      	nop
  }
  while (Delay --);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	1e5a      	subs	r2, r3, #1
 800346e:	60fa      	str	r2, [r7, #12]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1f9      	bne.n	8003468 <RCC_Delay+0x1c>
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr
 8003480:	20000000 	.word	0x20000000
 8003484:	10624dd3 	.word	0x10624dd3

08003488 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	2300      	movs	r3, #0
 8003496:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d07d      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80034a4:	2300      	movs	r3, #0
 80034a6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034a8:	4b4f      	ldr	r3, [pc, #316]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10d      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b4:	4b4c      	ldr	r3, [pc, #304]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	4a4b      	ldr	r2, [pc, #300]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034be:	61d3      	str	r3, [r2, #28]
 80034c0:	4b49      	ldr	r3, [pc, #292]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034cc:	2301      	movs	r3, #1
 80034ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d0:	4b46      	ldr	r3, [pc, #280]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d118      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034dc:	4b43      	ldr	r3, [pc, #268]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a42      	ldr	r2, [pc, #264]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e8:	f7fd f9f0 	bl	80008cc <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ee:	e008      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f0:	f7fd f9ec 	bl	80008cc <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b64      	cmp	r3, #100	; 0x64
 80034fc:	d901      	bls.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e06d      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003502:	4b3a      	ldr	r3, [pc, #232]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800350e:	4b36      	ldr	r3, [pc, #216]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003516:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d02e      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	429a      	cmp	r2, r3
 800352a:	d027      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800352c:	4b2e      	ldr	r3, [pc, #184]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003534:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003536:	4b2e      	ldr	r3, [pc, #184]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003538:	2201      	movs	r2, #1
 800353a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800353c:	4b2c      	ldr	r3, [pc, #176]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003542:	4a29      	ldr	r2, [pc, #164]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d014      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003552:	f7fd f9bb 	bl	80008cc <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003558:	e00a      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355a:	f7fd f9b7 	bl	80008cc <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f241 3288 	movw	r2, #5000	; 0x1388
 8003568:	4293      	cmp	r3, r2
 800356a:	d901      	bls.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e036      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003570:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0ee      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800357c:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	4917      	ldr	r1, [pc, #92]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800358a:	4313      	orrs	r3, r2
 800358c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800358e:	7dfb      	ldrb	r3, [r7, #23]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d105      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003594:	4b14      	ldr	r3, [pc, #80]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	4a13      	ldr	r2, [pc, #76]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800359e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d008      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035ac:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	490b      	ldr	r1, [pc, #44]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0310 	and.w	r3, r3, #16
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d008      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035ca:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	4904      	ldr	r1, [pc, #16]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40021000 	.word	0x40021000
 80035ec:	40007000 	.word	0x40007000
 80035f0:	42420440 	.word	0x42420440

080035f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80035f4:	b590      	push	{r4, r7, lr}
 80035f6:	b08d      	sub	sp, #52	; 0x34
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035fc:	4b5a      	ldr	r3, [pc, #360]	; (8003768 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80035fe:	f107 040c 	add.w	r4, r7, #12
 8003602:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003604:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003608:	f240 2301 	movw	r3, #513	; 0x201
 800360c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
 8003612:	2300      	movs	r3, #0
 8003614:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003616:	2300      	movs	r3, #0
 8003618:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800361a:	2300      	movs	r3, #0
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	2300      	movs	r3, #0
 8003620:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b10      	cmp	r3, #16
 8003626:	d00a      	beq.n	800363e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b10      	cmp	r3, #16
 800362c:	f200 8091 	bhi.w	8003752 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d04c      	beq.n	80036d0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b02      	cmp	r3, #2
 800363a:	d07c      	beq.n	8003736 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800363c:	e089      	b.n	8003752 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 800363e:	4b4b      	ldr	r3, [pc, #300]	; (800376c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003644:	4b49      	ldr	r3, [pc, #292]	; (800376c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 8082 	beq.w	8003756 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	0c9b      	lsrs	r3, r3, #18
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800365e:	4413      	add	r3, r2
 8003660:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003664:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d018      	beq.n	80036a2 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003670:	4b3e      	ldr	r3, [pc, #248]	; (800376c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	0c5b      	lsrs	r3, r3, #17
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800367e:	4413      	add	r3, r2
 8003680:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00d      	beq.n	80036ac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003690:	4a37      	ldr	r2, [pc, #220]	; (8003770 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	fbb2 f2f3 	udiv	r2, r2, r3
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	fb02 f303 	mul.w	r3, r2, r3
 800369e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036a0:	e004      	b.n	80036ac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	4a33      	ldr	r2, [pc, #204]	; (8003774 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
 80036aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80036ac:	4b2f      	ldr	r3, [pc, #188]	; (800376c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036b8:	d102      	bne.n	80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80036ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036bc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80036be:	e04a      	b.n	8003756 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80036c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	4a2c      	ldr	r2, [pc, #176]	; (8003778 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80036c6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ca:	085b      	lsrs	r3, r3, #1
 80036cc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80036ce:	e042      	b.n	8003756 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 80036d0:	4b26      	ldr	r3, [pc, #152]	; (800376c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036e0:	d108      	bne.n	80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 80036ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036f2:	e01f      	b.n	8003734 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036fe:	d109      	bne.n	8003714 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003700:	4b1a      	ldr	r3, [pc, #104]	; (800376c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 800370c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003710:	62bb      	str	r3, [r7, #40]	; 0x28
 8003712:	e00f      	b.n	8003734 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800371e:	d11c      	bne.n	800375a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003720:	4b12      	ldr	r3, [pc, #72]	; (800376c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d016      	beq.n	800375a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 800372c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003730:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003732:	e012      	b.n	800375a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003734:	e011      	b.n	800375a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003736:	f7ff fe75 	bl	8003424 <HAL_RCC_GetPCLK2Freq>
 800373a:	4602      	mov	r2, r0
 800373c:	4b0b      	ldr	r3, [pc, #44]	; (800376c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	0b9b      	lsrs	r3, r3, #14
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	3301      	adds	r3, #1
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	fbb2 f3f3 	udiv	r3, r2, r3
 800374e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003750:	e004      	b.n	800375c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003752:	bf00      	nop
 8003754:	e002      	b.n	800375c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003756:	bf00      	nop
 8003758:	e000      	b.n	800375c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800375a:	bf00      	nop
    }
  }
  return (frequency);
 800375c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800375e:	4618      	mov	r0, r3
 8003760:	3734      	adds	r7, #52	; 0x34
 8003762:	46bd      	mov	sp, r7
 8003764:	bd90      	pop	{r4, r7, pc}
 8003766:	bf00      	nop
 8003768:	0800a4f4 	.word	0x0800a4f4
 800376c:	40021000 	.word	0x40021000
 8003770:	007a1200 	.word	0x007a1200
 8003774:	003d0900 	.word	0x003d0900
 8003778:	aaaaaaab 	.word	0xaaaaaaab

0800377c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e084      	b.n	800389c <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	7c5b      	ldrb	r3, [r3, #17]
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d105      	bne.n	80037a8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fc ff22 	bl	80005ec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f9c8 	bl	8003b44 <HAL_RTC_WaitForSynchro>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d004      	beq.n	80037c4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2204      	movs	r2, #4
 80037be:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e06b      	b.n	800389c <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 fa81 	bl	8003ccc <RTC_EnterInitMode>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d004      	beq.n	80037da <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2204      	movs	r2, #4
 80037d4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e060      	b.n	800389c <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0207 	bic.w	r2, r2, #7
 80037e8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d005      	beq.n	80037fe <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80037f2:	4b2c      	ldr	r3, [pc, #176]	; (80038a4 <HAL_RTC_Init+0x128>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	4a2b      	ldr	r2, [pc, #172]	; (80038a4 <HAL_RTC_Init+0x128>)
 80037f8:	f023 0301 	bic.w	r3, r3, #1
 80037fc:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80037fe:	4b29      	ldr	r3, [pc, #164]	; (80038a4 <HAL_RTC_Init+0x128>)
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	4926      	ldr	r1, [pc, #152]	; (80038a4 <HAL_RTC_Init+0x128>)
 800380c:	4313      	orrs	r3, r2
 800380e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003818:	d003      	beq.n	8003822 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	e00e      	b.n	8003840 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003822:	2001      	movs	r0, #1
 8003824:	f7ff fee6 	bl	80035f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003828:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d104      	bne.n	800383a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2204      	movs	r2, #4
 8003834:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e030      	b.n	800389c <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	3b01      	subs	r3, #1
 800383e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f023 010f 	bic.w	r1, r3, #15
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	0c1a      	lsrs	r2, r3, #16
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	0c1b      	lsrs	r3, r3, #16
 800385e:	041b      	lsls	r3, r3, #16
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	b291      	uxth	r1, r2
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	430b      	orrs	r3, r1
 800386a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fa55 	bl	8003d1c <RTC_ExitInitMode>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d004      	beq.n	8003882 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2204      	movs	r2, #4
 800387c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e00c      	b.n	800389c <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800389a:	2300      	movs	r3, #0
  }
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40006c00 	.word	0x40006c00

080038a8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80038a8:	b590      	push	{r4, r7, lr}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	2300      	movs	r3, #0
 80038ba:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <HAL_RTC_SetTime+0x20>
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e080      	b.n	80039ce <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	7c1b      	ldrb	r3, [r3, #16]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_RTC_SetTime+0x30>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e07a      	b.n	80039ce <HAL_RTC_SetTime+0x126>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2201      	movs	r2, #1
 80038dc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2202      	movs	r2, #2
 80038e2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d113      	bne.n	8003912 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80038f4:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	785b      	ldrb	r3, [r3, #1]
 80038fc:	4619      	mov	r1, r3
 80038fe:	460b      	mov	r3, r1
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	1a5b      	subs	r3, r3, r1
 8003904:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003906:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800390c:	4413      	add	r3, r2
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	e01e      	b.n	8003950 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f000 fa28 	bl	8003d6c <RTC_Bcd2ToByte>
 800391c:	4603      	mov	r3, r0
 800391e:	461a      	mov	r2, r3
 8003920:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003924:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	785b      	ldrb	r3, [r3, #1]
 800392c:	4618      	mov	r0, r3
 800392e:	f000 fa1d 	bl	8003d6c <RTC_Bcd2ToByte>
 8003932:	4603      	mov	r3, r0
 8003934:	461a      	mov	r2, r3
 8003936:	4613      	mov	r3, r2
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800393e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	789b      	ldrb	r3, [r3, #2]
 8003944:	4618      	mov	r0, r3
 8003946:	f000 fa11 	bl	8003d6c <RTC_Bcd2ToByte>
 800394a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800394c:	4423      	add	r3, r4
 800394e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003950:	6979      	ldr	r1, [r7, #20]
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f953 	bl	8003bfe <RTC_WriteTimeCounter>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d007      	beq.n	800396e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2204      	movs	r2, #4
 8003962:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e02f      	b.n	80039ce <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0205 	bic.w	r2, r2, #5
 800397c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f964 	bl	8003c4c <RTC_ReadAlarmCounter>
 8003984:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398c:	d018      	beq.n	80039c0 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	429a      	cmp	r2, r3
 8003994:	d214      	bcs.n	80039c0 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800399c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80039a0:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80039a2:	6939      	ldr	r1, [r7, #16]
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 f96a 	bl	8003c7e <RTC_WriteAlarmCounter>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d007      	beq.n	80039c0 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2204      	movs	r2, #4
 80039b4:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e006      	b.n	80039ce <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2201      	movs	r2, #1
 80039c4:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80039cc:	2300      	movs	r3, #0
  }
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	371c      	adds	r7, #28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd90      	pop	{r4, r7, pc}
	...

080039d8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b088      	sub	sp, #32
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	2300      	movs	r3, #0
 80039ea:	61bb      	str	r3, [r7, #24]
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <HAL_RTC_SetDate+0x24>
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e097      	b.n	8003b30 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	7c1b      	ldrb	r3, [r3, #16]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_RTC_SetDate+0x34>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e091      	b.n	8003b30 <HAL_RTC_SetDate+0x158>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2202      	movs	r2, #2
 8003a16:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10c      	bne.n	8003a38 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	78da      	ldrb	r2, [r3, #3]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	785a      	ldrb	r2, [r3, #1]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	789a      	ldrb	r2, [r3, #2]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	739a      	strb	r2, [r3, #14]
 8003a36:	e01a      	b.n	8003a6e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	78db      	ldrb	r3, [r3, #3]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 f995 	bl	8003d6c <RTC_Bcd2ToByte>
 8003a42:	4603      	mov	r3, r0
 8003a44:	461a      	mov	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	785b      	ldrb	r3, [r3, #1]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 f98c 	bl	8003d6c <RTC_Bcd2ToByte>
 8003a54:	4603      	mov	r3, r0
 8003a56:	461a      	mov	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	789b      	ldrb	r3, [r3, #2]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 f983 	bl	8003d6c <RTC_Bcd2ToByte>
 8003a66:	4603      	mov	r3, r0
 8003a68:	461a      	mov	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	7bdb      	ldrb	r3, [r3, #15]
 8003a72:	4618      	mov	r0, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	7b59      	ldrb	r1, [r3, #13]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	7b9b      	ldrb	r3, [r3, #14]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f000 f993 	bl	8003da8 <RTC_WeekDayNum>
 8003a82:	4603      	mov	r3, r0
 8003a84:	461a      	mov	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	7b1a      	ldrb	r2, [r3, #12]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 f883 	bl	8003b9e <RTC_ReadTimeCounter>
 8003a98:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	4a26      	ldr	r2, [pc, #152]	; (8003b38 <HAL_RTC_SetDate+0x160>)
 8003a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa2:	0adb      	lsrs	r3, r3, #11
 8003aa4:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b18      	cmp	r3, #24
 8003aaa:	d93a      	bls.n	8003b22 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	4a23      	ldr	r2, [pc, #140]	; (8003b3c <HAL_RTC_SetDate+0x164>)
 8003ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	4a22      	ldr	r2, [pc, #136]	; (8003b40 <HAL_RTC_SetDate+0x168>)
 8003ab8:	fb02 f303 	mul.w	r3, r2, r3
 8003abc:	69fa      	ldr	r2, [r7, #28]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003ac2:	69f9      	ldr	r1, [r7, #28]
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 f89a 	bl	8003bfe <RTC_WriteTimeCounter>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d007      	beq.n	8003ae0 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2204      	movs	r2, #4
 8003ad4:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e027      	b.n	8003b30 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f8b3 	bl	8003c4c <RTC_ReadAlarmCounter>
 8003ae6:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aee:	d018      	beq.n	8003b22 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d214      	bcs.n	8003b22 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003afe:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003b02:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003b04:	69b9      	ldr	r1, [r7, #24]
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 f8b9 	bl	8003c7e <RTC_WriteAlarmCounter>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d007      	beq.n	8003b22 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2204      	movs	r2, #4
 8003b16:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e006      	b.n	8003b30 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2201      	movs	r2, #1
 8003b26:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3720      	adds	r7, #32
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	91a2b3c5 	.word	0x91a2b3c5
 8003b3c:	aaaaaaab 	.word	0xaaaaaaab
 8003b40:	00015180 	.word	0x00015180

08003b44 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e01d      	b.n	8003b96 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0208 	bic.w	r2, r2, #8
 8003b68:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003b6a:	f7fc feaf 	bl	80008cc <HAL_GetTick>
 8003b6e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003b70:	e009      	b.n	8003b86 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003b72:	f7fc feab 	bl	80008cc <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b80:	d901      	bls.n	8003b86 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e007      	b.n	8003b96 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d0ee      	beq.n	8003b72 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b087      	sub	sp, #28
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	827b      	strh	r3, [r7, #18]
 8003baa:	2300      	movs	r3, #0
 8003bac:	823b      	strh	r3, [r7, #16]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003bce:	8a7a      	ldrh	r2, [r7, #18]
 8003bd0:	8a3b      	ldrh	r3, [r7, #16]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d008      	beq.n	8003be8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003bd6:	8a3b      	ldrh	r3, [r7, #16]
 8003bd8:	041a      	lsls	r2, r3, #16
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	4313      	orrs	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	e004      	b.n	8003bf2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003be8:	8a7b      	ldrh	r3, [r7, #18]
 8003bea:	041a      	lsls	r2, r3, #16
 8003bec:	89fb      	ldrh	r3, [r7, #14]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003bf2:	697b      	ldr	r3, [r7, #20]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	371c      	adds	r7, #28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr

08003bfe <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f85d 	bl	8003ccc <RTC_EnterInitMode>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	73fb      	strb	r3, [r7, #15]
 8003c1c:	e011      	b.n	8003c42 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	0c12      	lsrs	r2, r2, #16
 8003c26:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	b292      	uxth	r2, r2
 8003c30:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f872 	bl	8003d1c <RTC_ExitInitMode>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	81fb      	strh	r3, [r7, #14]
 8003c58:	2300      	movs	r3, #0
 8003c5a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003c6c:	89fb      	ldrh	r3, [r7, #14]
 8003c6e:	041a      	lsls	r2, r3, #16
 8003c70:	89bb      	ldrh	r3, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr

08003c7e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f81d 	bl	8003ccc <RTC_EnterInitMode>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	73fb      	strb	r3, [r7, #15]
 8003c9c:	e011      	b.n	8003cc2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	0c12      	lsrs	r2, r2, #16
 8003ca6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	b292      	uxth	r2, r2
 8003cb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f832 	bl	8003d1c <RTC_ExitInitMode>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003cd8:	f7fc fdf8 	bl	80008cc <HAL_GetTick>
 8003cdc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003cde:	e009      	b.n	8003cf4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003ce0:	f7fc fdf4 	bl	80008cc <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cee:	d901      	bls.n	8003cf4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e00f      	b.n	8003d14 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0ee      	beq.n	8003ce0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 0210 	orr.w	r2, r2, #16
 8003d10:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0210 	bic.w	r2, r2, #16
 8003d36:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003d38:	f7fc fdc8 	bl	80008cc <HAL_GetTick>
 8003d3c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003d3e:	e009      	b.n	8003d54 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003d40:	f7fc fdc4 	bl	80008cc <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d4e:	d901      	bls.n	8003d54 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e007      	b.n	8003d64 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0ee      	beq.n	8003d40 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003d76:	2300      	movs	r3, #0
 8003d78:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003d7a:	79fb      	ldrb	r3, [r7, #7]
 8003d7c:	091b      	lsrs	r3, r3, #4
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	461a      	mov	r2, r3
 8003d82:	4613      	mov	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003d8c:	79fb      	ldrb	r3, [r7, #7]
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	4413      	add	r3, r2
 8003d9a:	b2db      	uxtb	r3, r3
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr
	...

08003da8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	70fb      	strb	r3, [r7, #3]
 8003db4:	4613      	mov	r3, r2
 8003db6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003dc6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003dc8:	78fb      	ldrb	r3, [r7, #3]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d82d      	bhi.n	8003e2a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003dce:	78fa      	ldrb	r2, [r7, #3]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	4413      	add	r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	1a9b      	subs	r3, r3, r2
 8003dda:	4a2c      	ldr	r2, [pc, #176]	; (8003e8c <RTC_WeekDayNum+0xe4>)
 8003ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8003de0:	085a      	lsrs	r2, r3, #1
 8003de2:	78bb      	ldrb	r3, [r7, #2]
 8003de4:	441a      	add	r2, r3
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	441a      	add	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	089b      	lsrs	r3, r3, #2
 8003df0:	441a      	add	r2, r3
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	4926      	ldr	r1, [pc, #152]	; (8003e90 <RTC_WeekDayNum+0xe8>)
 8003df8:	fba1 1303 	umull	r1, r3, r1, r3
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	1ad2      	subs	r2, r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	4922      	ldr	r1, [pc, #136]	; (8003e90 <RTC_WeekDayNum+0xe8>)
 8003e06:	fba1 1303 	umull	r1, r3, r1, r3
 8003e0a:	09db      	lsrs	r3, r3, #7
 8003e0c:	4413      	add	r3, r2
 8003e0e:	1d1a      	adds	r2, r3, #4
 8003e10:	4b20      	ldr	r3, [pc, #128]	; (8003e94 <RTC_WeekDayNum+0xec>)
 8003e12:	fba3 1302 	umull	r1, r3, r3, r2
 8003e16:	1ad1      	subs	r1, r2, r3
 8003e18:	0849      	lsrs	r1, r1, #1
 8003e1a:	440b      	add	r3, r1
 8003e1c:	0899      	lsrs	r1, r3, #2
 8003e1e:	460b      	mov	r3, r1
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	1a5b      	subs	r3, r3, r1
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	e029      	b.n	8003e7e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003e2a:	78fa      	ldrb	r2, [r7, #3]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	4413      	add	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	1a9b      	subs	r3, r3, r2
 8003e36:	4a15      	ldr	r2, [pc, #84]	; (8003e8c <RTC_WeekDayNum+0xe4>)
 8003e38:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3c:	085a      	lsrs	r2, r3, #1
 8003e3e:	78bb      	ldrb	r3, [r7, #2]
 8003e40:	441a      	add	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	441a      	add	r2, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	089b      	lsrs	r3, r3, #2
 8003e4a:	441a      	add	r2, r3
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	4910      	ldr	r1, [pc, #64]	; (8003e90 <RTC_WeekDayNum+0xe8>)
 8003e50:	fba1 1303 	umull	r1, r3, r1, r3
 8003e54:	095b      	lsrs	r3, r3, #5
 8003e56:	1ad2      	subs	r2, r2, r3
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	490d      	ldr	r1, [pc, #52]	; (8003e90 <RTC_WeekDayNum+0xe8>)
 8003e5c:	fba1 1303 	umull	r1, r3, r1, r3
 8003e60:	09db      	lsrs	r3, r3, #7
 8003e62:	4413      	add	r3, r2
 8003e64:	1c9a      	adds	r2, r3, #2
 8003e66:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <RTC_WeekDayNum+0xec>)
 8003e68:	fba3 1302 	umull	r1, r3, r3, r2
 8003e6c:	1ad1      	subs	r1, r2, r3
 8003e6e:	0849      	lsrs	r1, r1, #1
 8003e70:	440b      	add	r3, r1
 8003e72:	0899      	lsrs	r1, r3, #2
 8003e74:	460b      	mov	r3, r1
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	1a5b      	subs	r3, r3, r1
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	b2db      	uxtb	r3, r3
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr
 8003e8c:	38e38e39 	.word	0x38e38e39
 8003e90:	51eb851f 	.word	0x51eb851f
 8003e94:	24924925 	.word	0x24924925

08003e98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e076      	b.n	8003f98 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d108      	bne.n	8003ec4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eba:	d009      	beq.n	8003ed0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	61da      	str	r2, [r3, #28]
 8003ec2:	e005      	b.n	8003ed0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7fc fba2 	bl	8000634 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f54:	ea42 0103 	orr.w	r1, r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	0c1a      	lsrs	r2, r3, #16
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f002 0204 	and.w	r2, r2, #4
 8003f76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69da      	ldr	r2, [r3, #28]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08c      	sub	sp, #48	; 0x30
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_SPI_TransmitReceive+0x26>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e18a      	b.n	80042dc <HAL_SPI_TransmitReceive+0x33c>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fce:	f7fc fc7d 	bl	80008cc <HAL_GetTick>
 8003fd2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003fe4:	887b      	ldrh	r3, [r7, #2]
 8003fe6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fe8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d00f      	beq.n	8004010 <HAL_SPI_TransmitReceive+0x70>
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ff6:	d107      	bne.n	8004008 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d103      	bne.n	8004008 <HAL_SPI_TransmitReceive+0x68>
 8004000:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004004:	2b04      	cmp	r3, #4
 8004006:	d003      	beq.n	8004010 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004008:	2302      	movs	r3, #2
 800400a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800400e:	e15b      	b.n	80042c8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_SPI_TransmitReceive+0x82>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <HAL_SPI_TransmitReceive+0x82>
 800401c:	887b      	ldrh	r3, [r7, #2]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d103      	bne.n	800402a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004028:	e14e      	b.n	80042c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b04      	cmp	r3, #4
 8004034:	d003      	beq.n	800403e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2205      	movs	r2, #5
 800403a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	887a      	ldrh	r2, [r7, #2]
 800404e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	887a      	ldrh	r2, [r7, #2]
 8004054:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	887a      	ldrh	r2, [r7, #2]
 8004060:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	887a      	ldrh	r2, [r7, #2]
 8004066:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407e:	2b40      	cmp	r3, #64	; 0x40
 8004080:	d007      	beq.n	8004092 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004090:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800409a:	d178      	bne.n	800418e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d002      	beq.n	80040aa <HAL_SPI_TransmitReceive+0x10a>
 80040a4:	8b7b      	ldrh	r3, [r7, #26]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d166      	bne.n	8004178 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	881a      	ldrh	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	1c9a      	adds	r2, r3, #2
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040ce:	e053      	b.n	8004178 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d11b      	bne.n	8004116 <HAL_SPI_TransmitReceive+0x176>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d016      	beq.n	8004116 <HAL_SPI_TransmitReceive+0x176>
 80040e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d113      	bne.n	8004116 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	881a      	ldrh	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	1c9a      	adds	r2, r3, #2
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004108:	b29b      	uxth	r3, r3
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b01      	cmp	r3, #1
 8004122:	d119      	bne.n	8004158 <HAL_SPI_TransmitReceive+0x1b8>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d014      	beq.n	8004158 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004138:	b292      	uxth	r2, r2
 800413a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004140:	1c9a      	adds	r2, r3, #2
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004154:	2301      	movs	r3, #1
 8004156:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004158:	f7fc fbb8 	bl	80008cc <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004164:	429a      	cmp	r2, r3
 8004166:	d807      	bhi.n	8004178 <HAL_SPI_TransmitReceive+0x1d8>
 8004168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416e:	d003      	beq.n	8004178 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004176:	e0a7      	b.n	80042c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1a6      	bne.n	80040d0 <HAL_SPI_TransmitReceive+0x130>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1a1      	bne.n	80040d0 <HAL_SPI_TransmitReceive+0x130>
 800418c:	e07c      	b.n	8004288 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <HAL_SPI_TransmitReceive+0x1fc>
 8004196:	8b7b      	ldrh	r3, [r7, #26]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d16b      	bne.n	8004274 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	330c      	adds	r3, #12
 80041a6:	7812      	ldrb	r2, [r2, #0]
 80041a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041c2:	e057      	b.n	8004274 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d11c      	bne.n	800420c <HAL_SPI_TransmitReceive+0x26c>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d017      	beq.n	800420c <HAL_SPI_TransmitReceive+0x26c>
 80041dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d114      	bne.n	800420c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	330c      	adds	r3, #12
 80041ec:	7812      	ldrb	r2, [r2, #0]
 80041ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b01      	cmp	r3, #1
 8004218:	d119      	bne.n	800424e <HAL_SPI_TransmitReceive+0x2ae>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d014      	beq.n	800424e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004240:	b29b      	uxth	r3, r3
 8004242:	3b01      	subs	r3, #1
 8004244:	b29a      	uxth	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800424a:	2301      	movs	r3, #1
 800424c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800424e:	f7fc fb3d 	bl	80008cc <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800425a:	429a      	cmp	r2, r3
 800425c:	d803      	bhi.n	8004266 <HAL_SPI_TransmitReceive+0x2c6>
 800425e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004264:	d102      	bne.n	800426c <HAL_SPI_TransmitReceive+0x2cc>
 8004266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004268:	2b00      	cmp	r3, #0
 800426a:	d103      	bne.n	8004274 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004272:	e029      	b.n	80042c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1a2      	bne.n	80041c4 <HAL_SPI_TransmitReceive+0x224>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d19d      	bne.n	80041c4 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800428a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 f8b1 	bl	80043f4 <SPI_EndRxTxTransaction>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d006      	beq.n	80042a6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2220      	movs	r2, #32
 80042a2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80042a4:	e010      	b.n	80042c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10b      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042ae:	2300      	movs	r3, #0
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	e000      	b.n	80042c8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80042c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3730      	adds	r7, #48	; 0x30
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	4613      	mov	r3, r2
 80042f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042f4:	f7fc faea 	bl	80008cc <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fc:	1a9b      	subs	r3, r3, r2
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	4413      	add	r3, r2
 8004302:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004304:	f7fc fae2 	bl	80008cc <HAL_GetTick>
 8004308:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800430a:	4b39      	ldr	r3, [pc, #228]	; (80043f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	015b      	lsls	r3, r3, #5
 8004310:	0d1b      	lsrs	r3, r3, #20
 8004312:	69fa      	ldr	r2, [r7, #28]
 8004314:	fb02 f303 	mul.w	r3, r2, r3
 8004318:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800431a:	e054      	b.n	80043c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004322:	d050      	beq.n	80043c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004324:	f7fc fad2 	bl	80008cc <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	69fa      	ldr	r2, [r7, #28]
 8004330:	429a      	cmp	r2, r3
 8004332:	d902      	bls.n	800433a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d13d      	bne.n	80043b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004348:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004352:	d111      	bne.n	8004378 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800435c:	d004      	beq.n	8004368 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004366:	d107      	bne.n	8004378 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004376:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004380:	d10f      	bne.n	80043a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e017      	b.n	80043e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4013      	ands	r3, r2
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	bf0c      	ite	eq
 80043d6:	2301      	moveq	r3, #1
 80043d8:	2300      	movne	r3, #0
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	461a      	mov	r2, r3
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d19b      	bne.n	800431c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3720      	adds	r7, #32
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	20000000 	.word	0x20000000

080043f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2200      	movs	r2, #0
 8004408:	2180      	movs	r1, #128	; 0x80
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f7ff ff6a 	bl	80042e4 <SPI_WaitFlagStateUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d007      	beq.n	8004426 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441a:	f043 0220 	orr.w	r2, r3, #32
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e000      	b.n	8004428 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e03f      	b.n	80044c2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7fc f938 	bl	80006cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2224      	movs	r2, #36	; 0x24
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004472:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f829 	bl	80044cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004488:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	695a      	ldr	r2, [r3, #20]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004498:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
	...

080044cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004506:	f023 030c 	bic.w	r3, r3, #12
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6812      	ldr	r2, [r2, #0]
 800450e:	68b9      	ldr	r1, [r7, #8]
 8004510:	430b      	orrs	r3, r1
 8004512:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699a      	ldr	r2, [r3, #24]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a2c      	ldr	r2, [pc, #176]	; (80045e0 <UART_SetConfig+0x114>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d103      	bne.n	800453c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004534:	f7fe ff76 	bl	8003424 <HAL_RCC_GetPCLK2Freq>
 8004538:	60f8      	str	r0, [r7, #12]
 800453a:	e002      	b.n	8004542 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800453c:	f7fe ff5e 	bl	80033fc <HAL_RCC_GetPCLK1Freq>
 8004540:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4613      	mov	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	009a      	lsls	r2, r3, #2
 800454c:	441a      	add	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	fbb2 f3f3 	udiv	r3, r2, r3
 8004558:	4a22      	ldr	r2, [pc, #136]	; (80045e4 <UART_SetConfig+0x118>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	095b      	lsrs	r3, r3, #5
 8004560:	0119      	lsls	r1, r3, #4
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4613      	mov	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	009a      	lsls	r2, r3, #2
 800456c:	441a      	add	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	fbb2 f2f3 	udiv	r2, r2, r3
 8004578:	4b1a      	ldr	r3, [pc, #104]	; (80045e4 <UART_SetConfig+0x118>)
 800457a:	fba3 0302 	umull	r0, r3, r3, r2
 800457e:	095b      	lsrs	r3, r3, #5
 8004580:	2064      	movs	r0, #100	; 0x64
 8004582:	fb00 f303 	mul.w	r3, r0, r3
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	3332      	adds	r3, #50	; 0x32
 800458c:	4a15      	ldr	r2, [pc, #84]	; (80045e4 <UART_SetConfig+0x118>)
 800458e:	fba2 2303 	umull	r2, r3, r2, r3
 8004592:	095b      	lsrs	r3, r3, #5
 8004594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004598:	4419      	add	r1, r3
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4613      	mov	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	009a      	lsls	r2, r3, #2
 80045a4:	441a      	add	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80045b0:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <UART_SetConfig+0x118>)
 80045b2:	fba3 0302 	umull	r0, r3, r3, r2
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	2064      	movs	r0, #100	; 0x64
 80045ba:	fb00 f303 	mul.w	r3, r0, r3
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	3332      	adds	r3, #50	; 0x32
 80045c4:	4a07      	ldr	r2, [pc, #28]	; (80045e4 <UART_SetConfig+0x118>)
 80045c6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	f003 020f 	and.w	r2, r3, #15
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	440a      	add	r2, r1
 80045d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40013800 	.word	0x40013800
 80045e4:	51eb851f 	.word	0x51eb851f

080045e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80045e8:	b084      	sub	sp, #16
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	f107 0014 	add.w	r0, r7, #20
 80045f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	bc80      	pop	{r7}
 8004604:	b004      	add	sp, #16
 8004606:	4770      	bx	lr

08004608 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004618:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800461c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	b29a      	uxth	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr

08004634 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800463c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004640:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	b29b      	uxth	r3, r3
 800464e:	43db      	mvns	r3, r3
 8004650:	b29b      	uxth	r3, r3
 8004652:	4013      	ands	r3, r2
 8004654:	b29a      	uxth	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	bc80      	pop	{r7}
 8004666:	4770      	bx	lr

08004668 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	460b      	mov	r3, r1
 8004672:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr

08004680 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004680:	b084      	sub	sp, #16
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	f107 0014 	add.w	r0, r7, #20
 800468e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	b004      	add	sp, #16
 80046be:	4770      	bx	lr

080046c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef *USBx, uint32_t num)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bc80      	pop	{r7}
 80046d4:	4770      	bx	lr

080046d6 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef *USBx)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bc80      	pop	{r7}
 80046e8:	4770      	bx	lr
	...

080046ec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b09b      	sub	sp, #108	; 0x6c
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	b29b      	uxth	r3, r3
 800470a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800470e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004712:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	78db      	ldrb	r3, [r3, #3]
 800471a:	2b03      	cmp	r3, #3
 800471c:	d81f      	bhi.n	800475e <USB_ActivateEndpoint+0x72>
 800471e:	a201      	add	r2, pc, #4	; (adr r2, 8004724 <USB_ActivateEndpoint+0x38>)
 8004720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004724:	08004735 	.word	0x08004735
 8004728:	08004751 	.word	0x08004751
 800472c:	08004767 	.word	0x08004767
 8004730:	08004743 	.word	0x08004743
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004734:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004738:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800473c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004740:	e012      	b.n	8004768 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004742:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004746:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800474a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800474e:	e00b      	b.n	8004768 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004750:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004754:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004758:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800475c:	e004      	b.n	8004768 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004764:	e000      	b.n	8004768 <USB_ActivateEndpoint+0x7c>
      break;
 8004766:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	441a      	add	r2, r3
 8004772:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800477a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800477e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004786:	b29b      	uxth	r3, r3
 8004788:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	b29b      	uxth	r3, r3
 8004798:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800479c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	441a      	add	r2, r3
 80047b8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80047bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	7b1b      	ldrb	r3, [r3, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f040 8149 	bne.w	8004a6c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	785b      	ldrb	r3, [r3, #1]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 8084 	beq.w	80048ec <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	461a      	mov	r2, r3
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	4413      	add	r3, r2
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	011a      	lsls	r2, r3, #4
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004806:	613b      	str	r3, [r7, #16]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	88db      	ldrh	r3, [r3, #6]
 800480c:	085b      	lsrs	r3, r3, #1
 800480e:	b29b      	uxth	r3, r3
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	b29a      	uxth	r2, r3
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	81fb      	strh	r3, [r7, #14]
 8004826:	89fb      	ldrh	r3, [r7, #14]
 8004828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482c:	2b00      	cmp	r3, #0
 800482e:	d01b      	beq.n	8004868 <USB_ActivateEndpoint+0x17c>
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	b29b      	uxth	r3, r3
 800483e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004846:	81bb      	strh	r3, [r7, #12]
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	441a      	add	r2, r3
 8004852:	89bb      	ldrh	r3, [r7, #12]
 8004854:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004858:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800485c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004860:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004864:	b29b      	uxth	r3, r3
 8004866:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	78db      	ldrb	r3, [r3, #3]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d020      	beq.n	80048b2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	b29b      	uxth	r3, r3
 800487e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004886:	813b      	strh	r3, [r7, #8]
 8004888:	893b      	ldrh	r3, [r7, #8]
 800488a:	f083 0320 	eor.w	r3, r3, #32
 800488e:	813b      	strh	r3, [r7, #8]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	441a      	add	r2, r3
 800489a:	893b      	ldrh	r3, [r7, #8]
 800489c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	8013      	strh	r3, [r2, #0]
 80048b0:	e27f      	b.n	8004db2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4413      	add	r3, r2
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	b29b      	uxth	r3, r3
 80048c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048c8:	817b      	strh	r3, [r7, #10]
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	441a      	add	r2, r3
 80048d4:	897b      	ldrh	r3, [r7, #10]
 80048d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	8013      	strh	r3, [r2, #0]
 80048ea:	e262      	b.n	8004db2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	461a      	mov	r2, r3
 80048fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fc:	4413      	add	r3, r2
 80048fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	011a      	lsls	r2, r3, #4
 8004906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004908:	4413      	add	r3, r2
 800490a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800490e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	88db      	ldrh	r3, [r3, #6]
 8004914:	085b      	lsrs	r3, r3, #1
 8004916:	b29b      	uxth	r3, r3
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	b29a      	uxth	r2, r3
 800491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800492a:	b29b      	uxth	r3, r3
 800492c:	461a      	mov	r2, r3
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	4413      	add	r3, r2
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	011a      	lsls	r2, r3, #4
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	4413      	add	r3, r2
 800493e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004942:	623b      	str	r3, [r7, #32]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d112      	bne.n	8004972 <USB_ActivateEndpoint+0x286>
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	b29b      	uxth	r3, r3
 8004952:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004956:	b29a      	uxth	r2, r3
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	801a      	strh	r2, [r3, #0]
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	b29b      	uxth	r3, r3
 8004962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800496a:	b29a      	uxth	r2, r3
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	801a      	strh	r2, [r3, #0]
 8004970:	e02f      	b.n	80049d2 <USB_ActivateEndpoint+0x2e6>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	2b3e      	cmp	r3, #62	; 0x3e
 8004978:	d813      	bhi.n	80049a2 <USB_ActivateEndpoint+0x2b6>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	085b      	lsrs	r3, r3, #1
 8004980:	663b      	str	r3, [r7, #96]	; 0x60
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <USB_ActivateEndpoint+0x2a8>
 800498e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004990:	3301      	adds	r3, #1
 8004992:	663b      	str	r3, [r7, #96]	; 0x60
 8004994:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004996:	b29b      	uxth	r3, r3
 8004998:	029b      	lsls	r3, r3, #10
 800499a:	b29a      	uxth	r2, r3
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	801a      	strh	r2, [r3, #0]
 80049a0:	e017      	b.n	80049d2 <USB_ActivateEndpoint+0x2e6>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	095b      	lsrs	r3, r3, #5
 80049a8:	663b      	str	r3, [r7, #96]	; 0x60
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f003 031f 	and.w	r3, r3, #31
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d102      	bne.n	80049bc <USB_ActivateEndpoint+0x2d0>
 80049b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049b8:	3b01      	subs	r3, #1
 80049ba:	663b      	str	r3, [r7, #96]	; 0x60
 80049bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049be:	b29b      	uxth	r3, r3
 80049c0:	029b      	lsls	r3, r3, #10
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	83fb      	strh	r3, [r7, #30]
 80049e0:	8bfb      	ldrh	r3, [r7, #30]
 80049e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d01b      	beq.n	8004a22 <USB_ActivateEndpoint+0x336>
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a00:	83bb      	strh	r3, [r7, #28]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	441a      	add	r2, r3
 8004a0c:	8bbb      	ldrh	r3, [r7, #28]
 8004a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a38:	837b      	strh	r3, [r7, #26]
 8004a3a:	8b7b      	ldrh	r3, [r7, #26]
 8004a3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a40:	837b      	strh	r3, [r7, #26]
 8004a42:	8b7b      	ldrh	r3, [r7, #26]
 8004a44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a48:	837b      	strh	r3, [r7, #26]
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	441a      	add	r2, r3
 8004a54:	8b7b      	ldrh	r3, [r7, #26]
 8004a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	8013      	strh	r3, [r2, #0]
 8004a6a:	e1a2      	b.n	8004db2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	881b      	ldrh	r3, [r3, #0]
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a82:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	441a      	add	r2, r3
 8004a90:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a9c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	65bb      	str	r3, [r7, #88]	; 0x58
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ab8:	4413      	add	r3, r2
 8004aba:	65bb      	str	r3, [r7, #88]	; 0x58
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	011a      	lsls	r2, r3, #4
 8004ac2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aca:	657b      	str	r3, [r7, #84]	; 0x54
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	891b      	ldrh	r3, [r3, #8]
 8004ad0:	085b      	lsrs	r3, r3, #1
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ada:	801a      	strh	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	653b      	str	r3, [r7, #80]	; 0x50
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	461a      	mov	r2, r3
 8004aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aec:	4413      	add	r3, r2
 8004aee:	653b      	str	r3, [r7, #80]	; 0x50
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	011a      	lsls	r2, r3, #4
 8004af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	895b      	ldrh	r3, [r3, #10]
 8004b04:	085b      	lsrs	r3, r3, #1
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b0e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	785b      	ldrb	r3, [r3, #1]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f040 8091 	bne.w	8004c3c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004b28:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d01b      	beq.n	8004b6a <USB_ActivateEndpoint+0x47e>
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b48:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	441a      	add	r2, r3
 8004b54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004b56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b78:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d01b      	beq.n	8004bba <USB_ActivateEndpoint+0x4ce>
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b98:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	441a      	add	r2, r3
 8004ba4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004bd2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004bd4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004bd8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004bda:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004bdc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004be0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	441a      	add	r2, r3
 8004bec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004bee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c18:	867b      	strh	r3, [r7, #50]	; 0x32
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	441a      	add	r2, r3
 8004c24:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	8013      	strh	r3, [r2, #0]
 8004c3a:	e0ba      	b.n	8004db2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004c4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d01d      	beq.n	8004c94 <USB_ActivateEndpoint+0x5a8>
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	441a      	add	r2, r3
 8004c7c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004ca4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d01d      	beq.n	8004cec <USB_ActivateEndpoint+0x600>
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	441a      	add	r2, r3
 8004cd4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	78db      	ldrb	r3, [r3, #3]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d024      	beq.n	8004d3e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d0a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004d0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004d12:	f083 0320 	eor.w	r3, r3, #32
 8004d16:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	441a      	add	r2, r3
 8004d24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004d28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	8013      	strh	r3, [r2, #0]
 8004d3c:	e01d      	b.n	8004d7a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	881b      	ldrh	r3, [r3, #0]
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d54:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	441a      	add	r2, r3
 8004d62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d90:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	441a      	add	r2, r3
 8004d9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004db2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	376c      	adds	r7, #108	; 0x6c
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bc80      	pop	{r7}
 8004dbe:	4770      	bx	lr

08004dc0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b08d      	sub	sp, #52	; 0x34
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	7b1b      	ldrb	r3, [r3, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f040 808e 	bne.w	8004ef0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	785b      	ldrb	r3, [r3, #1]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d044      	beq.n	8004e66 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	81bb      	strh	r3, [r7, #12]
 8004dea:	89bb      	ldrh	r3, [r7, #12]
 8004dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d01b      	beq.n	8004e2c <USB_DeactivateEndpoint+0x6c>
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0a:	817b      	strh	r3, [r7, #10]
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	441a      	add	r2, r3
 8004e16:	897b      	ldrh	r3, [r7, #10]
 8004e18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e42:	813b      	strh	r3, [r7, #8]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	441a      	add	r2, r3
 8004e4e:	893b      	ldrh	r3, [r7, #8]
 8004e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	8013      	strh	r3, [r2, #0]
 8004e64:	e192      	b.n	800518c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	827b      	strh	r3, [r7, #18]
 8004e74:	8a7b      	ldrh	r3, [r7, #18]
 8004e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d01b      	beq.n	8004eb6 <USB_DeactivateEndpoint+0xf6>
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e94:	823b      	strh	r3, [r7, #16]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	441a      	add	r2, r3
 8004ea0:	8a3b      	ldrh	r3, [r7, #16]
 8004ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ecc:	81fb      	strh	r3, [r7, #14]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	441a      	add	r2, r3
 8004ed8:	89fb      	ldrh	r3, [r7, #14]
 8004eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	8013      	strh	r3, [r2, #0]
 8004eee:	e14d      	b.n	800518c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	785b      	ldrb	r3, [r3, #1]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f040 80a5 	bne.w	8005044 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	843b      	strh	r3, [r7, #32]
 8004f08:	8c3b      	ldrh	r3, [r7, #32]
 8004f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d01b      	beq.n	8004f4a <USB_DeactivateEndpoint+0x18a>
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f28:	83fb      	strh	r3, [r7, #30]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	441a      	add	r2, r3
 8004f34:	8bfb      	ldrh	r3, [r7, #30]
 8004f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	83bb      	strh	r3, [r7, #28]
 8004f58:	8bbb      	ldrh	r3, [r7, #28]
 8004f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d01b      	beq.n	8004f9a <USB_DeactivateEndpoint+0x1da>
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f78:	837b      	strh	r3, [r7, #26]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	441a      	add	r2, r3
 8004f84:	8b7b      	ldrh	r3, [r7, #26]
 8004f86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb0:	833b      	strh	r3, [r7, #24]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	441a      	add	r2, r3
 8004fbc:	8b3b      	ldrh	r3, [r7, #24]
 8004fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe8:	82fb      	strh	r3, [r7, #22]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	441a      	add	r2, r3
 8004ff4:	8afb      	ldrh	r3, [r7, #22]
 8004ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005006:	b29b      	uxth	r3, r3
 8005008:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	b29b      	uxth	r3, r3
 8005018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005020:	82bb      	strh	r3, [r7, #20]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	441a      	add	r2, r3
 800502c:	8abb      	ldrh	r3, [r7, #20]
 800502e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800503a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800503e:	b29b      	uxth	r3, r3
 8005040:	8013      	strh	r3, [r2, #0]
 8005042:	e0a3      	b.n	800518c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005052:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01b      	beq.n	8005094 <USB_DeactivateEndpoint+0x2d4>
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	b29b      	uxth	r3, r3
 800506a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800506e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005072:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	441a      	add	r2, r3
 800507e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005080:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005084:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005088:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800508c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005090:	b29b      	uxth	r3, r3
 8005092:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80050a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80050a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d01b      	beq.n	80050e4 <USB_DeactivateEndpoint+0x324>
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c2:	853b      	strh	r3, [r7, #40]	; 0x28
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	441a      	add	r2, r3
 80050ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80050d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	441a      	add	r2, r3
 8005106:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800510c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005110:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005118:	b29b      	uxth	r3, r3
 800511a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	881b      	ldrh	r3, [r3, #0]
 8005128:	b29b      	uxth	r3, r3
 800512a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005132:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	441a      	add	r2, r3
 800513e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800514c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005150:	b29b      	uxth	r3, r3
 8005152:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	b29b      	uxth	r3, r3
 8005162:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516a:	847b      	strh	r3, [r7, #34]	; 0x22
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	441a      	add	r2, r3
 8005176:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800517c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005188:	b29b      	uxth	r3, r3
 800518a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3734      	adds	r7, #52	; 0x34
 8005192:	46bd      	mov	sp, r7
 8005194:	bc80      	pop	{r7}
 8005196:	4770      	bx	lr

08005198 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b0cc      	sub	sp, #304	; 0x130
 800519c:	af00      	add	r7, sp, #0
 800519e:	1d3b      	adds	r3, r7, #4
 80051a0:	6018      	str	r0, [r3, #0]
 80051a2:	463b      	mov	r3, r7
 80051a4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051a6:	463b      	mov	r3, r7
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	785b      	ldrb	r3, [r3, #1]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	f040 872e 	bne.w	800600e <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80051b2:	463b      	mov	r3, r7
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	699a      	ldr	r2, [r3, #24]
 80051b8:	463b      	mov	r3, r7
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d905      	bls.n	80051ce <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80051c2:	463b      	mov	r3, r7
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80051cc:	e004      	b.n	80051d8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80051ce:	463b      	mov	r3, r7
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80051d8:	463b      	mov	r3, r7
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	7b1b      	ldrb	r3, [r3, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d134      	bne.n	800524c <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80051e2:	463b      	mov	r3, r7
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6959      	ldr	r1, [r3, #20]
 80051e8:	463b      	mov	r3, r7
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	88da      	ldrh	r2, [r3, #6]
 80051ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	1d38      	adds	r0, r7, #4
 80051f6:	6800      	ldr	r0, [r0, #0]
 80051f8:	f001 fc03 	bl	8006a02 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80051fc:	f107 0310 	add.w	r3, r7, #16
 8005200:	1d3a      	adds	r2, r7, #4
 8005202:	6812      	ldr	r2, [r2, #0]
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	1d3b      	adds	r3, r7, #4
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800520e:	b29b      	uxth	r3, r3
 8005210:	4619      	mov	r1, r3
 8005212:	f107 0310 	add.w	r3, r7, #16
 8005216:	f107 0210 	add.w	r2, r7, #16
 800521a:	6812      	ldr	r2, [r2, #0]
 800521c:	440a      	add	r2, r1
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	463b      	mov	r3, r7
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	011a      	lsls	r2, r3, #4
 8005228:	f107 0310 	add.w	r3, r7, #16
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4413      	add	r3, r2
 8005230:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005234:	f107 030c 	add.w	r3, r7, #12
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800523e:	b29a      	uxth	r2, r3
 8005240:	f107 030c 	add.w	r3, r7, #12
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	801a      	strh	r2, [r3, #0]
 8005248:	f000 beac 	b.w	8005fa4 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800524c:	463b      	mov	r3, r7
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	78db      	ldrb	r3, [r3, #3]
 8005252:	2b02      	cmp	r3, #2
 8005254:	f040 838c 	bne.w	8005970 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005258:	463b      	mov	r3, r7
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6a1a      	ldr	r2, [r3, #32]
 800525e:	463b      	mov	r3, r7
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	429a      	cmp	r2, r3
 8005266:	f240 8330 	bls.w	80058ca <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800526a:	1d3b      	adds	r3, r7, #4
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	463b      	mov	r3, r7
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	b29b      	uxth	r3, r3
 800527c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005284:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005288:	1d3b      	adds	r3, r7, #4
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	463b      	mov	r3, r7
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	441a      	add	r2, r3
 8005296:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800529a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800529e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80052a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80052ae:	463b      	mov	r3, r7
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6a1a      	ldr	r2, [r3, #32]
 80052b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052b8:	1ad2      	subs	r2, r2, r3
 80052ba:	463b      	mov	r3, r7
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80052c0:	1d3b      	adds	r3, r7, #4
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	463b      	mov	r3, r7
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 819e 	beq.w	8005618 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80052e0:	1d3a      	adds	r2, r7, #4
 80052e2:	6812      	ldr	r2, [r2, #0]
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	463b      	mov	r3, r7
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	785b      	ldrb	r3, [r3, #1]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d17a      	bne.n	80053e6 <USB_EPStartXfer+0x24e>
 80052f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052f4:	1d3a      	adds	r2, r7, #4
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	1d3b      	adds	r3, r7, #4
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005302:	b29b      	uxth	r3, r3
 8005304:	4619      	mov	r1, r3
 8005306:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800530a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800530e:	6812      	ldr	r2, [r2, #0]
 8005310:	440a      	add	r2, r1
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	463b      	mov	r3, r7
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	011a      	lsls	r2, r3, #4
 800531c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4413      	add	r3, r2
 8005324:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d11a      	bne.n	800536c <USB_EPStartXfer+0x1d4>
 8005336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	b29b      	uxth	r3, r3
 8005340:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005344:	b29a      	uxth	r2, r3
 8005346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	801a      	strh	r2, [r3, #0]
 800534e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	b29b      	uxth	r3, r3
 8005358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800535c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005360:	b29a      	uxth	r2, r3
 8005362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	801a      	strh	r2, [r3, #0]
 800536a:	e062      	b.n	8005432 <USB_EPStartXfer+0x29a>
 800536c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005370:	2b3e      	cmp	r3, #62	; 0x3e
 8005372:	d819      	bhi.n	80053a8 <USB_EPStartXfer+0x210>
 8005374:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005378:	085b      	lsrs	r3, r3, #1
 800537a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800537e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d004      	beq.n	8005394 <USB_EPStartXfer+0x1fc>
 800538a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800538e:	3301      	adds	r3, #1
 8005390:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005394:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005398:	b29b      	uxth	r3, r3
 800539a:	029b      	lsls	r3, r3, #10
 800539c:	b29a      	uxth	r2, r3
 800539e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	801a      	strh	r2, [r3, #0]
 80053a6:	e044      	b.n	8005432 <USB_EPStartXfer+0x29a>
 80053a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ac:	095b      	lsrs	r3, r3, #5
 80053ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80053b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053b6:	f003 031f 	and.w	r3, r3, #31
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d104      	bne.n	80053c8 <USB_EPStartXfer+0x230>
 80053be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80053c2:	3b01      	subs	r3, #1
 80053c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80053c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	029b      	lsls	r3, r3, #10
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053da:	b29a      	uxth	r2, r3
 80053dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	801a      	strh	r2, [r3, #0]
 80053e4:	e025      	b.n	8005432 <USB_EPStartXfer+0x29a>
 80053e6:	463b      	mov	r3, r7
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	785b      	ldrb	r3, [r3, #1]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d120      	bne.n	8005432 <USB_EPStartXfer+0x29a>
 80053f0:	1d3b      	adds	r3, r7, #4
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	4619      	mov	r1, r3
 80053fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005400:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	440a      	add	r2, r1
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	463b      	mov	r3, r7
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	011a      	lsls	r2, r3, #4
 8005412:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4413      	add	r3, r2
 800541a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800541e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005428:	b29a      	uxth	r2, r3
 800542a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005432:	463b      	mov	r3, r7
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	895b      	ldrh	r3, [r3, #10]
 8005438:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800543c:	463b      	mov	r3, r7
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6959      	ldr	r1, [r3, #20]
 8005442:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005446:	b29b      	uxth	r3, r3
 8005448:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800544c:	1d38      	adds	r0, r7, #4
 800544e:	6800      	ldr	r0, [r0, #0]
 8005450:	f001 fad7 	bl	8006a02 <USB_WritePMA>
            ep->xfer_buff += len;
 8005454:	463b      	mov	r3, r7
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695a      	ldr	r2, [r3, #20]
 800545a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800545e:	441a      	add	r2, r3
 8005460:	463b      	mov	r3, r7
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005466:	463b      	mov	r3, r7
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6a1a      	ldr	r2, [r3, #32]
 800546c:	463b      	mov	r3, r7
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	429a      	cmp	r2, r3
 8005474:	d909      	bls.n	800548a <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8005476:	463b      	mov	r3, r7
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6a1a      	ldr	r2, [r3, #32]
 800547c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005480:	1ad2      	subs	r2, r2, r3
 8005482:	463b      	mov	r3, r7
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	621a      	str	r2, [r3, #32]
 8005488:	e008      	b.n	800549c <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800548a:	463b      	mov	r3, r7
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005494:	463b      	mov	r3, r7
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2200      	movs	r2, #0
 800549a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800549c:	463b      	mov	r3, r7
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	785b      	ldrb	r3, [r3, #1]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d17a      	bne.n	800559c <USB_EPStartXfer+0x404>
 80054a6:	f107 0318 	add.w	r3, r7, #24
 80054aa:	1d3a      	adds	r2, r7, #4
 80054ac:	6812      	ldr	r2, [r2, #0]
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	1d3b      	adds	r3, r7, #4
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	4619      	mov	r1, r3
 80054bc:	f107 0318 	add.w	r3, r7, #24
 80054c0:	f107 0218 	add.w	r2, r7, #24
 80054c4:	6812      	ldr	r2, [r2, #0]
 80054c6:	440a      	add	r2, r1
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	463b      	mov	r3, r7
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	011a      	lsls	r2, r3, #4
 80054d2:	f107 0318 	add.w	r3, r7, #24
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4413      	add	r3, r2
 80054da:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80054de:	f107 0314 	add.w	r3, r7, #20
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d11a      	bne.n	8005522 <USB_EPStartXfer+0x38a>
 80054ec:	f107 0314 	add.w	r3, r7, #20
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	f107 0314 	add.w	r3, r7, #20
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	801a      	strh	r2, [r3, #0]
 8005504:	f107 0314 	add.w	r3, r7, #20
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	b29b      	uxth	r3, r3
 800550e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005516:	b29a      	uxth	r2, r3
 8005518:	f107 0314 	add.w	r3, r7, #20
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	801a      	strh	r2, [r3, #0]
 8005520:	e067      	b.n	80055f2 <USB_EPStartXfer+0x45a>
 8005522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005526:	2b3e      	cmp	r3, #62	; 0x3e
 8005528:	d819      	bhi.n	800555e <USB_EPStartXfer+0x3c6>
 800552a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800552e:	085b      	lsrs	r3, r3, #1
 8005530:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d004      	beq.n	800554a <USB_EPStartXfer+0x3b2>
 8005540:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005544:	3301      	adds	r3, #1
 8005546:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800554a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800554e:	b29b      	uxth	r3, r3
 8005550:	029b      	lsls	r3, r3, #10
 8005552:	b29a      	uxth	r2, r3
 8005554:	f107 0314 	add.w	r3, r7, #20
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	801a      	strh	r2, [r3, #0]
 800555c:	e049      	b.n	80055f2 <USB_EPStartXfer+0x45a>
 800555e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005562:	095b      	lsrs	r3, r3, #5
 8005564:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005568:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800556c:	f003 031f 	and.w	r3, r3, #31
 8005570:	2b00      	cmp	r3, #0
 8005572:	d104      	bne.n	800557e <USB_EPStartXfer+0x3e6>
 8005574:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005578:	3b01      	subs	r3, #1
 800557a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800557e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005582:	b29b      	uxth	r3, r3
 8005584:	029b      	lsls	r3, r3, #10
 8005586:	b29b      	uxth	r3, r3
 8005588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800558c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005590:	b29a      	uxth	r2, r3
 8005592:	f107 0314 	add.w	r3, r7, #20
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	801a      	strh	r2, [r3, #0]
 800559a:	e02a      	b.n	80055f2 <USB_EPStartXfer+0x45a>
 800559c:	463b      	mov	r3, r7
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	785b      	ldrb	r3, [r3, #1]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d125      	bne.n	80055f2 <USB_EPStartXfer+0x45a>
 80055a6:	f107 0320 	add.w	r3, r7, #32
 80055aa:	1d3a      	adds	r2, r7, #4
 80055ac:	6812      	ldr	r2, [r2, #0]
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	1d3b      	adds	r3, r7, #4
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	4619      	mov	r1, r3
 80055bc:	f107 0320 	add.w	r3, r7, #32
 80055c0:	f107 0220 	add.w	r2, r7, #32
 80055c4:	6812      	ldr	r2, [r2, #0]
 80055c6:	440a      	add	r2, r1
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	463b      	mov	r3, r7
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	011a      	lsls	r2, r3, #4
 80055d2:	f107 0320 	add.w	r3, r7, #32
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4413      	add	r3, r2
 80055da:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80055de:	f107 031c 	add.w	r3, r7, #28
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	f107 031c 	add.w	r3, r7, #28
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80055f2:	463b      	mov	r3, r7
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	891b      	ldrh	r3, [r3, #8]
 80055f8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055fc:	463b      	mov	r3, r7
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6959      	ldr	r1, [r3, #20]
 8005602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005606:	b29b      	uxth	r3, r3
 8005608:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800560c:	1d38      	adds	r0, r7, #4
 800560e:	6800      	ldr	r0, [r0, #0]
 8005610:	f001 f9f7 	bl	8006a02 <USB_WritePMA>
 8005614:	f000 bcc6 	b.w	8005fa4 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005618:	463b      	mov	r3, r7
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	785b      	ldrb	r3, [r3, #1]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d164      	bne.n	80056ec <USB_EPStartXfer+0x554>
 8005622:	1d3b      	adds	r3, r7, #4
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	64bb      	str	r3, [r7, #72]	; 0x48
 8005628:	1d3b      	adds	r3, r7, #4
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005630:	b29b      	uxth	r3, r3
 8005632:	461a      	mov	r2, r3
 8005634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005636:	4413      	add	r3, r2
 8005638:	64bb      	str	r3, [r7, #72]	; 0x48
 800563a:	463b      	mov	r3, r7
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	011a      	lsls	r2, r3, #4
 8005642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005644:	4413      	add	r3, r2
 8005646:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800564a:	647b      	str	r3, [r7, #68]	; 0x44
 800564c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005650:	2b00      	cmp	r3, #0
 8005652:	d112      	bne.n	800567a <USB_EPStartXfer+0x4e2>
 8005654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	b29b      	uxth	r3, r3
 800565a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800565e:	b29a      	uxth	r2, r3
 8005660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005662:	801a      	strh	r2, [r3, #0]
 8005664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	b29b      	uxth	r3, r3
 800566a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800566e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005672:	b29a      	uxth	r2, r3
 8005674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005676:	801a      	strh	r2, [r3, #0]
 8005678:	e057      	b.n	800572a <USB_EPStartXfer+0x592>
 800567a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800567e:	2b3e      	cmp	r3, #62	; 0x3e
 8005680:	d817      	bhi.n	80056b2 <USB_EPStartXfer+0x51a>
 8005682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005686:	085b      	lsrs	r3, r3, #1
 8005688:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800568c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b00      	cmp	r3, #0
 8005696:	d004      	beq.n	80056a2 <USB_EPStartXfer+0x50a>
 8005698:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800569c:	3301      	adds	r3, #1
 800569e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80056a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	029b      	lsls	r3, r3, #10
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ae:	801a      	strh	r2, [r3, #0]
 80056b0:	e03b      	b.n	800572a <USB_EPStartXfer+0x592>
 80056b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056b6:	095b      	lsrs	r3, r3, #5
 80056b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80056bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056c0:	f003 031f 	and.w	r3, r3, #31
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d104      	bne.n	80056d2 <USB_EPStartXfer+0x53a>
 80056c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80056cc:	3b01      	subs	r3, #1
 80056ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80056d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	029b      	lsls	r3, r3, #10
 80056da:	b29b      	uxth	r3, r3
 80056dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056e8:	801a      	strh	r2, [r3, #0]
 80056ea:	e01e      	b.n	800572a <USB_EPStartXfer+0x592>
 80056ec:	463b      	mov	r3, r7
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	785b      	ldrb	r3, [r3, #1]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d119      	bne.n	800572a <USB_EPStartXfer+0x592>
 80056f6:	1d3b      	adds	r3, r7, #4
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	653b      	str	r3, [r7, #80]	; 0x50
 80056fc:	1d3b      	adds	r3, r7, #4
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005704:	b29b      	uxth	r3, r3
 8005706:	461a      	mov	r2, r3
 8005708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800570a:	4413      	add	r3, r2
 800570c:	653b      	str	r3, [r7, #80]	; 0x50
 800570e:	463b      	mov	r3, r7
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	011a      	lsls	r2, r3, #4
 8005716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005718:	4413      	add	r3, r2
 800571a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800571e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005720:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005724:	b29a      	uxth	r2, r3
 8005726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005728:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800572a:	463b      	mov	r3, r7
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	891b      	ldrh	r3, [r3, #8]
 8005730:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005734:	463b      	mov	r3, r7
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6959      	ldr	r1, [r3, #20]
 800573a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800573e:	b29b      	uxth	r3, r3
 8005740:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005744:	1d38      	adds	r0, r7, #4
 8005746:	6800      	ldr	r0, [r0, #0]
 8005748:	f001 f95b 	bl	8006a02 <USB_WritePMA>
            ep->xfer_buff += len;
 800574c:	463b      	mov	r3, r7
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695a      	ldr	r2, [r3, #20]
 8005752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005756:	441a      	add	r2, r3
 8005758:	463b      	mov	r3, r7
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800575e:	463b      	mov	r3, r7
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6a1a      	ldr	r2, [r3, #32]
 8005764:	463b      	mov	r3, r7
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	429a      	cmp	r2, r3
 800576c:	d909      	bls.n	8005782 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800576e:	463b      	mov	r3, r7
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6a1a      	ldr	r2, [r3, #32]
 8005774:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005778:	1ad2      	subs	r2, r2, r3
 800577a:	463b      	mov	r3, r7
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	621a      	str	r2, [r3, #32]
 8005780:	e008      	b.n	8005794 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005782:	463b      	mov	r3, r7
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800578c:	463b      	mov	r3, r7
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2200      	movs	r2, #0
 8005792:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005794:	1d3b      	adds	r3, r7, #4
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	643b      	str	r3, [r7, #64]	; 0x40
 800579a:	463b      	mov	r3, r7
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	785b      	ldrb	r3, [r3, #1]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d164      	bne.n	800586e <USB_EPStartXfer+0x6d6>
 80057a4:	1d3b      	adds	r3, r7, #4
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80057aa:	1d3b      	adds	r3, r7, #4
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	461a      	mov	r2, r3
 80057b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b8:	4413      	add	r3, r2
 80057ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80057bc:	463b      	mov	r3, r7
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	011a      	lsls	r2, r3, #4
 80057c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c6:	4413      	add	r3, r2
 80057c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057cc:	637b      	str	r3, [r7, #52]	; 0x34
 80057ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d112      	bne.n	80057fc <USB_EPStartXfer+0x664>
 80057d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d8:	881b      	ldrh	r3, [r3, #0]
 80057da:	b29b      	uxth	r3, r3
 80057dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e4:	801a      	strh	r2, [r3, #0]
 80057e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e8:	881b      	ldrh	r3, [r3, #0]
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f8:	801a      	strh	r2, [r3, #0]
 80057fa:	e054      	b.n	80058a6 <USB_EPStartXfer+0x70e>
 80057fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005800:	2b3e      	cmp	r3, #62	; 0x3e
 8005802:	d817      	bhi.n	8005834 <USB_EPStartXfer+0x69c>
 8005804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005808:	085b      	lsrs	r3, r3, #1
 800580a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800580e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d004      	beq.n	8005824 <USB_EPStartXfer+0x68c>
 800581a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800581e:	3301      	adds	r3, #1
 8005820:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005824:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005828:	b29b      	uxth	r3, r3
 800582a:	029b      	lsls	r3, r3, #10
 800582c:	b29a      	uxth	r2, r3
 800582e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005830:	801a      	strh	r2, [r3, #0]
 8005832:	e038      	b.n	80058a6 <USB_EPStartXfer+0x70e>
 8005834:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005838:	095b      	lsrs	r3, r3, #5
 800583a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800583e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005842:	f003 031f 	and.w	r3, r3, #31
 8005846:	2b00      	cmp	r3, #0
 8005848:	d104      	bne.n	8005854 <USB_EPStartXfer+0x6bc>
 800584a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800584e:	3b01      	subs	r3, #1
 8005850:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005854:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005858:	b29b      	uxth	r3, r3
 800585a:	029b      	lsls	r3, r3, #10
 800585c:	b29b      	uxth	r3, r3
 800585e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005866:	b29a      	uxth	r2, r3
 8005868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586a:	801a      	strh	r2, [r3, #0]
 800586c:	e01b      	b.n	80058a6 <USB_EPStartXfer+0x70e>
 800586e:	463b      	mov	r3, r7
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	785b      	ldrb	r3, [r3, #1]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d116      	bne.n	80058a6 <USB_EPStartXfer+0x70e>
 8005878:	1d3b      	adds	r3, r7, #4
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005880:	b29b      	uxth	r3, r3
 8005882:	461a      	mov	r2, r3
 8005884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005886:	4413      	add	r3, r2
 8005888:	643b      	str	r3, [r7, #64]	; 0x40
 800588a:	463b      	mov	r3, r7
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	011a      	lsls	r2, r3, #4
 8005892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005894:	4413      	add	r3, r2
 8005896:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800589a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800589c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80058a6:	463b      	mov	r3, r7
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	895b      	ldrh	r3, [r3, #10]
 80058ac:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058b0:	463b      	mov	r3, r7
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6959      	ldr	r1, [r3, #20]
 80058b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058c0:	1d38      	adds	r0, r7, #4
 80058c2:	6800      	ldr	r0, [r0, #0]
 80058c4:	f001 f89d 	bl	8006a02 <USB_WritePMA>
 80058c8:	e36c      	b.n	8005fa4 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80058ca:	463b      	mov	r3, r7
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80058d4:	1d3b      	adds	r3, r7, #4
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	463b      	mov	r3, r7
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80058ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ee:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80058f2:	1d3b      	adds	r3, r7, #4
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	463b      	mov	r3, r7
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	441a      	add	r2, r3
 8005900:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005904:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005908:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800590c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005914:	b29b      	uxth	r3, r3
 8005916:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005918:	1d3b      	adds	r3, r7, #4
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800591e:	1d3b      	adds	r3, r7, #4
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005926:	b29b      	uxth	r3, r3
 8005928:	461a      	mov	r2, r3
 800592a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800592c:	4413      	add	r3, r2
 800592e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005930:	463b      	mov	r3, r7
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	011a      	lsls	r2, r3, #4
 8005938:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800593a:	4413      	add	r3, r2
 800593c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005940:	65bb      	str	r3, [r7, #88]	; 0x58
 8005942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005946:	b29a      	uxth	r2, r3
 8005948:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800594a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800594c:	463b      	mov	r3, r7
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	891b      	ldrh	r3, [r3, #8]
 8005952:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005956:	463b      	mov	r3, r7
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6959      	ldr	r1, [r3, #20]
 800595c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005960:	b29b      	uxth	r3, r3
 8005962:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005966:	1d38      	adds	r0, r7, #4
 8005968:	6800      	ldr	r0, [r0, #0]
 800596a:	f001 f84a 	bl	8006a02 <USB_WritePMA>
 800596e:	e319      	b.n	8005fa4 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005970:	1d3b      	adds	r3, r7, #4
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	463b      	mov	r3, r7
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	b29b      	uxth	r3, r3
 8005982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800598e:	1d3b      	adds	r3, r7, #4
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	463b      	mov	r3, r7
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	441a      	add	r2, r3
 800599c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80059a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80059ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80059b4:	463b      	mov	r3, r7
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6a1a      	ldr	r2, [r3, #32]
 80059ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059be:	1ad2      	subs	r2, r2, r3
 80059c0:	463b      	mov	r3, r7
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80059c6:	1d3b      	adds	r3, r7, #4
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	463b      	mov	r3, r7
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 8162 	beq.w	8005ca6 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80059e2:	1d3b      	adds	r3, r7, #4
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059ea:	463b      	mov	r3, r7
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	785b      	ldrb	r3, [r3, #1]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d164      	bne.n	8005abe <USB_EPStartXfer+0x926>
 80059f4:	1d3b      	adds	r3, r7, #4
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80059fa:	1d3b      	adds	r3, r7, #4
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	461a      	mov	r2, r3
 8005a06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a08:	4413      	add	r3, r2
 8005a0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a0c:	463b      	mov	r3, r7
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	011a      	lsls	r2, r3, #4
 8005a14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a16:	4413      	add	r3, r2
 8005a18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a1c:	677b      	str	r3, [r7, #116]	; 0x74
 8005a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d112      	bne.n	8005a4c <USB_EPStartXfer+0x8b4>
 8005a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a34:	801a      	strh	r2, [r3, #0]
 8005a36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a48:	801a      	strh	r2, [r3, #0]
 8005a4a:	e057      	b.n	8005afc <USB_EPStartXfer+0x964>
 8005a4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a50:	2b3e      	cmp	r3, #62	; 0x3e
 8005a52:	d817      	bhi.n	8005a84 <USB_EPStartXfer+0x8ec>
 8005a54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a58:	085b      	lsrs	r3, r3, #1
 8005a5a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d004      	beq.n	8005a74 <USB_EPStartXfer+0x8dc>
 8005a6a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a6e:	3301      	adds	r3, #1
 8005a70:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a74:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	029b      	lsls	r3, r3, #10
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a80:	801a      	strh	r2, [r3, #0]
 8005a82:	e03b      	b.n	8005afc <USB_EPStartXfer+0x964>
 8005a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a88:	095b      	lsrs	r3, r3, #5
 8005a8a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a92:	f003 031f 	and.w	r3, r3, #31
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d104      	bne.n	8005aa4 <USB_EPStartXfer+0x90c>
 8005a9a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005aa4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	029b      	lsls	r3, r3, #10
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aba:	801a      	strh	r2, [r3, #0]
 8005abc:	e01e      	b.n	8005afc <USB_EPStartXfer+0x964>
 8005abe:	463b      	mov	r3, r7
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	785b      	ldrb	r3, [r3, #1]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d119      	bne.n	8005afc <USB_EPStartXfer+0x964>
 8005ac8:	1d3b      	adds	r3, r7, #4
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ad8:	4413      	add	r3, r2
 8005ada:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ade:	463b      	mov	r3, r7
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	011a      	lsls	r2, r3, #4
 8005ae6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005aea:	4413      	add	r3, r2
 8005aec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005af0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005afa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005afc:	463b      	mov	r3, r7
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	895b      	ldrh	r3, [r3, #10]
 8005b02:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b06:	463b      	mov	r3, r7
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6959      	ldr	r1, [r3, #20]
 8005b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b16:	1d38      	adds	r0, r7, #4
 8005b18:	6800      	ldr	r0, [r0, #0]
 8005b1a:	f000 ff72 	bl	8006a02 <USB_WritePMA>
          ep->xfer_buff += len;
 8005b1e:	463b      	mov	r3, r7
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	695a      	ldr	r2, [r3, #20]
 8005b24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b28:	441a      	add	r2, r3
 8005b2a:	463b      	mov	r3, r7
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005b30:	463b      	mov	r3, r7
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6a1a      	ldr	r2, [r3, #32]
 8005b36:	463b      	mov	r3, r7
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d909      	bls.n	8005b54 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8005b40:	463b      	mov	r3, r7
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6a1a      	ldr	r2, [r3, #32]
 8005b46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b4a:	1ad2      	subs	r2, r2, r3
 8005b4c:	463b      	mov	r3, r7
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	621a      	str	r2, [r3, #32]
 8005b52:	e008      	b.n	8005b66 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005b54:	463b      	mov	r3, r7
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005b5e:	463b      	mov	r3, r7
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2200      	movs	r2, #0
 8005b64:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005b66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 821a 	beq.w	8005fa4 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b70:	463b      	mov	r3, r7
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	785b      	ldrb	r3, [r3, #1]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d164      	bne.n	8005c44 <USB_EPStartXfer+0xaac>
 8005b7a:	1d3b      	adds	r3, r7, #4
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b80:	1d3b      	adds	r3, r7, #4
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b8e:	4413      	add	r3, r2
 8005b90:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b92:	463b      	mov	r3, r7
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	011a      	lsls	r2, r3, #4
 8005b9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ba2:	667b      	str	r3, [r7, #100]	; 0x64
 8005ba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d112      	bne.n	8005bd2 <USB_EPStartXfer+0xa3a>
 8005bac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bba:	801a      	strh	r2, [r3, #0]
 8005bbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bce:	801a      	strh	r2, [r3, #0]
 8005bd0:	e057      	b.n	8005c82 <USB_EPStartXfer+0xaea>
 8005bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bd6:	2b3e      	cmp	r3, #62	; 0x3e
 8005bd8:	d817      	bhi.n	8005c0a <USB_EPStartXfer+0xa72>
 8005bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bde:	085b      	lsrs	r3, r3, #1
 8005be0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005be4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d004      	beq.n	8005bfa <USB_EPStartXfer+0xa62>
 8005bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	029b      	lsls	r3, r3, #10
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c06:	801a      	strh	r2, [r3, #0]
 8005c08:	e03b      	b.n	8005c82 <USB_EPStartXfer+0xaea>
 8005c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c0e:	095b      	lsrs	r3, r3, #5
 8005c10:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c18:	f003 031f 	and.w	r3, r3, #31
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d104      	bne.n	8005c2a <USB_EPStartXfer+0xa92>
 8005c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c24:	3b01      	subs	r3, #1
 8005c26:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	029b      	lsls	r3, r3, #10
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c40:	801a      	strh	r2, [r3, #0]
 8005c42:	e01e      	b.n	8005c82 <USB_EPStartXfer+0xaea>
 8005c44:	463b      	mov	r3, r7
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	785b      	ldrb	r3, [r3, #1]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d119      	bne.n	8005c82 <USB_EPStartXfer+0xaea>
 8005c4e:	1d3b      	adds	r3, r7, #4
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	673b      	str	r3, [r7, #112]	; 0x70
 8005c54:	1d3b      	adds	r3, r7, #4
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	461a      	mov	r2, r3
 8005c60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c62:	4413      	add	r3, r2
 8005c64:	673b      	str	r3, [r7, #112]	; 0x70
 8005c66:	463b      	mov	r3, r7
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	011a      	lsls	r2, r3, #4
 8005c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c70:	4413      	add	r3, r2
 8005c72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c82:	463b      	mov	r3, r7
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	891b      	ldrh	r3, [r3, #8]
 8005c88:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c8c:	463b      	mov	r3, r7
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6959      	ldr	r1, [r3, #20]
 8005c92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c9c:	1d38      	adds	r0, r7, #4
 8005c9e:	6800      	ldr	r0, [r0, #0]
 8005ca0:	f000 feaf 	bl	8006a02 <USB_WritePMA>
 8005ca4:	e17e      	b.n	8005fa4 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ca6:	463b      	mov	r3, r7
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	785b      	ldrb	r3, [r3, #1]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d16f      	bne.n	8005d90 <USB_EPStartXfer+0xbf8>
 8005cb0:	1d3b      	adds	r3, r7, #4
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cb8:	1d3b      	adds	r3, r7, #4
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cc8:	4413      	add	r3, r2
 8005cca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cce:	463b      	mov	r3, r7
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	011a      	lsls	r2, r3, #4
 8005cd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cda:	4413      	add	r3, r2
 8005cdc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ce0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d116      	bne.n	8005d1a <USB_EPStartXfer+0xb82>
 8005cec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cfe:	801a      	strh	r2, [r3, #0]
 8005d00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d16:	801a      	strh	r2, [r3, #0]
 8005d18:	e05f      	b.n	8005dda <USB_EPStartXfer+0xc42>
 8005d1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d1e:	2b3e      	cmp	r3, #62	; 0x3e
 8005d20:	d818      	bhi.n	8005d54 <USB_EPStartXfer+0xbbc>
 8005d22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d26:	085b      	lsrs	r3, r3, #1
 8005d28:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d004      	beq.n	8005d42 <USB_EPStartXfer+0xbaa>
 8005d38:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005d42:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	029b      	lsls	r3, r3, #10
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d50:	801a      	strh	r2, [r3, #0]
 8005d52:	e042      	b.n	8005dda <USB_EPStartXfer+0xc42>
 8005d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d58:	095b      	lsrs	r3, r3, #5
 8005d5a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d62:	f003 031f 	and.w	r3, r3, #31
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d104      	bne.n	8005d74 <USB_EPStartXfer+0xbdc>
 8005d6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005d74:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	029b      	lsls	r3, r3, #10
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d8c:	801a      	strh	r2, [r3, #0]
 8005d8e:	e024      	b.n	8005dda <USB_EPStartXfer+0xc42>
 8005d90:	463b      	mov	r3, r7
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	785b      	ldrb	r3, [r3, #1]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d11f      	bne.n	8005dda <USB_EPStartXfer+0xc42>
 8005d9a:	1d3b      	adds	r3, r7, #4
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005da2:	1d3b      	adds	r3, r7, #4
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	461a      	mov	r2, r3
 8005dae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005db2:	4413      	add	r3, r2
 8005db4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005db8:	463b      	mov	r3, r7
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	011a      	lsls	r2, r3, #4
 8005dc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005dce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005dd8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005dda:	463b      	mov	r3, r7
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	891b      	ldrh	r3, [r3, #8]
 8005de0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005de4:	463b      	mov	r3, r7
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6959      	ldr	r1, [r3, #20]
 8005dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005df4:	1d38      	adds	r0, r7, #4
 8005df6:	6800      	ldr	r0, [r0, #0]
 8005df8:	f000 fe03 	bl	8006a02 <USB_WritePMA>
          ep->xfer_buff += len;
 8005dfc:	463b      	mov	r3, r7
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695a      	ldr	r2, [r3, #20]
 8005e02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e06:	441a      	add	r2, r3
 8005e08:	463b      	mov	r3, r7
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005e0e:	463b      	mov	r3, r7
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6a1a      	ldr	r2, [r3, #32]
 8005e14:	463b      	mov	r3, r7
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d909      	bls.n	8005e32 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8005e1e:	463b      	mov	r3, r7
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6a1a      	ldr	r2, [r3, #32]
 8005e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e28:	1ad2      	subs	r2, r2, r3
 8005e2a:	463b      	mov	r3, r7
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	621a      	str	r2, [r3, #32]
 8005e30:	e008      	b.n	8005e44 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8005e32:	463b      	mov	r3, r7
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005e3c:	463b      	mov	r3, r7
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2200      	movs	r2, #0
 8005e42:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005e44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 80ab 	beq.w	8005fa4 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e4e:	1d3b      	adds	r3, r7, #4
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e56:	463b      	mov	r3, r7
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	785b      	ldrb	r3, [r3, #1]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d16f      	bne.n	8005f40 <USB_EPStartXfer+0xda8>
 8005e60:	1d3b      	adds	r3, r7, #4
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e68:	1d3b      	adds	r3, r7, #4
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	461a      	mov	r2, r3
 8005e74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e78:	4413      	add	r3, r2
 8005e7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e7e:	463b      	mov	r3, r7
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	011a      	lsls	r2, r3, #4
 8005e86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d116      	bne.n	8005eca <USB_EPStartXfer+0xd32>
 8005e9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005eae:	801a      	strh	r2, [r3, #0]
 8005eb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ec6:	801a      	strh	r2, [r3, #0]
 8005ec8:	e05b      	b.n	8005f82 <USB_EPStartXfer+0xdea>
 8005eca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ece:	2b3e      	cmp	r3, #62	; 0x3e
 8005ed0:	d818      	bhi.n	8005f04 <USB_EPStartXfer+0xd6c>
 8005ed2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ed6:	085b      	lsrs	r3, r3, #1
 8005ed8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005edc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d004      	beq.n	8005ef2 <USB_EPStartXfer+0xd5a>
 8005ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eec:	3301      	adds	r3, #1
 8005eee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	029b      	lsls	r3, r3, #10
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f00:	801a      	strh	r2, [r3, #0]
 8005f02:	e03e      	b.n	8005f82 <USB_EPStartXfer+0xdea>
 8005f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f08:	095b      	lsrs	r3, r3, #5
 8005f0a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f12:	f003 031f 	and.w	r3, r3, #31
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d104      	bne.n	8005f24 <USB_EPStartXfer+0xd8c>
 8005f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	029b      	lsls	r3, r3, #10
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f3c:	801a      	strh	r2, [r3, #0]
 8005f3e:	e020      	b.n	8005f82 <USB_EPStartXfer+0xdea>
 8005f40:	463b      	mov	r3, r7
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	785b      	ldrb	r3, [r3, #1]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d11b      	bne.n	8005f82 <USB_EPStartXfer+0xdea>
 8005f4a:	1d3b      	adds	r3, r7, #4
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	461a      	mov	r2, r3
 8005f56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f60:	463b      	mov	r3, r7
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	011a      	lsls	r2, r3, #4
 8005f68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005f82:	463b      	mov	r3, r7
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	895b      	ldrh	r3, [r3, #10]
 8005f88:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f8c:	463b      	mov	r3, r7
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6959      	ldr	r1, [r3, #20]
 8005f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f9c:	1d38      	adds	r0, r7, #4
 8005f9e:	6800      	ldr	r0, [r0, #0]
 8005fa0:	f000 fd2f 	bl	8006a02 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005fa4:	1d3b      	adds	r3, r7, #4
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	463b      	mov	r3, r7
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	881b      	ldrh	r3, [r3, #0]
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	f107 020a 	add.w	r2, r7, #10
 8005fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc2:	8013      	strh	r3, [r2, #0]
 8005fc4:	f107 030a 	add.w	r3, r7, #10
 8005fc8:	f107 020a 	add.w	r2, r7, #10
 8005fcc:	8812      	ldrh	r2, [r2, #0]
 8005fce:	f082 0210 	eor.w	r2, r2, #16
 8005fd2:	801a      	strh	r2, [r3, #0]
 8005fd4:	f107 030a 	add.w	r3, r7, #10
 8005fd8:	f107 020a 	add.w	r2, r7, #10
 8005fdc:	8812      	ldrh	r2, [r2, #0]
 8005fde:	f082 0220 	eor.w	r2, r2, #32
 8005fe2:	801a      	strh	r2, [r3, #0]
 8005fe4:	1d3b      	adds	r3, r7, #4
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	463b      	mov	r3, r7
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	441a      	add	r2, r3
 8005ff2:	f107 030a 	add.w	r3, r7, #10
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006008:	b29b      	uxth	r3, r3
 800600a:	8013      	strh	r3, [r2, #0]
 800600c:	e3b5      	b.n	800677a <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800600e:	463b      	mov	r3, r7
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	7b1b      	ldrb	r3, [r3, #12]
 8006014:	2b00      	cmp	r3, #0
 8006016:	f040 8090 	bne.w	800613a <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800601a:	463b      	mov	r3, r7
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	699a      	ldr	r2, [r3, #24]
 8006020:	463b      	mov	r3, r7
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	429a      	cmp	r2, r3
 8006028:	d90e      	bls.n	8006048 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800602a:	463b      	mov	r3, r7
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006034:	463b      	mov	r3, r7
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	699a      	ldr	r2, [r3, #24]
 800603a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800603e:	1ad2      	subs	r2, r2, r3
 8006040:	463b      	mov	r3, r7
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	619a      	str	r2, [r3, #24]
 8006046:	e008      	b.n	800605a <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8006048:	463b      	mov	r3, r7
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006052:	463b      	mov	r3, r7
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2200      	movs	r2, #0
 8006058:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800605a:	1d3b      	adds	r3, r7, #4
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006062:	1d3b      	adds	r3, r7, #4
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800606a:	b29b      	uxth	r3, r3
 800606c:	461a      	mov	r2, r3
 800606e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006072:	4413      	add	r3, r2
 8006074:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006078:	463b      	mov	r3, r7
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	011a      	lsls	r2, r3, #4
 8006080:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006084:	4413      	add	r3, r2
 8006086:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800608a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800608e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006092:	2b00      	cmp	r3, #0
 8006094:	d116      	bne.n	80060c4 <USB_EPStartXfer+0xf2c>
 8006096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800609a:	881b      	ldrh	r3, [r3, #0]
 800609c:	b29b      	uxth	r3, r3
 800609e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060a8:	801a      	strh	r2, [r3, #0]
 80060aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060c0:	801a      	strh	r2, [r3, #0]
 80060c2:	e32c      	b.n	800671e <USB_EPStartXfer+0x1586>
 80060c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060c8:	2b3e      	cmp	r3, #62	; 0x3e
 80060ca:	d818      	bhi.n	80060fe <USB_EPStartXfer+0xf66>
 80060cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060d0:	085b      	lsrs	r3, r3, #1
 80060d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80060d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d004      	beq.n	80060ec <USB_EPStartXfer+0xf54>
 80060e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060e6:	3301      	adds	r3, #1
 80060e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80060ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	029b      	lsls	r3, r3, #10
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060fa:	801a      	strh	r2, [r3, #0]
 80060fc:	e30f      	b.n	800671e <USB_EPStartXfer+0x1586>
 80060fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006102:	095b      	lsrs	r3, r3, #5
 8006104:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800610c:	f003 031f 	and.w	r3, r3, #31
 8006110:	2b00      	cmp	r3, #0
 8006112:	d104      	bne.n	800611e <USB_EPStartXfer+0xf86>
 8006114:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006118:	3b01      	subs	r3, #1
 800611a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800611e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006122:	b29b      	uxth	r3, r3
 8006124:	029b      	lsls	r3, r3, #10
 8006126:	b29b      	uxth	r3, r3
 8006128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800612c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006130:	b29a      	uxth	r2, r3
 8006132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006136:	801a      	strh	r2, [r3, #0]
 8006138:	e2f1      	b.n	800671e <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800613a:	463b      	mov	r3, r7
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	78db      	ldrb	r3, [r3, #3]
 8006140:	2b02      	cmp	r3, #2
 8006142:	f040 818f 	bne.w	8006464 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006146:	463b      	mov	r3, r7
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	785b      	ldrb	r3, [r3, #1]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d175      	bne.n	800623c <USB_EPStartXfer+0x10a4>
 8006150:	1d3b      	adds	r3, r7, #4
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006158:	1d3b      	adds	r3, r7, #4
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006160:	b29b      	uxth	r3, r3
 8006162:	461a      	mov	r2, r3
 8006164:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006168:	4413      	add	r3, r2
 800616a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800616e:	463b      	mov	r3, r7
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	011a      	lsls	r2, r3, #4
 8006176:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800617a:	4413      	add	r3, r2
 800617c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006180:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006184:	463b      	mov	r3, r7
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d116      	bne.n	80061bc <USB_EPStartXfer+0x1024>
 800618e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	b29b      	uxth	r3, r3
 8006196:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800619a:	b29a      	uxth	r2, r3
 800619c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061a0:	801a      	strh	r2, [r3, #0]
 80061a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061b8:	801a      	strh	r2, [r3, #0]
 80061ba:	e065      	b.n	8006288 <USB_EPStartXfer+0x10f0>
 80061bc:	463b      	mov	r3, r7
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	2b3e      	cmp	r3, #62	; 0x3e
 80061c4:	d81a      	bhi.n	80061fc <USB_EPStartXfer+0x1064>
 80061c6:	463b      	mov	r3, r7
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	085b      	lsrs	r3, r3, #1
 80061ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80061d2:	463b      	mov	r3, r7
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d004      	beq.n	80061ea <USB_EPStartXfer+0x1052>
 80061e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e4:	3301      	adds	r3, #1
 80061e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80061ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	029b      	lsls	r3, r3, #10
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061f8:	801a      	strh	r2, [r3, #0]
 80061fa:	e045      	b.n	8006288 <USB_EPStartXfer+0x10f0>
 80061fc:	463b      	mov	r3, r7
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	095b      	lsrs	r3, r3, #5
 8006204:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006208:	463b      	mov	r3, r7
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f003 031f 	and.w	r3, r3, #31
 8006212:	2b00      	cmp	r3, #0
 8006214:	d104      	bne.n	8006220 <USB_EPStartXfer+0x1088>
 8006216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800621a:	3b01      	subs	r3, #1
 800621c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006224:	b29b      	uxth	r3, r3
 8006226:	029b      	lsls	r3, r3, #10
 8006228:	b29b      	uxth	r3, r3
 800622a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800622e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006232:	b29a      	uxth	r2, r3
 8006234:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006238:	801a      	strh	r2, [r3, #0]
 800623a:	e025      	b.n	8006288 <USB_EPStartXfer+0x10f0>
 800623c:	463b      	mov	r3, r7
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	785b      	ldrb	r3, [r3, #1]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d120      	bne.n	8006288 <USB_EPStartXfer+0x10f0>
 8006246:	1d3b      	adds	r3, r7, #4
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800624e:	1d3b      	adds	r3, r7, #4
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006256:	b29b      	uxth	r3, r3
 8006258:	461a      	mov	r2, r3
 800625a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800625e:	4413      	add	r3, r2
 8006260:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006264:	463b      	mov	r3, r7
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	011a      	lsls	r2, r3, #4
 800626c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006270:	4413      	add	r3, r2
 8006272:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006276:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800627a:	463b      	mov	r3, r7
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	b29a      	uxth	r2, r3
 8006282:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006286:	801a      	strh	r2, [r3, #0]
 8006288:	1d3b      	adds	r3, r7, #4
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006290:	463b      	mov	r3, r7
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	785b      	ldrb	r3, [r3, #1]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d175      	bne.n	8006386 <USB_EPStartXfer+0x11ee>
 800629a:	1d3b      	adds	r3, r7, #4
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80062a2:	1d3b      	adds	r3, r7, #4
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	461a      	mov	r2, r3
 80062ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80062b2:	4413      	add	r3, r2
 80062b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80062b8:	463b      	mov	r3, r7
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	011a      	lsls	r2, r3, #4
 80062c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80062c4:	4413      	add	r3, r2
 80062c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062ce:	463b      	mov	r3, r7
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d116      	bne.n	8006306 <USB_EPStartXfer+0x116e>
 80062d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	b29b      	uxth	r3, r3
 80062e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062ea:	801a      	strh	r2, [r3, #0]
 80062ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062f0:	881b      	ldrh	r3, [r3, #0]
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006302:	801a      	strh	r2, [r3, #0]
 8006304:	e061      	b.n	80063ca <USB_EPStartXfer+0x1232>
 8006306:	463b      	mov	r3, r7
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	2b3e      	cmp	r3, #62	; 0x3e
 800630e:	d81a      	bhi.n	8006346 <USB_EPStartXfer+0x11ae>
 8006310:	463b      	mov	r3, r7
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	085b      	lsrs	r3, r3, #1
 8006318:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800631c:	463b      	mov	r3, r7
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d004      	beq.n	8006334 <USB_EPStartXfer+0x119c>
 800632a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800632e:	3301      	adds	r3, #1
 8006330:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006334:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006338:	b29b      	uxth	r3, r3
 800633a:	029b      	lsls	r3, r3, #10
 800633c:	b29a      	uxth	r2, r3
 800633e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006342:	801a      	strh	r2, [r3, #0]
 8006344:	e041      	b.n	80063ca <USB_EPStartXfer+0x1232>
 8006346:	463b      	mov	r3, r7
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	095b      	lsrs	r3, r3, #5
 800634e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006352:	463b      	mov	r3, r7
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	f003 031f 	and.w	r3, r3, #31
 800635c:	2b00      	cmp	r3, #0
 800635e:	d104      	bne.n	800636a <USB_EPStartXfer+0x11d2>
 8006360:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006364:	3b01      	subs	r3, #1
 8006366:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800636a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800636e:	b29b      	uxth	r3, r3
 8006370:	029b      	lsls	r3, r3, #10
 8006372:	b29b      	uxth	r3, r3
 8006374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800637c:	b29a      	uxth	r2, r3
 800637e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006382:	801a      	strh	r2, [r3, #0]
 8006384:	e021      	b.n	80063ca <USB_EPStartXfer+0x1232>
 8006386:	463b      	mov	r3, r7
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	785b      	ldrb	r3, [r3, #1]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d11c      	bne.n	80063ca <USB_EPStartXfer+0x1232>
 8006390:	1d3b      	adds	r3, r7, #4
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006398:	b29b      	uxth	r3, r3
 800639a:	461a      	mov	r2, r3
 800639c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063a0:	4413      	add	r3, r2
 80063a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063a6:	463b      	mov	r3, r7
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	011a      	lsls	r2, r3, #4
 80063ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063b2:	4413      	add	r3, r2
 80063b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063bc:	463b      	mov	r3, r7
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80063c8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80063ca:	463b      	mov	r3, r7
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	69db      	ldr	r3, [r3, #28]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 81a4 	beq.w	800671e <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80063d6:	1d3b      	adds	r3, r7, #4
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	463b      	mov	r3, r7
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063ea:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80063ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d005      	beq.n	8006402 <USB_EPStartXfer+0x126a>
 80063f6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80063fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10d      	bne.n	800641e <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006402:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800640a:	2b00      	cmp	r3, #0
 800640c:	f040 8187 	bne.w	800671e <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006410:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006418:	2b00      	cmp	r3, #0
 800641a:	f040 8180 	bne.w	800671e <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800641e:	1d3b      	adds	r3, r7, #4
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	463b      	mov	r3, r7
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	b29b      	uxth	r3, r3
 8006430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006438:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800643c:	1d3b      	adds	r3, r7, #4
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	463b      	mov	r3, r7
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	441a      	add	r2, r3
 800644a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800644e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800645a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800645e:	b29b      	uxth	r3, r3
 8006460:	8013      	strh	r3, [r2, #0]
 8006462:	e15c      	b.n	800671e <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006464:	463b      	mov	r3, r7
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	78db      	ldrb	r3, [r3, #3]
 800646a:	2b01      	cmp	r3, #1
 800646c:	f040 8155 	bne.w	800671a <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006470:	463b      	mov	r3, r7
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	699a      	ldr	r2, [r3, #24]
 8006476:	463b      	mov	r3, r7
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	429a      	cmp	r2, r3
 800647e:	d90e      	bls.n	800649e <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006480:	463b      	mov	r3, r7
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800648a:	463b      	mov	r3, r7
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	699a      	ldr	r2, [r3, #24]
 8006490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006494:	1ad2      	subs	r2, r2, r3
 8006496:	463b      	mov	r3, r7
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	619a      	str	r2, [r3, #24]
 800649c:	e008      	b.n	80064b0 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800649e:	463b      	mov	r3, r7
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80064a8:	463b      	mov	r3, r7
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2200      	movs	r2, #0
 80064ae:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80064b0:	463b      	mov	r3, r7
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	785b      	ldrb	r3, [r3, #1]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d16f      	bne.n	800659a <USB_EPStartXfer+0x1402>
 80064ba:	1d3b      	adds	r3, r7, #4
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064c2:	1d3b      	adds	r3, r7, #4
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	461a      	mov	r2, r3
 80064ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80064d2:	4413      	add	r3, r2
 80064d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064d8:	463b      	mov	r3, r7
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	011a      	lsls	r2, r3, #4
 80064e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80064e4:	4413      	add	r3, r2
 80064e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d116      	bne.n	8006524 <USB_EPStartXfer+0x138c>
 80064f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006502:	b29a      	uxth	r2, r3
 8006504:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006508:	801a      	strh	r2, [r3, #0]
 800650a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	b29b      	uxth	r3, r3
 8006512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800651a:	b29a      	uxth	r2, r3
 800651c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006520:	801a      	strh	r2, [r3, #0]
 8006522:	e05f      	b.n	80065e4 <USB_EPStartXfer+0x144c>
 8006524:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006528:	2b3e      	cmp	r3, #62	; 0x3e
 800652a:	d818      	bhi.n	800655e <USB_EPStartXfer+0x13c6>
 800652c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006530:	085b      	lsrs	r3, r3, #1
 8006532:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006536:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b00      	cmp	r3, #0
 8006540:	d004      	beq.n	800654c <USB_EPStartXfer+0x13b4>
 8006542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006546:	3301      	adds	r3, #1
 8006548:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800654c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006550:	b29b      	uxth	r3, r3
 8006552:	029b      	lsls	r3, r3, #10
 8006554:	b29a      	uxth	r2, r3
 8006556:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800655a:	801a      	strh	r2, [r3, #0]
 800655c:	e042      	b.n	80065e4 <USB_EPStartXfer+0x144c>
 800655e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006562:	095b      	lsrs	r3, r3, #5
 8006564:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006568:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800656c:	f003 031f 	and.w	r3, r3, #31
 8006570:	2b00      	cmp	r3, #0
 8006572:	d104      	bne.n	800657e <USB_EPStartXfer+0x13e6>
 8006574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006578:	3b01      	subs	r3, #1
 800657a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800657e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006582:	b29b      	uxth	r3, r3
 8006584:	029b      	lsls	r3, r3, #10
 8006586:	b29b      	uxth	r3, r3
 8006588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800658c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006590:	b29a      	uxth	r2, r3
 8006592:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006596:	801a      	strh	r2, [r3, #0]
 8006598:	e024      	b.n	80065e4 <USB_EPStartXfer+0x144c>
 800659a:	463b      	mov	r3, r7
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	785b      	ldrb	r3, [r3, #1]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d11f      	bne.n	80065e4 <USB_EPStartXfer+0x144c>
 80065a4:	1d3b      	adds	r3, r7, #4
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80065ac:	1d3b      	adds	r3, r7, #4
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	461a      	mov	r2, r3
 80065b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065bc:	4413      	add	r3, r2
 80065be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80065c2:	463b      	mov	r3, r7
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	011a      	lsls	r2, r3, #4
 80065ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ce:	4413      	add	r3, r2
 80065d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80065d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065dc:	b29a      	uxth	r2, r3
 80065de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80065e2:	801a      	strh	r2, [r3, #0]
 80065e4:	1d3b      	adds	r3, r7, #4
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065ec:	463b      	mov	r3, r7
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	785b      	ldrb	r3, [r3, #1]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d16f      	bne.n	80066d6 <USB_EPStartXfer+0x153e>
 80065f6:	1d3b      	adds	r3, r7, #4
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80065fe:	1d3b      	adds	r3, r7, #4
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006606:	b29b      	uxth	r3, r3
 8006608:	461a      	mov	r2, r3
 800660a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800660e:	4413      	add	r3, r2
 8006610:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006614:	463b      	mov	r3, r7
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	011a      	lsls	r2, r3, #4
 800661c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006620:	4413      	add	r3, r2
 8006622:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006626:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800662a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800662e:	2b00      	cmp	r3, #0
 8006630:	d116      	bne.n	8006660 <USB_EPStartXfer+0x14c8>
 8006632:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	b29b      	uxth	r3, r3
 800663a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800663e:	b29a      	uxth	r2, r3
 8006640:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006644:	801a      	strh	r2, [r3, #0]
 8006646:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800664a:	881b      	ldrh	r3, [r3, #0]
 800664c:	b29b      	uxth	r3, r3
 800664e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006656:	b29a      	uxth	r2, r3
 8006658:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800665c:	801a      	strh	r2, [r3, #0]
 800665e:	e05e      	b.n	800671e <USB_EPStartXfer+0x1586>
 8006660:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006664:	2b3e      	cmp	r3, #62	; 0x3e
 8006666:	d818      	bhi.n	800669a <USB_EPStartXfer+0x1502>
 8006668:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800666c:	085b      	lsrs	r3, r3, #1
 800666e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006672:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	d004      	beq.n	8006688 <USB_EPStartXfer+0x14f0>
 800667e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006682:	3301      	adds	r3, #1
 8006684:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006688:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800668c:	b29b      	uxth	r3, r3
 800668e:	029b      	lsls	r3, r3, #10
 8006690:	b29a      	uxth	r2, r3
 8006692:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006696:	801a      	strh	r2, [r3, #0]
 8006698:	e041      	b.n	800671e <USB_EPStartXfer+0x1586>
 800669a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800669e:	095b      	lsrs	r3, r3, #5
 80066a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80066a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066a8:	f003 031f 	and.w	r3, r3, #31
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d104      	bne.n	80066ba <USB_EPStartXfer+0x1522>
 80066b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066b4:	3b01      	subs	r3, #1
 80066b6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80066ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066be:	b29b      	uxth	r3, r3
 80066c0:	029b      	lsls	r3, r3, #10
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066d2:	801a      	strh	r2, [r3, #0]
 80066d4:	e023      	b.n	800671e <USB_EPStartXfer+0x1586>
 80066d6:	463b      	mov	r3, r7
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	785b      	ldrb	r3, [r3, #1]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d11e      	bne.n	800671e <USB_EPStartXfer+0x1586>
 80066e0:	1d3b      	adds	r3, r7, #4
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	461a      	mov	r2, r3
 80066ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f0:	4413      	add	r3, r2
 80066f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066f6:	463b      	mov	r3, r7
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	011a      	lsls	r2, r3, #4
 80066fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006702:	4413      	add	r3, r2
 8006704:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006708:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800670c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006710:	b29a      	uxth	r2, r3
 8006712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006716:	801a      	strh	r2, [r3, #0]
 8006718:	e001      	b.n	800671e <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e02e      	b.n	800677c <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800671e:	1d3b      	adds	r3, r7, #4
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	463b      	mov	r3, r7
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	b29b      	uxth	r3, r3
 8006730:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006738:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800673c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006740:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006744:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006748:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800674c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006750:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006754:	1d3b      	adds	r3, r7, #4
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	463b      	mov	r3, r7
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	441a      	add	r2, r3
 8006762:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800676a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800676e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006776:	b29b      	uxth	r3, r3
 8006778:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006786:	b480      	push	{r7}
 8006788:	b085      	sub	sp, #20
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	785b      	ldrb	r3, [r3, #1]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d020      	beq.n	80067da <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ae:	81bb      	strh	r3, [r7, #12]
 80067b0:	89bb      	ldrh	r3, [r7, #12]
 80067b2:	f083 0310 	eor.w	r3, r3, #16
 80067b6:	81bb      	strh	r3, [r7, #12]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	441a      	add	r2, r3
 80067c2:	89bb      	ldrh	r3, [r7, #12]
 80067c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	8013      	strh	r3, [r2, #0]
 80067d8:	e01f      	b.n	800681a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f0:	81fb      	strh	r3, [r7, #14]
 80067f2:	89fb      	ldrh	r3, [r7, #14]
 80067f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067f8:	81fb      	strh	r3, [r7, #14]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	441a      	add	r2, r3
 8006804:	89fb      	ldrh	r3, [r7, #14]
 8006806:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800680a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800680e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006816:	b29b      	uxth	r3, r3
 8006818:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	bc80      	pop	{r7}
 8006824:	4770      	bx	lr

08006826 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006826:	b480      	push	{r7}
 8006828:	b087      	sub	sp, #28
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	7b1b      	ldrb	r3, [r3, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	f040 809d 	bne.w	8006974 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	785b      	ldrb	r3, [r3, #1]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d04c      	beq.n	80068dc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	823b      	strh	r3, [r7, #16]
 8006850:	8a3b      	ldrh	r3, [r7, #16]
 8006852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006856:	2b00      	cmp	r3, #0
 8006858:	d01b      	beq.n	8006892 <USB_EPClearStall+0x6c>
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	b29b      	uxth	r3, r3
 8006868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800686c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006870:	81fb      	strh	r3, [r7, #14]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	441a      	add	r2, r3
 800687c:	89fb      	ldrh	r3, [r7, #14]
 800687e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800688a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800688e:	b29b      	uxth	r3, r3
 8006890:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	78db      	ldrb	r3, [r3, #3]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d06c      	beq.n	8006974 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068b0:	81bb      	strh	r3, [r7, #12]
 80068b2:	89bb      	ldrh	r3, [r7, #12]
 80068b4:	f083 0320 	eor.w	r3, r3, #32
 80068b8:	81bb      	strh	r3, [r7, #12]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	441a      	add	r2, r3
 80068c4:	89bb      	ldrh	r3, [r7, #12]
 80068c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	8013      	strh	r3, [r2, #0]
 80068da:	e04b      	b.n	8006974 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	82fb      	strh	r3, [r7, #22]
 80068ea:	8afb      	ldrh	r3, [r7, #22]
 80068ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d01b      	beq.n	800692c <USB_EPClearStall+0x106>
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	b29b      	uxth	r3, r3
 8006902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800690a:	82bb      	strh	r3, [r7, #20]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	441a      	add	r2, r3
 8006916:	8abb      	ldrh	r3, [r7, #20]
 8006918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800691c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006920:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006928:	b29b      	uxth	r3, r3
 800692a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	b29b      	uxth	r3, r3
 800693a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800693e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006942:	827b      	strh	r3, [r7, #18]
 8006944:	8a7b      	ldrh	r3, [r7, #18]
 8006946:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800694a:	827b      	strh	r3, [r7, #18]
 800694c:	8a7b      	ldrh	r3, [r7, #18]
 800694e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006952:	827b      	strh	r3, [r7, #18]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	441a      	add	r2, r3
 800695e:	8a7b      	ldrh	r3, [r7, #18]
 8006960:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006964:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800696c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006970:	b29b      	uxth	r3, r3
 8006972:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	371c      	adds	r7, #28
 800697a:	46bd      	mov	sp, r7
 800697c:	bc80      	pop	{r7}
 800697e:	4770      	bx	lr

08006980 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	460b      	mov	r3, r1
 800698a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800698c:	78fb      	ldrb	r3, [r7, #3]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d103      	bne.n	800699a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2280      	movs	r2, #128	; 0x80
 8006996:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bc80      	pop	{r7}
 80069a4:	4770      	bx	lr

080069a6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b083      	sub	sp, #12
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bc80      	pop	{r7}
 80069b8:	4770      	bx	lr

080069ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b083      	sub	sp, #12
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bc80      	pop	{r7}
 80069cc:	4770      	bx	lr

080069ce <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b085      	sub	sp, #20
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80069dc:	b29b      	uxth	r3, r3
 80069de:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80069e0:	68fb      	ldr	r3, [r7, #12]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bc80      	pop	{r7}
 80069ea:	4770      	bx	lr

080069ec <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bc80      	pop	{r7}
 8006a00:	4770      	bx	lr

08006a02 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b08d      	sub	sp, #52	; 0x34
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	60f8      	str	r0, [r7, #12]
 8006a0a:	60b9      	str	r1, [r7, #8]
 8006a0c:	4611      	mov	r1, r2
 8006a0e:	461a      	mov	r2, r3
 8006a10:	460b      	mov	r3, r1
 8006a12:	80fb      	strh	r3, [r7, #6]
 8006a14:	4613      	mov	r3, r2
 8006a16:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006a18:	88bb      	ldrh	r3, [r7, #4]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	085b      	lsrs	r3, r3, #1
 8006a1e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a28:	88fb      	ldrh	r3, [r7, #6]
 8006a2a:	005a      	lsls	r2, r3, #1
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a34:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a3a:	e01e      	b.n	8006a7a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a44:	3301      	adds	r3, #1
 8006a46:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	021b      	lsls	r3, r3, #8
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	461a      	mov	r2, r3
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a60:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a64:	3302      	adds	r3, #2
 8006a66:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6a:	3302      	adds	r3, #2
 8006a6c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	3301      	adds	r3, #1
 8006a72:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a76:	3b01      	subs	r3, #1
 8006a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1dd      	bne.n	8006a3c <USB_WritePMA+0x3a>
  }
}
 8006a80:	bf00      	nop
 8006a82:	bf00      	nop
 8006a84:	3734      	adds	r7, #52	; 0x34
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr

08006a8c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b08b      	sub	sp, #44	; 0x2c
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	4611      	mov	r1, r2
 8006a98:	461a      	mov	r2, r3
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	80fb      	strh	r3, [r7, #6]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006aa2:	88bb      	ldrh	r3, [r7, #4]
 8006aa4:	085b      	lsrs	r3, r3, #1
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ab2:	88fb      	ldrh	r3, [r7, #6]
 8006ab4:	005a      	lsls	r2, r3, #1
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006abe:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ac4:	e01b      	b.n	8006afe <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	3302      	adds	r3, #2
 8006ad2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	b2da      	uxtb	r2, r3
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	0a1b      	lsrs	r3, r3, #8
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	3301      	adds	r3, #1
 8006af0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	3302      	adds	r3, #2
 8006af6:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	3b01      	subs	r3, #1
 8006afc:	627b      	str	r3, [r7, #36]	; 0x24
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1e0      	bne.n	8006ac6 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006b04:	88bb      	ldrh	r3, [r7, #4]
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d007      	beq.n	8006b20 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	b2da      	uxtb	r2, r3
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	701a      	strb	r2, [r3, #0]
  }
}
 8006b20:	bf00      	nop
 8006b22:	372c      	adds	r7, #44	; 0x2c
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bc80      	pop	{r7}
 8006b28:	4770      	bx	lr
	...

08006b2c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006b30:	4904      	ldr	r1, [pc, #16]	; (8006b44 <MX_FATFS_Init+0x18>)
 8006b32:	4805      	ldr	r0, [pc, #20]	; (8006b48 <MX_FATFS_Init+0x1c>)
 8006b34:	f003 f832 	bl	8009b9c <FATFS_LinkDriver>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	4b03      	ldr	r3, [pc, #12]	; (8006b4c <MX_FATFS_Init+0x20>)
 8006b3e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006b40:	bf00      	nop
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	200004b8 	.word	0x200004b8
 8006b48:	2000000c 	.word	0x2000000c
 8006b4c:	200004bc 	.word	0x200004bc

08006b50 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	4603      	mov	r3, r0
 8006b58:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8006b5a:	79fb      	ldrb	r3, [r7, #7]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f000 f9d9 	bl	8006f14 <USER_SPI_initialize>
 8006b62:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	4603      	mov	r3, r0
 8006b74:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 8006b76:	79fb      	ldrb	r3, [r7, #7]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f000 fab7 	bl	80070ec <USER_SPI_status>
 8006b7e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60b9      	str	r1, [r7, #8]
 8006b90:	607a      	str	r2, [r7, #4]
 8006b92:	603b      	str	r3, [r7, #0]
 8006b94:	4603      	mov	r3, r0
 8006b96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8006b98:	7bf8      	ldrb	r0, [r7, #15]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	68b9      	ldr	r1, [r7, #8]
 8006ba0:	f000 fab8 	bl	8007114 <USER_SPI_read>
 8006ba4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
 8006bb8:	603b      	str	r3, [r7, #0]
 8006bba:	4603      	mov	r3, r0
 8006bbc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8006bbe:	7bf8      	ldrb	r0, [r7, #15]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	68b9      	ldr	r1, [r7, #8]
 8006bc6:	f000 fb0b 	bl	80071e0 <USER_SPI_write>
 8006bca:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	4603      	mov	r3, r0
 8006bdc:	603a      	str	r2, [r7, #0]
 8006bde:	71fb      	strb	r3, [r7, #7]
 8006be0:	460b      	mov	r3, r1
 8006be2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8006be4:	79b9      	ldrb	r1, [r7, #6]
 8006be6:	79fb      	ldrb	r3, [r7, #7]
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 fb74 	bl	80072d8 <USER_SPI_ioctl>
 8006bf0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
	...

08006bfc <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006c04:	f7f9 fe62 	bl	80008cc <HAL_GetTick>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	4a04      	ldr	r2, [pc, #16]	; (8006c1c <SPI_Timer_On+0x20>)
 8006c0c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8006c0e:	4a04      	ldr	r2, [pc, #16]	; (8006c20 <SPI_Timer_On+0x24>)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6013      	str	r3, [r2, #0]
}
 8006c14:	bf00      	nop
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	2000091c 	.word	0x2000091c
 8006c20:	20000920 	.word	0x20000920

08006c24 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006c28:	f7f9 fe50 	bl	80008cc <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	4b06      	ldr	r3, [pc, #24]	; (8006c48 <SPI_Timer_Status+0x24>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	1ad2      	subs	r2, r2, r3
 8006c34:	4b05      	ldr	r3, [pc, #20]	; (8006c4c <SPI_Timer_Status+0x28>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	bf34      	ite	cc
 8006c3c:	2301      	movcc	r3, #1
 8006c3e:	2300      	movcs	r3, #0
 8006c40:	b2db      	uxtb	r3, r3
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	2000091c 	.word	0x2000091c
 8006c4c:	20000920 	.word	0x20000920

08006c50 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af02      	add	r7, sp, #8
 8006c56:	4603      	mov	r3, r0
 8006c58:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006c5a:	f107 020f 	add.w	r2, r7, #15
 8006c5e:	1df9      	adds	r1, r7, #7
 8006c60:	2332      	movs	r3, #50	; 0x32
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	2301      	movs	r3, #1
 8006c66:	4804      	ldr	r0, [pc, #16]	; (8006c78 <xchg_spi+0x28>)
 8006c68:	f7fd f99a 	bl	8003fa0 <HAL_SPI_TransmitReceive>
    return rxDat;
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	200003d4 	.word	0x200003d4

08006c7c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006c7c:	b590      	push	{r4, r7, lr}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8006c86:	2300      	movs	r3, #0
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	e00a      	b.n	8006ca2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	18d4      	adds	r4, r2, r3
 8006c92:	20ff      	movs	r0, #255	; 0xff
 8006c94:	f7ff ffdc 	bl	8006c50 <xchg_spi>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	60fb      	str	r3, [r7, #12]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d3f0      	bcc.n	8006c8c <rcvr_spi_multi+0x10>
	}
}
 8006caa:	bf00      	nop
 8006cac:	bf00      	nop
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd90      	pop	{r4, r7, pc}

08006cb4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	60fb      	str	r3, [r7, #12]
 8006cc2:	e009      	b.n	8006cd8 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	4413      	add	r3, r2
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7ff ffbf 	bl	8006c50 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	60fb      	str	r3, [r7, #12]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d3f1      	bcc.n	8006cc4 <xmit_spi_multi+0x10>
	}
}
 8006ce0:	bf00      	nop
 8006ce2:	bf00      	nop
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b086      	sub	sp, #24
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006cf2:	f7f9 fdeb 	bl	80008cc <HAL_GetTick>
 8006cf6:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006cfc:	20ff      	movs	r0, #255	; 0xff
 8006cfe:	f7ff ffa7 	bl	8006c50 <xchg_spi>
 8006d02:	4603      	mov	r3, r0
 8006d04:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006d06:	7bfb      	ldrb	r3, [r7, #15]
 8006d08:	2bff      	cmp	r3, #255	; 0xff
 8006d0a:	d007      	beq.n	8006d1c <wait_ready+0x32>
 8006d0c:	f7f9 fdde 	bl	80008cc <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d8ef      	bhi.n	8006cfc <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
 8006d1e:	2bff      	cmp	r3, #255	; 0xff
 8006d20:	bf0c      	ite	eq
 8006d22:	2301      	moveq	r3, #1
 8006d24:	2300      	movne	r3, #0
 8006d26:	b2db      	uxtb	r3, r3
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3718      	adds	r7, #24
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006d34:	2201      	movs	r2, #1
 8006d36:	2102      	movs	r1, #2
 8006d38:	4803      	ldr	r0, [pc, #12]	; (8006d48 <despiselect+0x18>)
 8006d3a:	f7fa fa75 	bl	8001228 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006d3e:	20ff      	movs	r0, #255	; 0xff
 8006d40:	f7ff ff86 	bl	8006c50 <xchg_spi>

}
 8006d44:	bf00      	nop
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	40010c00 	.word	0x40010c00

08006d4c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006d50:	2200      	movs	r2, #0
 8006d52:	2102      	movs	r1, #2
 8006d54:	4809      	ldr	r0, [pc, #36]	; (8006d7c <spiselect+0x30>)
 8006d56:	f7fa fa67 	bl	8001228 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006d5a:	20ff      	movs	r0, #255	; 0xff
 8006d5c:	f7ff ff78 	bl	8006c50 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006d60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006d64:	f7ff ffc1 	bl	8006cea <wait_ready>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <spiselect+0x26>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e002      	b.n	8006d78 <spiselect+0x2c>

	despiselect();
 8006d72:	f7ff ffdd 	bl	8006d30 <despiselect>
	return 0;	/* Timeout */
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	40010c00 	.word	0x40010c00

08006d80 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8006d8a:	20c8      	movs	r0, #200	; 0xc8
 8006d8c:	f7ff ff36 	bl	8006bfc <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006d90:	20ff      	movs	r0, #255	; 0xff
 8006d92:	f7ff ff5d 	bl	8006c50 <xchg_spi>
 8006d96:	4603      	mov	r3, r0
 8006d98:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8006d9a:	7bfb      	ldrb	r3, [r7, #15]
 8006d9c:	2bff      	cmp	r3, #255	; 0xff
 8006d9e:	d104      	bne.n	8006daa <rcvr_datablock+0x2a>
 8006da0:	f7ff ff40 	bl	8006c24 <SPI_Timer_Status>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1f2      	bne.n	8006d90 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8006daa:	7bfb      	ldrb	r3, [r7, #15]
 8006dac:	2bfe      	cmp	r3, #254	; 0xfe
 8006dae:	d001      	beq.n	8006db4 <rcvr_datablock+0x34>
 8006db0:	2300      	movs	r3, #0
 8006db2:	e00a      	b.n	8006dca <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006db4:	6839      	ldr	r1, [r7, #0]
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7ff ff60 	bl	8006c7c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006dbc:	20ff      	movs	r0, #255	; 0xff
 8006dbe:	f7ff ff47 	bl	8006c50 <xchg_spi>
 8006dc2:	20ff      	movs	r0, #255	; 0xff
 8006dc4:	f7ff ff44 	bl	8006c50 <xchg_spi>

	return 1;						/* Function succeeded */
 8006dc8:	2301      	movs	r3, #1
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b084      	sub	sp, #16
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	460b      	mov	r3, r1
 8006ddc:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006dde:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006de2:	f7ff ff82 	bl	8006cea <wait_ready>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <xmit_datablock+0x1e>
 8006dec:	2300      	movs	r3, #0
 8006dee:	e01e      	b.n	8006e2e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006df0:	78fb      	ldrb	r3, [r7, #3]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7ff ff2c 	bl	8006c50 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006df8:	78fb      	ldrb	r3, [r7, #3]
 8006dfa:	2bfd      	cmp	r3, #253	; 0xfd
 8006dfc:	d016      	beq.n	8006e2c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8006dfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7ff ff56 	bl	8006cb4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006e08:	20ff      	movs	r0, #255	; 0xff
 8006e0a:	f7ff ff21 	bl	8006c50 <xchg_spi>
 8006e0e:	20ff      	movs	r0, #255	; 0xff
 8006e10:	f7ff ff1e 	bl	8006c50 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006e14:	20ff      	movs	r0, #255	; 0xff
 8006e16:	f7ff ff1b 	bl	8006c50 <xchg_spi>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006e1e:	7bfb      	ldrb	r3, [r7, #15]
 8006e20:	f003 031f 	and.w	r3, r3, #31
 8006e24:	2b05      	cmp	r3, #5
 8006e26:	d001      	beq.n	8006e2c <xmit_datablock+0x5a>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	e000      	b.n	8006e2e <xmit_datablock+0x5c>
	}
	return 1;
 8006e2c:	2301      	movs	r3, #1
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b084      	sub	sp, #16
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	6039      	str	r1, [r7, #0]
 8006e40:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	da0e      	bge.n	8006e68 <send_cmd+0x32>
		cmd &= 0x7F;
 8006e4a:	79fb      	ldrb	r3, [r7, #7]
 8006e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e50:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8006e52:	2100      	movs	r1, #0
 8006e54:	2037      	movs	r0, #55	; 0x37
 8006e56:	f7ff ffee 	bl	8006e36 <send_cmd>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006e5e:	7bbb      	ldrb	r3, [r7, #14]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d901      	bls.n	8006e68 <send_cmd+0x32>
 8006e64:	7bbb      	ldrb	r3, [r7, #14]
 8006e66:	e051      	b.n	8006f0c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8006e68:	79fb      	ldrb	r3, [r7, #7]
 8006e6a:	2b0c      	cmp	r3, #12
 8006e6c:	d008      	beq.n	8006e80 <send_cmd+0x4a>
		despiselect();
 8006e6e:	f7ff ff5f 	bl	8006d30 <despiselect>
		if (!spiselect()) return 0xFF;
 8006e72:	f7ff ff6b 	bl	8006d4c <spiselect>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d101      	bne.n	8006e80 <send_cmd+0x4a>
 8006e7c:	23ff      	movs	r3, #255	; 0xff
 8006e7e:	e045      	b.n	8006f0c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006e80:	79fb      	ldrb	r3, [r7, #7]
 8006e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7ff fee1 	bl	8006c50 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	0e1b      	lsrs	r3, r3, #24
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7ff fedb 	bl	8006c50 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	0c1b      	lsrs	r3, r3, #16
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7ff fed5 	bl	8006c50 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	0a1b      	lsrs	r3, r3, #8
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7ff fecf 	bl	8006c50 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7ff feca 	bl	8006c50 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006ec0:	79fb      	ldrb	r3, [r7, #7]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <send_cmd+0x94>
 8006ec6:	2395      	movs	r3, #149	; 0x95
 8006ec8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006eca:	79fb      	ldrb	r3, [r7, #7]
 8006ecc:	2b08      	cmp	r3, #8
 8006ece:	d101      	bne.n	8006ed4 <send_cmd+0x9e>
 8006ed0:	2387      	movs	r3, #135	; 0x87
 8006ed2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7ff feba 	bl	8006c50 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006edc:	79fb      	ldrb	r3, [r7, #7]
 8006ede:	2b0c      	cmp	r3, #12
 8006ee0:	d102      	bne.n	8006ee8 <send_cmd+0xb2>
 8006ee2:	20ff      	movs	r0, #255	; 0xff
 8006ee4:	f7ff feb4 	bl	8006c50 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006ee8:	230a      	movs	r3, #10
 8006eea:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006eec:	20ff      	movs	r0, #255	; 0xff
 8006eee:	f7ff feaf 	bl	8006c50 <xchg_spi>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006ef6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	da05      	bge.n	8006f0a <send_cmd+0xd4>
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
 8006f00:	3b01      	subs	r3, #1
 8006f02:	73fb      	strb	r3, [r7, #15]
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1f0      	bne.n	8006eec <send_cmd+0xb6>

	return res;							/* Return received response */
 8006f0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006f14:	b590      	push	{r4, r7, lr}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006f1e:	79fb      	ldrb	r3, [r7, #7]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <USER_SPI_initialize+0x14>
 8006f24:	2301      	movs	r3, #1
 8006f26:	e0d6      	b.n	80070d6 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006f28:	4b6d      	ldr	r3, [pc, #436]	; (80070e0 <USER_SPI_initialize+0x1cc>)
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	f003 0302 	and.w	r3, r3, #2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d003      	beq.n	8006f3e <USER_SPI_initialize+0x2a>
 8006f36:	4b6a      	ldr	r3, [pc, #424]	; (80070e0 <USER_SPI_initialize+0x1cc>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	e0cb      	b.n	80070d6 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8006f3e:	4b69      	ldr	r3, [pc, #420]	; (80070e4 <USER_SPI_initialize+0x1d0>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006f48:	4b66      	ldr	r3, [pc, #408]	; (80070e4 <USER_SPI_initialize+0x1d0>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8006f50:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006f52:	230a      	movs	r3, #10
 8006f54:	73fb      	strb	r3, [r7, #15]
 8006f56:	e005      	b.n	8006f64 <USER_SPI_initialize+0x50>
 8006f58:	20ff      	movs	r0, #255	; 0xff
 8006f5a:	f7ff fe79 	bl	8006c50 <xchg_spi>
 8006f5e:	7bfb      	ldrb	r3, [r7, #15]
 8006f60:	3b01      	subs	r3, #1
 8006f62:	73fb      	strb	r3, [r7, #15]
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1f6      	bne.n	8006f58 <USER_SPI_initialize+0x44>

	ty = 0;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006f6e:	2100      	movs	r1, #0
 8006f70:	2000      	movs	r0, #0
 8006f72:	f7ff ff60 	bl	8006e36 <send_cmd>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	f040 808b 	bne.w	8007094 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006f7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006f82:	f7ff fe3b 	bl	8006bfc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006f86:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006f8a:	2008      	movs	r0, #8
 8006f8c:	f7ff ff53 	bl	8006e36 <send_cmd>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d151      	bne.n	800703a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006f96:	2300      	movs	r3, #0
 8006f98:	73fb      	strb	r3, [r7, #15]
 8006f9a:	e00d      	b.n	8006fb8 <USER_SPI_initialize+0xa4>
 8006f9c:	7bfc      	ldrb	r4, [r7, #15]
 8006f9e:	20ff      	movs	r0, #255	; 0xff
 8006fa0:	f7ff fe56 	bl	8006c50 <xchg_spi>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f107 0310 	add.w	r3, r7, #16
 8006fac:	4423      	add	r3, r4
 8006fae:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	73fb      	strb	r3, [r7, #15]
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
 8006fba:	2b03      	cmp	r3, #3
 8006fbc:	d9ee      	bls.n	8006f9c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006fbe:	7abb      	ldrb	r3, [r7, #10]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d167      	bne.n	8007094 <USER_SPI_initialize+0x180>
 8006fc4:	7afb      	ldrb	r3, [r7, #11]
 8006fc6:	2baa      	cmp	r3, #170	; 0xaa
 8006fc8:	d164      	bne.n	8007094 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006fca:	bf00      	nop
 8006fcc:	f7ff fe2a 	bl	8006c24 <SPI_Timer_Status>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d007      	beq.n	8006fe6 <USER_SPI_initialize+0xd2>
 8006fd6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006fda:	20a9      	movs	r0, #169	; 0xa9
 8006fdc:	f7ff ff2b 	bl	8006e36 <send_cmd>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1f2      	bne.n	8006fcc <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006fe6:	f7ff fe1d 	bl	8006c24 <SPI_Timer_Status>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d051      	beq.n	8007094 <USER_SPI_initialize+0x180>
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	203a      	movs	r0, #58	; 0x3a
 8006ff4:	f7ff ff1f 	bl	8006e36 <send_cmd>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d14a      	bne.n	8007094 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006ffe:	2300      	movs	r3, #0
 8007000:	73fb      	strb	r3, [r7, #15]
 8007002:	e00d      	b.n	8007020 <USER_SPI_initialize+0x10c>
 8007004:	7bfc      	ldrb	r4, [r7, #15]
 8007006:	20ff      	movs	r0, #255	; 0xff
 8007008:	f7ff fe22 	bl	8006c50 <xchg_spi>
 800700c:	4603      	mov	r3, r0
 800700e:	461a      	mov	r2, r3
 8007010:	f107 0310 	add.w	r3, r7, #16
 8007014:	4423      	add	r3, r4
 8007016:	f803 2c08 	strb.w	r2, [r3, #-8]
 800701a:	7bfb      	ldrb	r3, [r7, #15]
 800701c:	3301      	adds	r3, #1
 800701e:	73fb      	strb	r3, [r7, #15]
 8007020:	7bfb      	ldrb	r3, [r7, #15]
 8007022:	2b03      	cmp	r3, #3
 8007024:	d9ee      	bls.n	8007004 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8007026:	7a3b      	ldrb	r3, [r7, #8]
 8007028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702c:	2b00      	cmp	r3, #0
 800702e:	d001      	beq.n	8007034 <USER_SPI_initialize+0x120>
 8007030:	230c      	movs	r3, #12
 8007032:	e000      	b.n	8007036 <USER_SPI_initialize+0x122>
 8007034:	2304      	movs	r3, #4
 8007036:	737b      	strb	r3, [r7, #13]
 8007038:	e02c      	b.n	8007094 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800703a:	2100      	movs	r1, #0
 800703c:	20a9      	movs	r0, #169	; 0xa9
 800703e:	f7ff fefa 	bl	8006e36 <send_cmd>
 8007042:	4603      	mov	r3, r0
 8007044:	2b01      	cmp	r3, #1
 8007046:	d804      	bhi.n	8007052 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007048:	2302      	movs	r3, #2
 800704a:	737b      	strb	r3, [r7, #13]
 800704c:	23a9      	movs	r3, #169	; 0xa9
 800704e:	73bb      	strb	r3, [r7, #14]
 8007050:	e003      	b.n	800705a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8007052:	2301      	movs	r3, #1
 8007054:	737b      	strb	r3, [r7, #13]
 8007056:	2301      	movs	r3, #1
 8007058:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800705a:	bf00      	nop
 800705c:	f7ff fde2 	bl	8006c24 <SPI_Timer_Status>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d007      	beq.n	8007076 <USER_SPI_initialize+0x162>
 8007066:	7bbb      	ldrb	r3, [r7, #14]
 8007068:	2100      	movs	r1, #0
 800706a:	4618      	mov	r0, r3
 800706c:	f7ff fee3 	bl	8006e36 <send_cmd>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1f2      	bne.n	800705c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8007076:	f7ff fdd5 	bl	8006c24 <SPI_Timer_Status>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d007      	beq.n	8007090 <USER_SPI_initialize+0x17c>
 8007080:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007084:	2010      	movs	r0, #16
 8007086:	f7ff fed6 	bl	8006e36 <send_cmd>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d001      	beq.n	8007094 <USER_SPI_initialize+0x180>
				ty = 0;
 8007090:	2300      	movs	r3, #0
 8007092:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8007094:	4a14      	ldr	r2, [pc, #80]	; (80070e8 <USER_SPI_initialize+0x1d4>)
 8007096:	7b7b      	ldrb	r3, [r7, #13]
 8007098:	7013      	strb	r3, [r2, #0]
	despiselect();
 800709a:	f7ff fe49 	bl	8006d30 <despiselect>

	if (ty) {			/* OK */
 800709e:	7b7b      	ldrb	r3, [r7, #13]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d012      	beq.n	80070ca <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80070a4:	4b0f      	ldr	r3, [pc, #60]	; (80070e4 <USER_SPI_initialize+0x1d0>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80070ae:	4b0d      	ldr	r3, [pc, #52]	; (80070e4 <USER_SPI_initialize+0x1d0>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 0210 	orr.w	r2, r2, #16
 80070b6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80070b8:	4b09      	ldr	r3, [pc, #36]	; (80070e0 <USER_SPI_initialize+0x1cc>)
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	f023 0301 	bic.w	r3, r3, #1
 80070c2:	b2da      	uxtb	r2, r3
 80070c4:	4b06      	ldr	r3, [pc, #24]	; (80070e0 <USER_SPI_initialize+0x1cc>)
 80070c6:	701a      	strb	r2, [r3, #0]
 80070c8:	e002      	b.n	80070d0 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80070ca:	4b05      	ldr	r3, [pc, #20]	; (80070e0 <USER_SPI_initialize+0x1cc>)
 80070cc:	2201      	movs	r2, #1
 80070ce:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80070d0:	4b03      	ldr	r3, [pc, #12]	; (80070e0 <USER_SPI_initialize+0x1cc>)
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	b2db      	uxtb	r3, r3
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3714      	adds	r7, #20
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd90      	pop	{r4, r7, pc}
 80070de:	bf00      	nop
 80070e0:	20000020 	.word	0x20000020
 80070e4:	200003d4 	.word	0x200003d4
 80070e8:	20000154 	.word	0x20000154

080070ec <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	4603      	mov	r3, r0
 80070f4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80070f6:	79fb      	ldrb	r3, [r7, #7]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <USER_SPI_status+0x14>
 80070fc:	2301      	movs	r3, #1
 80070fe:	e002      	b.n	8007106 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8007100:	4b03      	ldr	r3, [pc, #12]	; (8007110 <USER_SPI_status+0x24>)
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	b2db      	uxtb	r3, r3
}
 8007106:	4618      	mov	r0, r3
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	bc80      	pop	{r7}
 800710e:	4770      	bx	lr
 8007110:	20000020 	.word	0x20000020

08007114 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	60b9      	str	r1, [r7, #8]
 800711c:	607a      	str	r2, [r7, #4]
 800711e:	603b      	str	r3, [r7, #0]
 8007120:	4603      	mov	r3, r0
 8007122:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007124:	7bfb      	ldrb	r3, [r7, #15]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d102      	bne.n	8007130 <USER_SPI_read+0x1c>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <USER_SPI_read+0x20>
 8007130:	2304      	movs	r3, #4
 8007132:	e04d      	b.n	80071d0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007134:	4b28      	ldr	r3, [pc, #160]	; (80071d8 <USER_SPI_read+0xc4>)
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	b2db      	uxtb	r3, r3
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <USER_SPI_read+0x32>
 8007142:	2303      	movs	r3, #3
 8007144:	e044      	b.n	80071d0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007146:	4b25      	ldr	r3, [pc, #148]	; (80071dc <USER_SPI_read+0xc8>)
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	f003 0308 	and.w	r3, r3, #8
 800714e:	2b00      	cmp	r3, #0
 8007150:	d102      	bne.n	8007158 <USER_SPI_read+0x44>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	025b      	lsls	r3, r3, #9
 8007156:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d111      	bne.n	8007182 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800715e:	6879      	ldr	r1, [r7, #4]
 8007160:	2011      	movs	r0, #17
 8007162:	f7ff fe68 	bl	8006e36 <send_cmd>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d129      	bne.n	80071c0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800716c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007170:	68b8      	ldr	r0, [r7, #8]
 8007172:	f7ff fe05 	bl	8006d80 <rcvr_datablock>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d021      	beq.n	80071c0 <USER_SPI_read+0xac>
			count = 0;
 800717c:	2300      	movs	r3, #0
 800717e:	603b      	str	r3, [r7, #0]
 8007180:	e01e      	b.n	80071c0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007182:	6879      	ldr	r1, [r7, #4]
 8007184:	2012      	movs	r0, #18
 8007186:	f7ff fe56 	bl	8006e36 <send_cmd>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d117      	bne.n	80071c0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007190:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007194:	68b8      	ldr	r0, [r7, #8]
 8007196:	f7ff fdf3 	bl	8006d80 <rcvr_datablock>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00a      	beq.n	80071b6 <USER_SPI_read+0xa2>
				buff += 512;
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80071a6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	3b01      	subs	r3, #1
 80071ac:	603b      	str	r3, [r7, #0]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1ed      	bne.n	8007190 <USER_SPI_read+0x7c>
 80071b4:	e000      	b.n	80071b8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80071b6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80071b8:	2100      	movs	r1, #0
 80071ba:	200c      	movs	r0, #12
 80071bc:	f7ff fe3b 	bl	8006e36 <send_cmd>
		}
	}
	despiselect();
 80071c0:	f7ff fdb6 	bl	8006d30 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	bf14      	ite	ne
 80071ca:	2301      	movne	r3, #1
 80071cc:	2300      	moveq	r3, #0
 80071ce:	b2db      	uxtb	r3, r3
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	20000020 	.word	0x20000020
 80071dc:	20000154 	.word	0x20000154

080071e0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60b9      	str	r1, [r7, #8]
 80071e8:	607a      	str	r2, [r7, #4]
 80071ea:	603b      	str	r3, [r7, #0]
 80071ec:	4603      	mov	r3, r0
 80071ee:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80071f0:	7bfb      	ldrb	r3, [r7, #15]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d102      	bne.n	80071fc <USER_SPI_write+0x1c>
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <USER_SPI_write+0x20>
 80071fc:	2304      	movs	r3, #4
 80071fe:	e063      	b.n	80072c8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007200:	4b33      	ldr	r3, [pc, #204]	; (80072d0 <USER_SPI_write+0xf0>)
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	b2db      	uxtb	r3, r3
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <USER_SPI_write+0x32>
 800720e:	2303      	movs	r3, #3
 8007210:	e05a      	b.n	80072c8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8007212:	4b2f      	ldr	r3, [pc, #188]	; (80072d0 <USER_SPI_write+0xf0>)
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	b2db      	uxtb	r3, r3
 8007218:	f003 0304 	and.w	r3, r3, #4
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <USER_SPI_write+0x44>
 8007220:	2302      	movs	r3, #2
 8007222:	e051      	b.n	80072c8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007224:	4b2b      	ldr	r3, [pc, #172]	; (80072d4 <USER_SPI_write+0xf4>)
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	f003 0308 	and.w	r3, r3, #8
 800722c:	2b00      	cmp	r3, #0
 800722e:	d102      	bne.n	8007236 <USER_SPI_write+0x56>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	025b      	lsls	r3, r3, #9
 8007234:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d110      	bne.n	800725e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800723c:	6879      	ldr	r1, [r7, #4]
 800723e:	2018      	movs	r0, #24
 8007240:	f7ff fdf9 	bl	8006e36 <send_cmd>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d136      	bne.n	80072b8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800724a:	21fe      	movs	r1, #254	; 0xfe
 800724c:	68b8      	ldr	r0, [r7, #8]
 800724e:	f7ff fdc0 	bl	8006dd2 <xmit_datablock>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d02f      	beq.n	80072b8 <USER_SPI_write+0xd8>
			count = 0;
 8007258:	2300      	movs	r3, #0
 800725a:	603b      	str	r3, [r7, #0]
 800725c:	e02c      	b.n	80072b8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800725e:	4b1d      	ldr	r3, [pc, #116]	; (80072d4 <USER_SPI_write+0xf4>)
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	f003 0306 	and.w	r3, r3, #6
 8007266:	2b00      	cmp	r3, #0
 8007268:	d003      	beq.n	8007272 <USER_SPI_write+0x92>
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	2097      	movs	r0, #151	; 0x97
 800726e:	f7ff fde2 	bl	8006e36 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007272:	6879      	ldr	r1, [r7, #4]
 8007274:	2019      	movs	r0, #25
 8007276:	f7ff fdde 	bl	8006e36 <send_cmd>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d11b      	bne.n	80072b8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007280:	21fc      	movs	r1, #252	; 0xfc
 8007282:	68b8      	ldr	r0, [r7, #8]
 8007284:	f7ff fda5 	bl	8006dd2 <xmit_datablock>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00a      	beq.n	80072a4 <USER_SPI_write+0xc4>
				buff += 512;
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007294:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	3b01      	subs	r3, #1
 800729a:	603b      	str	r3, [r7, #0]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1ee      	bne.n	8007280 <USER_SPI_write+0xa0>
 80072a2:	e000      	b.n	80072a6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80072a4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80072a6:	21fd      	movs	r1, #253	; 0xfd
 80072a8:	2000      	movs	r0, #0
 80072aa:	f7ff fd92 	bl	8006dd2 <xmit_datablock>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <USER_SPI_write+0xd8>
 80072b4:	2301      	movs	r3, #1
 80072b6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80072b8:	f7ff fd3a 	bl	8006d30 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	bf14      	ite	ne
 80072c2:	2301      	movne	r3, #1
 80072c4:	2300      	moveq	r3, #0
 80072c6:	b2db      	uxtb	r3, r3
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	20000020 	.word	0x20000020
 80072d4:	20000154 	.word	0x20000154

080072d8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b08c      	sub	sp, #48	; 0x30
 80072dc:	af00      	add	r7, sp, #0
 80072de:	4603      	mov	r3, r0
 80072e0:	603a      	str	r2, [r7, #0]
 80072e2:	71fb      	strb	r3, [r7, #7]
 80072e4:	460b      	mov	r3, r1
 80072e6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80072e8:	79fb      	ldrb	r3, [r7, #7]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <USER_SPI_ioctl+0x1a>
 80072ee:	2304      	movs	r3, #4
 80072f0:	e15a      	b.n	80075a8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80072f2:	4baf      	ldr	r3, [pc, #700]	; (80075b0 <USER_SPI_ioctl+0x2d8>)
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	f003 0301 	and.w	r3, r3, #1
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d001      	beq.n	8007304 <USER_SPI_ioctl+0x2c>
 8007300:	2303      	movs	r3, #3
 8007302:	e151      	b.n	80075a8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800730a:	79bb      	ldrb	r3, [r7, #6]
 800730c:	2b04      	cmp	r3, #4
 800730e:	f200 8136 	bhi.w	800757e <USER_SPI_ioctl+0x2a6>
 8007312:	a201      	add	r2, pc, #4	; (adr r2, 8007318 <USER_SPI_ioctl+0x40>)
 8007314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007318:	0800732d 	.word	0x0800732d
 800731c:	08007341 	.word	0x08007341
 8007320:	0800757f 	.word	0x0800757f
 8007324:	080073ed 	.word	0x080073ed
 8007328:	080074e3 	.word	0x080074e3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800732c:	f7ff fd0e 	bl	8006d4c <spiselect>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 8127 	beq.w	8007586 <USER_SPI_ioctl+0x2ae>
 8007338:	2300      	movs	r3, #0
 800733a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800733e:	e122      	b.n	8007586 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007340:	2100      	movs	r1, #0
 8007342:	2009      	movs	r0, #9
 8007344:	f7ff fd77 	bl	8006e36 <send_cmd>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	f040 811d 	bne.w	800758a <USER_SPI_ioctl+0x2b2>
 8007350:	f107 030c 	add.w	r3, r7, #12
 8007354:	2110      	movs	r1, #16
 8007356:	4618      	mov	r0, r3
 8007358:	f7ff fd12 	bl	8006d80 <rcvr_datablock>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 8113 	beq.w	800758a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007364:	7b3b      	ldrb	r3, [r7, #12]
 8007366:	099b      	lsrs	r3, r3, #6
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b01      	cmp	r3, #1
 800736c:	d111      	bne.n	8007392 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800736e:	7d7b      	ldrb	r3, [r7, #21]
 8007370:	461a      	mov	r2, r3
 8007372:	7d3b      	ldrb	r3, [r7, #20]
 8007374:	021b      	lsls	r3, r3, #8
 8007376:	4413      	add	r3, r2
 8007378:	461a      	mov	r2, r3
 800737a:	7cfb      	ldrb	r3, [r7, #19]
 800737c:	041b      	lsls	r3, r3, #16
 800737e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8007382:	4413      	add	r3, r2
 8007384:	3301      	adds	r3, #1
 8007386:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	029a      	lsls	r2, r3, #10
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	601a      	str	r2, [r3, #0]
 8007390:	e028      	b.n	80073e4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007392:	7c7b      	ldrb	r3, [r7, #17]
 8007394:	f003 030f 	and.w	r3, r3, #15
 8007398:	b2da      	uxtb	r2, r3
 800739a:	7dbb      	ldrb	r3, [r7, #22]
 800739c:	09db      	lsrs	r3, r3, #7
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	4413      	add	r3, r2
 80073a2:	b2da      	uxtb	r2, r3
 80073a4:	7d7b      	ldrb	r3, [r7, #21]
 80073a6:	005b      	lsls	r3, r3, #1
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	f003 0306 	and.w	r3, r3, #6
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	4413      	add	r3, r2
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	3302      	adds	r3, #2
 80073b6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80073ba:	7d3b      	ldrb	r3, [r7, #20]
 80073bc:	099b      	lsrs	r3, r3, #6
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	461a      	mov	r2, r3
 80073c2:	7cfb      	ldrb	r3, [r7, #19]
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	441a      	add	r2, r3
 80073c8:	7cbb      	ldrb	r3, [r7, #18]
 80073ca:	029b      	lsls	r3, r3, #10
 80073cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80073d0:	4413      	add	r3, r2
 80073d2:	3301      	adds	r3, #1
 80073d4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80073d6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80073da:	3b09      	subs	r3, #9
 80073dc:	69fa      	ldr	r2, [r7, #28]
 80073de:	409a      	lsls	r2, r3
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80073e4:	2300      	movs	r3, #0
 80073e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80073ea:	e0ce      	b.n	800758a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80073ec:	4b71      	ldr	r3, [pc, #452]	; (80075b4 <USER_SPI_ioctl+0x2dc>)
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	f003 0304 	and.w	r3, r3, #4
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d031      	beq.n	800745c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80073f8:	2100      	movs	r1, #0
 80073fa:	208d      	movs	r0, #141	; 0x8d
 80073fc:	f7ff fd1b 	bl	8006e36 <send_cmd>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	f040 80c3 	bne.w	800758e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8007408:	20ff      	movs	r0, #255	; 0xff
 800740a:	f7ff fc21 	bl	8006c50 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800740e:	f107 030c 	add.w	r3, r7, #12
 8007412:	2110      	movs	r1, #16
 8007414:	4618      	mov	r0, r3
 8007416:	f7ff fcb3 	bl	8006d80 <rcvr_datablock>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 80b6 	beq.w	800758e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8007422:	2330      	movs	r3, #48	; 0x30
 8007424:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007428:	e007      	b.n	800743a <USER_SPI_ioctl+0x162>
 800742a:	20ff      	movs	r0, #255	; 0xff
 800742c:	f7ff fc10 	bl	8006c50 <xchg_spi>
 8007430:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007434:	3b01      	subs	r3, #1
 8007436:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800743a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1f3      	bne.n	800742a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8007442:	7dbb      	ldrb	r3, [r7, #22]
 8007444:	091b      	lsrs	r3, r3, #4
 8007446:	b2db      	uxtb	r3, r3
 8007448:	461a      	mov	r2, r3
 800744a:	2310      	movs	r3, #16
 800744c:	fa03 f202 	lsl.w	r2, r3, r2
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007454:	2300      	movs	r3, #0
 8007456:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800745a:	e098      	b.n	800758e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800745c:	2100      	movs	r1, #0
 800745e:	2009      	movs	r0, #9
 8007460:	f7ff fce9 	bl	8006e36 <send_cmd>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	f040 8091 	bne.w	800758e <USER_SPI_ioctl+0x2b6>
 800746c:	f107 030c 	add.w	r3, r7, #12
 8007470:	2110      	movs	r1, #16
 8007472:	4618      	mov	r0, r3
 8007474:	f7ff fc84 	bl	8006d80 <rcvr_datablock>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 8087 	beq.w	800758e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007480:	4b4c      	ldr	r3, [pc, #304]	; (80075b4 <USER_SPI_ioctl+0x2dc>)
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d012      	beq.n	80074b2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800748c:	7dbb      	ldrb	r3, [r7, #22]
 800748e:	005b      	lsls	r3, r3, #1
 8007490:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007494:	7dfa      	ldrb	r2, [r7, #23]
 8007496:	09d2      	lsrs	r2, r2, #7
 8007498:	b2d2      	uxtb	r2, r2
 800749a:	4413      	add	r3, r2
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	7e7b      	ldrb	r3, [r7, #25]
 80074a0:	099b      	lsrs	r3, r3, #6
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	3b01      	subs	r3, #1
 80074a6:	fa02 f303 	lsl.w	r3, r2, r3
 80074aa:	461a      	mov	r2, r3
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	601a      	str	r2, [r3, #0]
 80074b0:	e013      	b.n	80074da <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80074b2:	7dbb      	ldrb	r3, [r7, #22]
 80074b4:	109b      	asrs	r3, r3, #2
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	f003 031f 	and.w	r3, r3, #31
 80074bc:	3301      	adds	r3, #1
 80074be:	7dfa      	ldrb	r2, [r7, #23]
 80074c0:	00d2      	lsls	r2, r2, #3
 80074c2:	f002 0218 	and.w	r2, r2, #24
 80074c6:	7df9      	ldrb	r1, [r7, #23]
 80074c8:	0949      	lsrs	r1, r1, #5
 80074ca:	b2c9      	uxtb	r1, r1
 80074cc:	440a      	add	r2, r1
 80074ce:	3201      	adds	r2, #1
 80074d0:	fb02 f303 	mul.w	r3, r2, r3
 80074d4:	461a      	mov	r2, r3
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80074e0:	e055      	b.n	800758e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80074e2:	4b34      	ldr	r3, [pc, #208]	; (80075b4 <USER_SPI_ioctl+0x2dc>)
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	f003 0306 	and.w	r3, r3, #6
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d051      	beq.n	8007592 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80074ee:	f107 020c 	add.w	r2, r7, #12
 80074f2:	79fb      	ldrb	r3, [r7, #7]
 80074f4:	210b      	movs	r1, #11
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7ff feee 	bl	80072d8 <USER_SPI_ioctl>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d149      	bne.n	8007596 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007502:	7b3b      	ldrb	r3, [r7, #12]
 8007504:	099b      	lsrs	r3, r3, #6
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b00      	cmp	r3, #0
 800750a:	d104      	bne.n	8007516 <USER_SPI_ioctl+0x23e>
 800750c:	7dbb      	ldrb	r3, [r7, #22]
 800750e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007512:	2b00      	cmp	r3, #0
 8007514:	d041      	beq.n	800759a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	623b      	str	r3, [r7, #32]
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007520:	6a3b      	ldr	r3, [r7, #32]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8007526:	4b23      	ldr	r3, [pc, #140]	; (80075b4 <USER_SPI_ioctl+0x2dc>)
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	f003 0308 	and.w	r3, r3, #8
 800752e:	2b00      	cmp	r3, #0
 8007530:	d105      	bne.n	800753e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8007532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007534:	025b      	lsls	r3, r3, #9
 8007536:	62bb      	str	r3, [r7, #40]	; 0x28
 8007538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753a:	025b      	lsls	r3, r3, #9
 800753c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800753e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007540:	2020      	movs	r0, #32
 8007542:	f7ff fc78 	bl	8006e36 <send_cmd>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d128      	bne.n	800759e <USER_SPI_ioctl+0x2c6>
 800754c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800754e:	2021      	movs	r0, #33	; 0x21
 8007550:	f7ff fc71 	bl	8006e36 <send_cmd>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d121      	bne.n	800759e <USER_SPI_ioctl+0x2c6>
 800755a:	2100      	movs	r1, #0
 800755c:	2026      	movs	r0, #38	; 0x26
 800755e:	f7ff fc6a 	bl	8006e36 <send_cmd>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d11a      	bne.n	800759e <USER_SPI_ioctl+0x2c6>
 8007568:	f247 5030 	movw	r0, #30000	; 0x7530
 800756c:	f7ff fbbd 	bl	8006cea <wait_ready>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d013      	beq.n	800759e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007576:	2300      	movs	r3, #0
 8007578:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800757c:	e00f      	b.n	800759e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800757e:	2304      	movs	r3, #4
 8007580:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007584:	e00c      	b.n	80075a0 <USER_SPI_ioctl+0x2c8>
		break;
 8007586:	bf00      	nop
 8007588:	e00a      	b.n	80075a0 <USER_SPI_ioctl+0x2c8>
		break;
 800758a:	bf00      	nop
 800758c:	e008      	b.n	80075a0 <USER_SPI_ioctl+0x2c8>
		break;
 800758e:	bf00      	nop
 8007590:	e006      	b.n	80075a0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007592:	bf00      	nop
 8007594:	e004      	b.n	80075a0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007596:	bf00      	nop
 8007598:	e002      	b.n	80075a0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800759a:	bf00      	nop
 800759c:	e000      	b.n	80075a0 <USER_SPI_ioctl+0x2c8>
		break;
 800759e:	bf00      	nop
	}

	despiselect();
 80075a0:	f7ff fbc6 	bl	8006d30 <despiselect>

	return res;
 80075a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3730      	adds	r7, #48	; 0x30
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	20000020 	.word	0x20000020
 80075b4:	20000154 	.word	0x20000154

080075b8 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	460b      	mov	r3, r1
 80075c2:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	7c1b      	ldrb	r3, [r3, #16]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d115      	bne.n	80075f8 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80075cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075d0:	2202      	movs	r2, #2
 80075d2:	2101      	movs	r1, #1
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f002 fdba 	bl	800a14e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80075e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075e6:	2202      	movs	r2, #2
 80075e8:	2181      	movs	r1, #129	; 0x81
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f002 fdaf 	bl	800a14e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80075f6:	e012      	b.n	800761e <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80075f8:	2340      	movs	r3, #64	; 0x40
 80075fa:	2202      	movs	r2, #2
 80075fc:	2101      	movs	r1, #1
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f002 fda5 	bl	800a14e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800760c:	2340      	movs	r3, #64	; 0x40
 800760e:	2202      	movs	r2, #2
 8007610:	2181      	movs	r1, #129	; 0x81
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f002 fd9b 	bl	800a14e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800761e:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8007622:	f002 fedb 	bl	800a3dc <USBD_static_malloc>
 8007626:	4602      	mov	r2, r0
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 8007638:	2302      	movs	r3, #2
 800763a:	e003      	b.n	8007644 <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f9d9 	bl	80079f4 <MSC_BOT_Init>

  return USBD_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	460b      	mov	r3, r1
 8007656:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8007658:	2101      	movs	r1, #1
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f002 fd9d 	bl	800a19a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8007668:	2181      	movs	r1, #129	; 0x81
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f002 fd95 	bl	800a19a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fa06 	bl	8007a88 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007682:	2b00      	cmp	r3, #0
 8007684:	d009      	beq.n	800769a <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800768c:	4618      	mov	r0, r3
 800768e:	f002 feb1 	bl	800a3f4 <USBD_static_free>
    pdev->pClassData  = NULL;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b086      	sub	sp, #24
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076b4:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80076ba:	2300      	movs	r3, #0
 80076bc:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d04d      	beq.n	8007766 <USBD_MSC_Setup+0xc2>
 80076ca:	2b20      	cmp	r3, #32
 80076cc:	f040 8113 	bne.w	80078f6 <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	785b      	ldrb	r3, [r3, #1]
 80076d4:	2bfe      	cmp	r3, #254	; 0xfe
 80076d6:	d002      	beq.n	80076de <USBD_MSC_Setup+0x3a>
 80076d8:	2bff      	cmp	r3, #255	; 0xff
 80076da:	d024      	beq.n	8007726 <USBD_MSC_Setup+0x82>
 80076dc:	e03b      	b.n	8007756 <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	885b      	ldrh	r3, [r3, #2]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d118      	bne.n	8007718 <USBD_MSC_Setup+0x74>
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	88db      	ldrh	r3, [r3, #6]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d114      	bne.n	8007718 <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	da0f      	bge.n	8007718 <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	4798      	blx	r3
 8007702:	4603      	mov	r3, r0
 8007704:	461a      	mov	r2, r3
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	2201      	movs	r2, #1
 800770e:	4619      	mov	r1, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f002 f992 	bl	8009a3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007716:	e025      	b.n	8007764 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f002 f923 	bl	8009966 <USBD_CtlError>
            ret = USBD_FAIL;
 8007720:	2302      	movs	r3, #2
 8007722:	75fb      	strb	r3, [r7, #23]
          break;
 8007724:	e01e      	b.n	8007764 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	885b      	ldrh	r3, [r3, #2]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d10c      	bne.n	8007748 <USBD_MSC_Setup+0xa4>
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	88db      	ldrh	r3, [r3, #6]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d108      	bne.n	8007748 <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800773c:	2b00      	cmp	r3, #0
 800773e:	db03      	blt.n	8007748 <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f987 	bl	8007a54 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007746:	e00d      	b.n	8007764 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f002 f90b 	bl	8009966 <USBD_CtlError>
            ret = USBD_FAIL;
 8007750:	2302      	movs	r3, #2
 8007752:	75fb      	strb	r3, [r7, #23]
          break;
 8007754:	e006      	b.n	8007764 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007756:	6839      	ldr	r1, [r7, #0]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f002 f904 	bl	8009966 <USBD_CtlError>
          ret = USBD_FAIL;
 800775e:	2302      	movs	r3, #2
 8007760:	75fb      	strb	r3, [r7, #23]
          break;
 8007762:	bf00      	nop
      }
      break;
 8007764:	e0ce      	b.n	8007904 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	785b      	ldrb	r3, [r3, #1]
 800776a:	2b0b      	cmp	r3, #11
 800776c:	f200 80bb 	bhi.w	80078e6 <USBD_MSC_Setup+0x242>
 8007770:	a201      	add	r2, pc, #4	; (adr r2, 8007778 <USBD_MSC_Setup+0xd4>)
 8007772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007776:	bf00      	nop
 8007778:	080077a9 	.word	0x080077a9
 800777c:	0800781f 	.word	0x0800781f
 8007780:	080078e7 	.word	0x080078e7
 8007784:	080078e7 	.word	0x080078e7
 8007788:	080078e7 	.word	0x080078e7
 800778c:	080078e7 	.word	0x080078e7
 8007790:	080078e7 	.word	0x080078e7
 8007794:	080078e7 	.word	0x080078e7
 8007798:	080078e7 	.word	0x080078e7
 800779c:	080078e7 	.word	0x080078e7
 80077a0:	080077d1 	.word	0x080077d1
 80077a4:	080077f9 	.word	0x080077f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	d107      	bne.n	80077c2 <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80077b2:	f107 030e 	add.w	r3, r7, #14
 80077b6:	2202      	movs	r2, #2
 80077b8:	4619      	mov	r1, r3
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f002 f93d 	bl	8009a3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077c0:	e098      	b.n	80078f4 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 80077c2:	6839      	ldr	r1, [r7, #0]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f002 f8ce 	bl	8009966 <USBD_CtlError>
            ret = USBD_FAIL;
 80077ca:	2302      	movs	r3, #2
 80077cc:	75fb      	strb	r3, [r7, #23]
          break;
 80077ce:	e091      	b.n	80078f4 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077d6:	2b03      	cmp	r3, #3
 80077d8:	d107      	bne.n	80077ea <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	3304      	adds	r3, #4
 80077de:	2201      	movs	r2, #1
 80077e0:	4619      	mov	r1, r3
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f002 f929 	bl	8009a3a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077e8:	e084      	b.n	80078f4 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f002 f8ba 	bl	8009966 <USBD_CtlError>
            ret = USBD_FAIL;
 80077f2:	2302      	movs	r3, #2
 80077f4:	75fb      	strb	r3, [r7, #23]
          break;
 80077f6:	e07d      	b.n	80078f4 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077fe:	2b03      	cmp	r3, #3
 8007800:	d106      	bne.n	8007810 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	885b      	ldrh	r3, [r3, #2]
 8007806:	b2db      	uxtb	r3, r3
 8007808:	461a      	mov	r2, r3
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800780e:	e071      	b.n	80078f4 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f002 f8a7 	bl	8009966 <USBD_CtlError>
            ret = USBD_FAIL;
 8007818:	2302      	movs	r3, #2
 800781a:	75fb      	strb	r3, [r7, #23]
          break;
 800781c:	e06a      	b.n	80078f4 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	889b      	ldrh	r3, [r3, #4]
 8007822:	b2db      	uxtb	r3, r3
 8007824:	4619      	mov	r1, r3
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f002 fcd6 	bl	800a1d8 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	889b      	ldrh	r3, [r3, #4]
 8007830:	b2db      	uxtb	r3, r3
 8007832:	4619      	mov	r1, r3
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f002 fcb0 	bl	800a19a <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	889b      	ldrh	r3, [r3, #4]
 800783e:	b25b      	sxtb	r3, r3
 8007840:	2b00      	cmp	r3, #0
 8007842:	da23      	bge.n	800788c <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	889b      	ldrh	r3, [r3, #4]
 8007848:	b2db      	uxtb	r3, r3
 800784a:	f003 020f 	and.w	r2, r3, #15
 800784e:	6879      	ldr	r1, [r7, #4]
 8007850:	4613      	mov	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	440b      	add	r3, r1
 800785a:	3318      	adds	r3, #24
 800785c:	2200      	movs	r2, #0
 800785e:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	7c1b      	ldrb	r3, [r3, #16]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d107      	bne.n	8007878 <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8007868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800786c:	2202      	movs	r2, #2
 800786e:	2181      	movs	r1, #129	; 0x81
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f002 fc6c 	bl	800a14e <USBD_LL_OpenEP>
 8007876:	e005      	b.n	8007884 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8007878:	2340      	movs	r3, #64	; 0x40
 800787a:	2202      	movs	r2, #2
 800787c:	2181      	movs	r1, #129	; 0x81
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f002 fc65 	bl	800a14e <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	62da      	str	r2, [r3, #44]	; 0x2c
 800788a:	e024      	b.n	80078d6 <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	889b      	ldrh	r3, [r3, #4]
 8007890:	b2db      	uxtb	r3, r3
 8007892:	f003 020f 	and.w	r2, r3, #15
 8007896:	6879      	ldr	r1, [r7, #4]
 8007898:	4613      	mov	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	440b      	add	r3, r1
 80078a2:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	7c1b      	ldrb	r3, [r3, #16]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d107      	bne.n	80078c2 <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 80078b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078b6:	2202      	movs	r2, #2
 80078b8:	2101      	movs	r1, #1
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f002 fc47 	bl	800a14e <USBD_LL_OpenEP>
 80078c0:	e005      	b.n	80078ce <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 80078c2:	2340      	movs	r3, #64	; 0x40
 80078c4:	2202      	movs	r2, #2
 80078c6:	2101      	movs	r1, #1
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f002 fc40 	bl	800a14e <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	889b      	ldrh	r3, [r3, #4]
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fa52 	bl	8007d88 <MSC_BOT_CplClrFeature>
          break;
 80078e4:	e006      	b.n	80078f4 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f002 f83c 	bl	8009966 <USBD_CtlError>
          ret = USBD_FAIL;
 80078ee:	2302      	movs	r3, #2
 80078f0:	75fb      	strb	r3, [r7, #23]
          break;
 80078f2:	bf00      	nop
      }
      break;
 80078f4:	e006      	b.n	8007904 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 80078f6:	6839      	ldr	r1, [r7, #0]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f002 f834 	bl	8009966 <USBD_CtlError>
      ret = USBD_FAIL;
 80078fe:	2302      	movs	r3, #2
 8007900:	75fb      	strb	r3, [r7, #23]
      break;
 8007902:	bf00      	nop
  }

  return ret;
 8007904:	7dfb      	ldrb	r3, [r7, #23]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3718      	adds	r7, #24
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop

08007910 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	460b      	mov	r3, r1
 800791a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800791c:	78fb      	ldrb	r3, [r7, #3]
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f8c1 	bl	8007aa8 <MSC_BOT_DataIn>

  return USBD_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	460b      	mov	r3, r1
 800793a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800793c:	78fb      	ldrb	r3, [r7, #3]
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f8e3 	bl	8007b0c <MSC_BOT_DataOut>

  return USBD_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2220      	movs	r2, #32
 800795c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800795e:	4b03      	ldr	r3, [pc, #12]	; (800796c <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8007960:	4618      	mov	r0, r3
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	bc80      	pop	{r7}
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	2000005c 	.word	0x2000005c

08007970 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2220      	movs	r2, #32
 800797c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800797e:	4b03      	ldr	r3, [pc, #12]	; (800798c <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8007980:	4618      	mov	r0, r3
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	bc80      	pop	{r7}
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	2000007c 	.word	0x2000007c

08007990 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2220      	movs	r2, #32
 800799c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800799e:	4b03      	ldr	r3, [pc, #12]	; (80079ac <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bc80      	pop	{r7}
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	2000009c 	.word	0x2000009c

080079b0 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	220a      	movs	r2, #10
 80079bc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80079be:	4b03      	ldr	r3, [pc, #12]	; (80079cc <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bc80      	pop	{r7}
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	200000bc 	.word	0x200000bc

080079d0 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d003      	beq.n	80079e8 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	683a      	ldr	r2, [r7, #0]
 80079e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	370c      	adds	r7, #12
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bc80      	pop	{r7}
 80079f2:	4770      	bx	lr

080079f4 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a02:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2000      	movs	r0, #0
 8007a2a:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f002 fbd2 	bl	800a1d8 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8007a34:	2181      	movs	r1, #129	; 0x81
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f002 fbce 	bl	800a1d8 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8007a42:	231f      	movs	r3, #31
 8007a44:	2101      	movs	r1, #1
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f002 fc91 	bl	800a36e <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8007a4c:	bf00      	nop
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a62:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8007a76:	231f      	movs	r3, #31
 8007a78:	2101      	movs	r1, #1
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f002 fc77 	bl	800a36e <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8007a80:	bf00      	nop
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a96:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	721a      	strb	r2, [r3, #8]
}
 8007a9e:	bf00      	nop
 8007aa0:	3714      	adds	r7, #20
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bc80      	pop	{r7}
 8007aa6:	4770      	bx	lr

08007aa8 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aba:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	7a1b      	ldrb	r3, [r3, #8]
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d005      	beq.n	8007ad0 <MSC_BOT_DataIn+0x28>
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	db1a      	blt.n	8007afe <MSC_BOT_DataIn+0x56>
 8007ac8:	3b03      	subs	r3, #3
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d817      	bhi.n	8007afe <MSC_BOT_DataIn+0x56>
 8007ace:	e011      	b.n	8007af4 <MSC_BOT_DataIn+0x4c>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8007adc:	461a      	mov	r2, r3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f97a 	bl	8007dd8 <SCSI_ProcessCmd>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	da0b      	bge.n	8007b02 <MSC_BOT_DataIn+0x5a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007aea:	2101      	movs	r1, #1
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f8f1 	bl	8007cd4 <MSC_BOT_SendCSW>
      }
      break;
 8007af2:	e006      	b.n	8007b02 <MSC_BOT_DataIn+0x5a>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007af4:	2100      	movs	r1, #0
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f8ec 	bl	8007cd4 <MSC_BOT_SendCSW>
      break;
 8007afc:	e002      	b.n	8007b04 <MSC_BOT_DataIn+0x5c>

    default:
      break;
 8007afe:	bf00      	nop
 8007b00:	e000      	b.n	8007b04 <MSC_BOT_DataIn+0x5c>
      break;
 8007b02:	bf00      	nop
  }
}
 8007b04:	bf00      	nop
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	460b      	mov	r3, r1
 8007b16:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b1e:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	7a1b      	ldrb	r3, [r3, #8]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d002      	beq.n	8007b2e <MSC_BOT_DataOut+0x22>
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d004      	beq.n	8007b36 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8007b2c:	e015      	b.n	8007b5a <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f818 	bl	8007b64 <MSC_BOT_CBW_Decode>
      break;
 8007b34:	e011      	b.n	8007b5a <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8007b42:	461a      	mov	r2, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f947 	bl	8007dd8 <SCSI_ProcessCmd>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	da03      	bge.n	8007b58 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007b50:	2101      	movs	r1, #1
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f8be 	bl	8007cd4 <MSC_BOT_SendCSW>
      break;
 8007b58:	bf00      	nop
  }
}
 8007b5a:	bf00      	nop
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
	...

08007b64 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b72:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f002 fc10 	bl	800a3b4 <USBD_LL_GetRxDataSize>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b1f      	cmp	r3, #31
 8007b98:	d114      	bne.n	8007bc4 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007ba0:	4a32      	ldr	r2, [pc, #200]	; (8007c6c <MSC_BOT_CBW_Decode+0x108>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d10e      	bne.n	8007bc4 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d809      	bhi.n	8007bc4 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d004      	beq.n	8007bc4 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 8007bc0:	2b10      	cmp	r3, #16
 8007bc2:	d90e      	bls.n	8007be2 <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007bca:	2320      	movs	r3, #32
 8007bcc:	2205      	movs	r2, #5
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fc48 	bl	8008464 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f8a6 	bl	8007d2c <MSC_BOT_Abort>
 8007be0:	e041      	b.n	8007c66 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8007bee:	461a      	mov	r2, r3
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f8f1 	bl	8007dd8 <SCSI_ProcessCmd>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	da0c      	bge.n	8007c16 <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	7a1b      	ldrb	r3, [r3, #8]
 8007c00:	2b05      	cmp	r3, #5
 8007c02:	d104      	bne.n	8007c0e <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007c04:	2101      	movs	r1, #1
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f864 	bl	8007cd4 <MSC_BOT_SendCSW>
 8007c0c:	e02b      	b.n	8007c66 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f88c 	bl	8007d2c <MSC_BOT_Abort>
 8007c14:	e027      	b.n	8007c66 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	7a1b      	ldrb	r3, [r3, #8]
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d022      	beq.n	8007c64 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d01e      	beq.n	8007c64 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d01a      	beq.n	8007c64 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	895b      	ldrh	r3, [r3, #10]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d009      	beq.n	8007c4a <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f103 010c 	add.w	r1, r3, #12
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	895b      	ldrh	r3, [r3, #10]
 8007c40:	461a      	mov	r2, r3
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f814 	bl	8007c70 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8007c48:	e00d      	b.n	8007c66 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	895b      	ldrh	r3, [r3, #10]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d104      	bne.n	8007c5c <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007c52:	2100      	movs	r1, #0
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f83d 	bl	8007cd4 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8007c5a:	e004      	b.n	8007c66 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f865 	bl	8007d2c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8007c62:	e000      	b.n	8007c66 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8007c64:	bf00      	nop
    }
  }
}
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	43425355 	.word	0x43425355

08007c70 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c84:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007c8c:	88fb      	ldrh	r3, [r7, #6]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d204      	bcs.n	8007c9c <MSC_BOT_SendData+0x2c>
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	e000      	b.n	8007c9e <MSC_BOT_SendData+0x2e>
 8007c9c:	88fb      	ldrh	r3, [r7, #6]
 8007c9e:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8007ca6:	88fb      	ldrh	r3, [r7, #6]
 8007ca8:	1ad2      	subs	r2, r2, r3
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	2204      	movs	r2, #4
 8007cbc:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8007cbe:	8a7b      	ldrh	r3, [r7, #18]
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	2181      	movs	r1, #129	; 0x81
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f002 fb2f 	bl	800a328 <USBD_LL_Transmit>
}
 8007cca:	bf00      	nop
 8007ccc:	3718      	adds	r7, #24
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
	...

08007cd4 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce6:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	4a0f      	ldr	r2, [pc, #60]	; (8007d28 <MSC_BOT_SendCSW+0x54>)
 8007cec:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	78fa      	ldrb	r2, [r7, #3]
 8007cf4:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 8007d04:	230d      	movs	r3, #13
 8007d06:	2181      	movs	r1, #129	; 0x81
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f002 fb0d 	bl	800a328 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8007d14:	231f      	movs	r3, #31
 8007d16:	2101      	movs	r1, #1
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f002 fb28 	bl	800a36e <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8007d1e:	bf00      	nop
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	53425355 	.word	0x53425355

08007d2c <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d3a:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10c      	bne.n	8007d60 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d007      	beq.n	8007d60 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d103      	bne.n	8007d60 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007d58:	2101      	movs	r1, #1
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f002 fa5b 	bl	800a216 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007d60:	2181      	movs	r1, #129	; 0x81
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f002 fa57 	bl	800a216 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	7a5b      	ldrb	r3, [r3, #9]
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d107      	bne.n	8007d80 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8007d76:	231f      	movs	r3, #31
 8007d78:	2101      	movs	r1, #1
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f002 faf7 	bl	800a36e <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8007d80:	bf00      	nop
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	460b      	mov	r3, r1
 8007d92:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d9a:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	7a5b      	ldrb	r3, [r3, #9]
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d107      	bne.n	8007db4 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007da4:	2181      	movs	r1, #129	; 0x81
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f002 fa35 	bl	800a216 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	725a      	strb	r2, [r3, #9]
 8007db2:	e00d      	b.n	8007dd0 <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8007db4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	da08      	bge.n	8007dce <MSC_BOT_CplClrFeature+0x46>
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	7a5b      	ldrb	r3, [r3, #9]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d004      	beq.n	8007dce <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007dc4:	2101      	movs	r1, #1
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7ff ff84 	bl	8007cd4 <MSC_BOT_SendCSW>
 8007dcc:	e000      	b.n	8007dd0 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 8007dce:	bf00      	nop
  }
}
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
	...

08007dd8 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	460b      	mov	r3, r1
 8007de2:	607a      	str	r2, [r7, #4]
 8007de4:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	2b5a      	cmp	r3, #90	; 0x5a
 8007dec:	f200 810e 	bhi.w	800800c <SCSI_ProcessCmd+0x234>
 8007df0:	a201      	add	r2, pc, #4	; (adr r2, 8007df8 <SCSI_ProcessCmd+0x20>)
 8007df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df6:	bf00      	nop
 8007df8:	08007f65 	.word	0x08007f65
 8007dfc:	0800800d 	.word	0x0800800d
 8007e00:	0800800d 	.word	0x0800800d
 8007e04:	08007f73 	.word	0x08007f73
 8007e08:	0800800d 	.word	0x0800800d
 8007e0c:	0800800d 	.word	0x0800800d
 8007e10:	0800800d 	.word	0x0800800d
 8007e14:	0800800d 	.word	0x0800800d
 8007e18:	0800800d 	.word	0x0800800d
 8007e1c:	0800800d 	.word	0x0800800d
 8007e20:	0800800d 	.word	0x0800800d
 8007e24:	0800800d 	.word	0x0800800d
 8007e28:	0800800d 	.word	0x0800800d
 8007e2c:	0800800d 	.word	0x0800800d
 8007e30:	0800800d 	.word	0x0800800d
 8007e34:	0800800d 	.word	0x0800800d
 8007e38:	0800800d 	.word	0x0800800d
 8007e3c:	0800800d 	.word	0x0800800d
 8007e40:	08007f81 	.word	0x08007f81
 8007e44:	0800800d 	.word	0x0800800d
 8007e48:	0800800d 	.word	0x0800800d
 8007e4c:	0800800d 	.word	0x0800800d
 8007e50:	0800800d 	.word	0x0800800d
 8007e54:	0800800d 	.word	0x0800800d
 8007e58:	0800800d 	.word	0x0800800d
 8007e5c:	0800800d 	.word	0x0800800d
 8007e60:	08007fab 	.word	0x08007fab
 8007e64:	08007f8f 	.word	0x08007f8f
 8007e68:	0800800d 	.word	0x0800800d
 8007e6c:	0800800d 	.word	0x0800800d
 8007e70:	08007f9d 	.word	0x08007f9d
 8007e74:	0800800d 	.word	0x0800800d
 8007e78:	0800800d 	.word	0x0800800d
 8007e7c:	0800800d 	.word	0x0800800d
 8007e80:	0800800d 	.word	0x0800800d
 8007e84:	08007fc7 	.word	0x08007fc7
 8007e88:	0800800d 	.word	0x0800800d
 8007e8c:	08007fd5 	.word	0x08007fd5
 8007e90:	0800800d 	.word	0x0800800d
 8007e94:	0800800d 	.word	0x0800800d
 8007e98:	08007fe3 	.word	0x08007fe3
 8007e9c:	0800800d 	.word	0x0800800d
 8007ea0:	08007ff1 	.word	0x08007ff1
 8007ea4:	0800800d 	.word	0x0800800d
 8007ea8:	0800800d 	.word	0x0800800d
 8007eac:	0800800d 	.word	0x0800800d
 8007eb0:	0800800d 	.word	0x0800800d
 8007eb4:	08007fff 	.word	0x08007fff
 8007eb8:	0800800d 	.word	0x0800800d
 8007ebc:	0800800d 	.word	0x0800800d
 8007ec0:	0800800d 	.word	0x0800800d
 8007ec4:	0800800d 	.word	0x0800800d
 8007ec8:	0800800d 	.word	0x0800800d
 8007ecc:	0800800d 	.word	0x0800800d
 8007ed0:	0800800d 	.word	0x0800800d
 8007ed4:	0800800d 	.word	0x0800800d
 8007ed8:	0800800d 	.word	0x0800800d
 8007edc:	0800800d 	.word	0x0800800d
 8007ee0:	0800800d 	.word	0x0800800d
 8007ee4:	0800800d 	.word	0x0800800d
 8007ee8:	0800800d 	.word	0x0800800d
 8007eec:	0800800d 	.word	0x0800800d
 8007ef0:	0800800d 	.word	0x0800800d
 8007ef4:	0800800d 	.word	0x0800800d
 8007ef8:	0800800d 	.word	0x0800800d
 8007efc:	0800800d 	.word	0x0800800d
 8007f00:	0800800d 	.word	0x0800800d
 8007f04:	0800800d 	.word	0x0800800d
 8007f08:	0800800d 	.word	0x0800800d
 8007f0c:	0800800d 	.word	0x0800800d
 8007f10:	0800800d 	.word	0x0800800d
 8007f14:	0800800d 	.word	0x0800800d
 8007f18:	0800800d 	.word	0x0800800d
 8007f1c:	0800800d 	.word	0x0800800d
 8007f20:	0800800d 	.word	0x0800800d
 8007f24:	0800800d 	.word	0x0800800d
 8007f28:	0800800d 	.word	0x0800800d
 8007f2c:	0800800d 	.word	0x0800800d
 8007f30:	0800800d 	.word	0x0800800d
 8007f34:	0800800d 	.word	0x0800800d
 8007f38:	0800800d 	.word	0x0800800d
 8007f3c:	0800800d 	.word	0x0800800d
 8007f40:	0800800d 	.word	0x0800800d
 8007f44:	0800800d 	.word	0x0800800d
 8007f48:	0800800d 	.word	0x0800800d
 8007f4c:	0800800d 	.word	0x0800800d
 8007f50:	0800800d 	.word	0x0800800d
 8007f54:	0800800d 	.word	0x0800800d
 8007f58:	0800800d 	.word	0x0800800d
 8007f5c:	0800800d 	.word	0x0800800d
 8007f60:	08007fb9 	.word	0x08007fb9
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 8007f64:	7afb      	ldrb	r3, [r7, #11]
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f000 f85c 	bl	8008028 <SCSI_TestUnitReady>
      break;
 8007f70:	e055      	b.n	800801e <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 8007f72:	7afb      	ldrb	r3, [r7, #11]
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	4619      	mov	r1, r3
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 fa09 	bl	8008390 <SCSI_RequestSense>
      break;
 8007f7e:	e04e      	b.n	800801e <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8007f80:	7afb      	ldrb	r3, [r7, #11]
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	4619      	mov	r1, r3
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f000 f888 	bl	800809c <SCSI_Inquiry>
      break;
 8007f8c:	e047      	b.n	800801e <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8007f8e:	7afb      	ldrb	r3, [r7, #11]
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	4619      	mov	r1, r3
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f000 fa9e 	bl	80084d6 <SCSI_StartStopUnit>
      break;
 8007f9a:	e040      	b.n	800801e <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8007f9c:	7afb      	ldrb	r3, [r7, #11]
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f000 fa97 	bl	80084d6 <SCSI_StartStopUnit>
      break;
 8007fa8:	e039      	b.n	800801e <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 8007faa:	7afb      	ldrb	r3, [r7, #11]
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	4619      	mov	r1, r3
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f000 f99d 	bl	80082f0 <SCSI_ModeSense6>
      break;
 8007fb6:	e032      	b.n	800801e <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 8007fb8:	7afb      	ldrb	r3, [r7, #11]
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f000 f9be 	bl	8008340 <SCSI_ModeSense10>
      break;
 8007fc4:	e02b      	b.n	800801e <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8007fc6:	7afb      	ldrb	r3, [r7, #11]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	4619      	mov	r1, r3
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 f92a 	bl	8008226 <SCSI_ReadFormatCapacity>
      break;
 8007fd2:	e024      	b.n	800801e <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 8007fd4:	7afb      	ldrb	r3, [r7, #11]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f000 f8bc 	bl	8008158 <SCSI_ReadCapacity10>
      break;
 8007fe0:	e01d      	b.n	800801e <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 8007fe2:	7afb      	ldrb	r3, [r7, #11]
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f000 fa88 	bl	80084fe <SCSI_Read10>
      break;
 8007fee:	e016      	b.n	800801e <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 8007ff0:	7afb      	ldrb	r3, [r7, #11]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f000 fb0d 	bl	8008616 <SCSI_Write10>
      break;
 8007ffc:	e00f      	b.n	800801e <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 8007ffe:	7afb      	ldrb	r3, [r7, #11]
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	4619      	mov	r1, r3
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f000 fbb6 	bl	8008776 <SCSI_Verify10>
      break;
 800800a:	e008      	b.n	800801e <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800800c:	7af9      	ldrb	r1, [r7, #11]
 800800e:	2320      	movs	r3, #32
 8008010:	2205      	movs	r2, #5
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f000 fa26 	bl	8008464 <SCSI_SenseCode>
      return -1;
 8008018:	f04f 33ff 	mov.w	r3, #4294967295
 800801c:	e000      	b.n	8008020 <SCSI_ProcessCmd+0x248>
  }

  return 0;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	460b      	mov	r3, r1
 8008032:	607a      	str	r2, [r7, #4]
 8008034:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800803c:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00a      	beq.n	800805e <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800804e:	2320      	movs	r3, #32
 8008050:	2205      	movs	r2, #5
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	f000 fa06 	bl	8008464 <SCSI_SenseCode>

    return -1;
 8008058:	f04f 33ff 	mov.w	r3, #4294967295
 800805c:	e019      	b.n	8008092 <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	7afa      	ldrb	r2, [r7, #11]
 8008068:	4610      	mov	r0, r2
 800806a:	4798      	blx	r3
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00b      	beq.n	800808a <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008072:	7af9      	ldrb	r1, [r7, #11]
 8008074:	233a      	movs	r3, #58	; 0x3a
 8008076:	2202      	movs	r2, #2
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f000 f9f3 	bl	8008464 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	2205      	movs	r2, #5
 8008082:	721a      	strb	r2, [r3, #8]

    return -1;
 8008084:	f04f 33ff 	mov.w	r3, #4294967295
 8008088:	e003      	b.n	8008092 <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	2200      	movs	r2, #0
 800808e:	815a      	strh	r2, [r3, #10]

  return 0;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3718      	adds	r7, #24
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
	...

0800809c <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800809c:	b480      	push	{r7}
 800809e:	b089      	sub	sp, #36	; 0x24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	460b      	mov	r3, r1
 80080a6:	607a      	str	r2, [r7, #4]
 80080a8:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b0:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	3301      	adds	r3, #1
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	f003 0301 	and.w	r3, r3, #1
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d014      	beq.n	80080ea <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 80080c0:	2307      	movs	r3, #7
 80080c2:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	8bfa      	ldrh	r2, [r7, #30]
 80080c8:	815a      	strh	r2, [r3, #10]

    while (len)
 80080ca:	e00a      	b.n	80080e2 <SCSI_Inquiry+0x46>
    {
      len--;
 80080cc:	8bfb      	ldrh	r3, [r7, #30]
 80080ce:	3b01      	subs	r3, #1
 80080d0:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 80080d2:	8bfa      	ldrh	r2, [r7, #30]
 80080d4:	8bfb      	ldrh	r3, [r7, #30]
 80080d6:	491f      	ldr	r1, [pc, #124]	; (8008154 <SCSI_Inquiry+0xb8>)
 80080d8:	5c89      	ldrb	r1, [r1, r2]
 80080da:	69ba      	ldr	r2, [r7, #24]
 80080dc:	4413      	add	r3, r2
 80080de:	460a      	mov	r2, r1
 80080e0:	731a      	strb	r2, [r3, #12]
    while (len)
 80080e2:	8bfb      	ldrh	r3, [r7, #30]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1f1      	bne.n	80080cc <SCSI_Inquiry+0x30>
 80080e8:	e02e      	b.n	8008148 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080f0:	69d9      	ldr	r1, [r3, #28]
 80080f2:	7afa      	ldrb	r2, [r7, #11]
 80080f4:	4613      	mov	r3, r2
 80080f6:	00db      	lsls	r3, r3, #3
 80080f8:	4413      	add	r3, r2
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	440b      	add	r3, r1
 80080fe:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	3304      	adds	r3, #4
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	b29b      	uxth	r3, r3
 8008108:	3305      	adds	r3, #5
 800810a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	3304      	adds	r3, #4
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	b29b      	uxth	r3, r3
 8008114:	8bfa      	ldrh	r2, [r7, #30]
 8008116:	429a      	cmp	r2, r3
 8008118:	d303      	bcc.n	8008122 <SCSI_Inquiry+0x86>
    {
      len = params[4];
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	3304      	adds	r3, #4
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	8bfa      	ldrh	r2, [r7, #30]
 8008126:	815a      	strh	r2, [r3, #10]

    while (len)
 8008128:	e00b      	b.n	8008142 <SCSI_Inquiry+0xa6>
    {
      len--;
 800812a:	8bfb      	ldrh	r3, [r7, #30]
 800812c:	3b01      	subs	r3, #1
 800812e:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 8008130:	8bfb      	ldrh	r3, [r7, #30]
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	441a      	add	r2, r3
 8008136:	8bfb      	ldrh	r3, [r7, #30]
 8008138:	7811      	ldrb	r1, [r2, #0]
 800813a:	69ba      	ldr	r2, [r7, #24]
 800813c:	4413      	add	r3, r2
 800813e:	460a      	mov	r2, r1
 8008140:	731a      	strb	r2, [r3, #12]
    while (len)
 8008142:	8bfb      	ldrh	r3, [r7, #30]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1f0      	bne.n	800812a <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3724      	adds	r7, #36	; 0x24
 800814e:	46bd      	mov	sp, r7
 8008150:	bc80      	pop	{r7}
 8008152:	4770      	bx	lr
 8008154:	0800a560 	.word	0x0800a560

08008158 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	460b      	mov	r3, r1
 8008162:	607a      	str	r2, [r7, #4]
 8008164:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800816c:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	f502 7118 	add.w	r1, r2, #608	; 0x260
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	f202 225e 	addw	r2, r2, #606	; 0x25e
 8008182:	7af8      	ldrb	r0, [r7, #11]
 8008184:	4798      	blx	r3
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d008      	beq.n	800819e <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800818c:	7af9      	ldrb	r1, [r7, #11]
 800818e:	233a      	movs	r3, #58	; 0x3a
 8008190:	2202      	movs	r2, #2
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f000 f966 	bl	8008464 <SCSI_SenseCode>
    return -1;
 8008198:	f04f 33ff 	mov.w	r3, #4294967295
 800819c:	e03f      	b.n	800821e <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80081a4:	3b01      	subs	r3, #1
 80081a6:	0e1b      	lsrs	r3, r3, #24
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80081b4:	3b01      	subs	r3, #1
 80081b6:	0c1b      	lsrs	r3, r3, #16
 80081b8:	b2da      	uxtb	r2, r3
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80081c4:	3b01      	subs	r3, #1
 80081c6:	0a1b      	lsrs	r3, r3, #8
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	3b01      	subs	r3, #1
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80081e4:	161b      	asrs	r3, r3, #24
 80081e6:	b2da      	uxtb	r2, r3
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80081f2:	141b      	asrs	r3, r3, #16
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8008200:	0a1b      	lsrs	r3, r3, #8
 8008202:	b29b      	uxth	r3, r3
 8008204:	b2da      	uxtb	r2, r3
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8008210:	b2da      	uxtb	r2, r3
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	2208      	movs	r2, #8
 800821a:	815a      	strh	r2, [r3, #10]
    return 0;
 800821c:	2300      	movs	r3, #0
  }
}
 800821e:	4618      	mov	r0, r3
 8008220:	3718      	adds	r7, #24
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b088      	sub	sp, #32
 800822a:	af00      	add	r7, sp, #0
 800822c:	60f8      	str	r0, [r7, #12]
 800822e:	460b      	mov	r3, r1
 8008230:	607a      	str	r2, [r7, #4]
 8008232:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800823a:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 800823c:	2300      	movs	r3, #0
 800823e:	83fb      	strh	r3, [r7, #30]
 8008240:	e007      	b.n	8008252 <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8008242:	8bfb      	ldrh	r3, [r7, #30]
 8008244:	69ba      	ldr	r2, [r7, #24]
 8008246:	4413      	add	r3, r2
 8008248:	2200      	movs	r2, #0
 800824a:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 800824c:	8bfb      	ldrh	r3, [r7, #30]
 800824e:	3301      	adds	r3, #1
 8008250:	83fb      	strh	r3, [r7, #30]
 8008252:	8bfb      	ldrh	r3, [r7, #30]
 8008254:	2b0b      	cmp	r3, #11
 8008256:	d9f4      	bls.n	8008242 <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	f107 0216 	add.w	r2, r7, #22
 8008264:	f107 0110 	add.w	r1, r7, #16
 8008268:	7af8      	ldrb	r0, [r7, #11]
 800826a:	4798      	blx	r3
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d008      	beq.n	8008284 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008272:	7af9      	ldrb	r1, [r7, #11]
 8008274:	233a      	movs	r3, #58	; 0x3a
 8008276:	2202      	movs	r2, #2
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f000 f8f3 	bl	8008464 <SCSI_SenseCode>
    return -1;
 800827e:	f04f 33ff 	mov.w	r3, #4294967295
 8008282:	e030      	b.n	80082e6 <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	2208      	movs	r2, #8
 8008288:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	3b01      	subs	r3, #1
 800828e:	0e1b      	lsrs	r3, r3, #24
 8008290:	b2da      	uxtb	r2, r3
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	3b01      	subs	r3, #1
 800829a:	0c1b      	lsrs	r3, r3, #16
 800829c:	b2da      	uxtb	r2, r3
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	3b01      	subs	r3, #1
 80082a6:	0a1b      	lsrs	r3, r3, #8
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	3b01      	subs	r3, #1
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	2202      	movs	r2, #2
 80082be:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80082c0:	8afb      	ldrh	r3, [r7, #22]
 80082c2:	141b      	asrs	r3, r3, #16
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80082ca:	8afb      	ldrh	r3, [r7, #22]
 80082cc:	0a1b      	lsrs	r3, r3, #8
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 80082d6:	8afb      	ldrh	r3, [r7, #22]
 80082d8:	b2da      	uxtb	r2, r3
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	220c      	movs	r2, #12
 80082e2:	815a      	strh	r2, [r3, #10]
    return 0;
 80082e4:	2300      	movs	r3, #0
  }
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3720      	adds	r7, #32
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
	...

080082f0 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	460b      	mov	r3, r1
 80082fa:	607a      	str	r2, [r7, #4]
 80082fc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008304:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 8008306:	2308      	movs	r3, #8
 8008308:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	8afa      	ldrh	r2, [r7, #22]
 800830e:	815a      	strh	r2, [r3, #10]

  while (len)
 8008310:	e00a      	b.n	8008328 <SCSI_ModeSense6+0x38>
  {
    len--;
 8008312:	8afb      	ldrh	r3, [r7, #22]
 8008314:	3b01      	subs	r3, #1
 8008316:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8008318:	8afa      	ldrh	r2, [r7, #22]
 800831a:	8afb      	ldrh	r3, [r7, #22]
 800831c:	4907      	ldr	r1, [pc, #28]	; (800833c <SCSI_ModeSense6+0x4c>)
 800831e:	5c89      	ldrb	r1, [r1, r2]
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	4413      	add	r3, r2
 8008324:	460a      	mov	r2, r1
 8008326:	731a      	strb	r2, [r3, #12]
  while (len)
 8008328:	8afb      	ldrh	r3, [r7, #22]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1f1      	bne.n	8008312 <SCSI_ModeSense6+0x22>
  }
  return 0;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	371c      	adds	r7, #28
 8008334:	46bd      	mov	sp, r7
 8008336:	bc80      	pop	{r7}
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	0800a568 	.word	0x0800a568

08008340 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8008340:	b480      	push	{r7}
 8008342:	b087      	sub	sp, #28
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	460b      	mov	r3, r1
 800834a:	607a      	str	r2, [r7, #4]
 800834c:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 800834e:	2308      	movs	r3, #8
 8008350:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008358:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	8afa      	ldrh	r2, [r7, #22]
 800835e:	815a      	strh	r2, [r3, #10]

  while (len)
 8008360:	e00a      	b.n	8008378 <SCSI_ModeSense10+0x38>
  {
    len--;
 8008362:	8afb      	ldrh	r3, [r7, #22]
 8008364:	3b01      	subs	r3, #1
 8008366:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8008368:	8afa      	ldrh	r2, [r7, #22]
 800836a:	8afb      	ldrh	r3, [r7, #22]
 800836c:	4907      	ldr	r1, [pc, #28]	; (800838c <SCSI_ModeSense10+0x4c>)
 800836e:	5c89      	ldrb	r1, [r1, r2]
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	4413      	add	r3, r2
 8008374:	460a      	mov	r2, r1
 8008376:	731a      	strb	r2, [r3, #12]
  while (len)
 8008378:	8afb      	ldrh	r3, [r7, #22]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1f1      	bne.n	8008362 <SCSI_ModeSense10+0x22>
  }

  return 0;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	371c      	adds	r7, #28
 8008384:	46bd      	mov	sp, r7
 8008386:	bc80      	pop	{r7}
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	0800a570 	.word	0x0800a570

08008390 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8008390:	b480      	push	{r7}
 8008392:	b087      	sub	sp, #28
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	460b      	mov	r3, r1
 800839a:	607a      	str	r2, [r7, #4]
 800839c:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a4:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 80083a6:	2300      	movs	r3, #0
 80083a8:	75fb      	strb	r3, [r7, #23]
 80083aa:	e007      	b.n	80083bc <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 80083ac:	7dfb      	ldrb	r3, [r7, #23]
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	4413      	add	r3, r2
 80083b2:	2200      	movs	r2, #0
 80083b4:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 80083b6:	7dfb      	ldrb	r3, [r7, #23]
 80083b8:	3301      	adds	r3, #1
 80083ba:	75fb      	strb	r3, [r7, #23]
 80083bc:	7dfb      	ldrb	r3, [r7, #23]
 80083be:	2b11      	cmp	r3, #17
 80083c0:	d9f4      	bls.n	80083ac <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	2270      	movs	r2, #112	; 0x70
 80083c6:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	220c      	movs	r2, #12
 80083cc:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80083da:	429a      	cmp	r2, r3
 80083dc:	d02e      	beq.n	800843c <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	3347      	adds	r3, #71	; 0x47
 80083e8:	00db      	lsls	r3, r3, #3
 80083ea:	4413      	add	r3, r2
 80083ec:	791a      	ldrb	r2, [r3, #4]
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80083f8:	693a      	ldr	r2, [r7, #16]
 80083fa:	3347      	adds	r3, #71	; 0x47
 80083fc:	00db      	lsls	r3, r3, #3
 80083fe:	4413      	add	r3, r2
 8008400:	7a5a      	ldrb	r2, [r3, #9]
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	3347      	adds	r3, #71	; 0x47
 8008410:	00db      	lsls	r3, r3, #3
 8008412:	4413      	add	r3, r2
 8008414:	7a1a      	ldrb	r2, [r3, #8]
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8008420:	3301      	adds	r3, #1
 8008422:	b2da      	uxtb	r2, r3
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8008430:	2b04      	cmp	r3, #4
 8008432:	d103      	bne.n	800843c <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	2212      	movs	r2, #18
 8008440:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	3304      	adds	r3, #4
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	2b12      	cmp	r3, #18
 800844a:	d805      	bhi.n	8008458 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	3304      	adds	r3, #4
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	b29a      	uxth	r2, r3
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	371c      	adds	r7, #28
 800845e:	46bd      	mov	sp, r7
 8008460:	bc80      	pop	{r7}
 8008462:	4770      	bx	lr

08008464 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8008464:	b480      	push	{r7}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	4608      	mov	r0, r1
 800846e:	4611      	mov	r1, r2
 8008470:	461a      	mov	r2, r3
 8008472:	4603      	mov	r3, r0
 8008474:	70fb      	strb	r3, [r7, #3]
 8008476:	460b      	mov	r3, r1
 8008478:	70bb      	strb	r3, [r7, #2]
 800847a:	4613      	mov	r3, r2
 800847c:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008484:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	3347      	adds	r3, #71	; 0x47
 8008490:	00db      	lsls	r3, r3, #3
 8008492:	4413      	add	r3, r2
 8008494:	78ba      	ldrb	r2, [r7, #2]
 8008496:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	3347      	adds	r3, #71	; 0x47
 80084a2:	00db      	lsls	r3, r3, #3
 80084a4:	4413      	add	r3, r2
 80084a6:	2200      	movs	r2, #0
 80084a8:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80084b0:	3301      	adds	r3, #1
 80084b2:	b2da      	uxtb	r2, r3
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80084c0:	2b04      	cmp	r3, #4
 80084c2:	d103      	bne.n	80084cc <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 80084cc:	bf00      	nop
 80084ce:	3714      	adds	r7, #20
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bc80      	pop	{r7}
 80084d4:	4770      	bx	lr

080084d6 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b087      	sub	sp, #28
 80084da:	af00      	add	r7, sp, #0
 80084dc:	60f8      	str	r0, [r7, #12]
 80084de:	460b      	mov	r3, r1
 80084e0:	607a      	str	r2, [r7, #4]
 80084e2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ea:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	2200      	movs	r2, #0
 80084f0:	815a      	strh	r2, [r3, #10]
  return 0;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	371c      	adds	r7, #28
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bc80      	pop	{r7}
 80084fc:	4770      	bx	lr

080084fe <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b086      	sub	sp, #24
 8008502:	af00      	add	r7, sp, #0
 8008504:	60f8      	str	r0, [r7, #12]
 8008506:	460b      	mov	r3, r1
 8008508:	607a      	str	r2, [r7, #4]
 800850a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008512:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	7a1b      	ldrb	r3, [r3, #8]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d16e      	bne.n	80085fa <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8008522:	b25b      	sxtb	r3, r3
 8008524:	2b00      	cmp	r3, #0
 8008526:	db0a      	blt.n	800853e <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800852e:	2320      	movs	r3, #32
 8008530:	2205      	movs	r2, #5
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	f7ff ff96 	bl	8008464 <SCSI_SenseCode>
      return -1;
 8008538:	f04f 33ff 	mov.w	r3, #4294967295
 800853c:	e067      	b.n	800860e <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	7afa      	ldrb	r2, [r7, #11]
 8008548:	4610      	mov	r0, r2
 800854a:	4798      	blx	r3
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d008      	beq.n	8008564 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008552:	7af9      	ldrb	r1, [r7, #11]
 8008554:	233a      	movs	r3, #58	; 0x3a
 8008556:	2202      	movs	r2, #2
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f7ff ff83 	bl	8008464 <SCSI_SenseCode>
      return -1;
 800855e:	f04f 33ff 	mov.w	r3, #4294967295
 8008562:	e054      	b.n	800860e <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	3302      	adds	r3, #2
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	3303      	adds	r3, #3
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008574:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	3304      	adds	r3, #4
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800857e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	3205      	adds	r2, #5
 8008584:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8008586:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	3307      	adds	r3, #7
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	021b      	lsls	r3, r3, #8
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	3208      	adds	r2, #8
 800859a:	7812      	ldrb	r2, [r2, #0]
 800859c:	431a      	orrs	r2, r3
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80085b0:	7af9      	ldrb	r1, [r7, #11]
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f000 f912 	bl	80087dc <SCSI_CheckAddressRange>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	da02      	bge.n	80085c4 <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80085be:	f04f 33ff 	mov.w	r3, #4294967295
 80085c2:	e024      	b.n	800860e <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	2202      	movs	r2, #2
 80085c8:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80085d6:	6979      	ldr	r1, [r7, #20]
 80085d8:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 80085dc:	fb01 f303 	mul.w	r3, r1, r3
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d00a      	beq.n	80085fa <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80085ea:	2320      	movs	r3, #32
 80085ec:	2205      	movs	r2, #5
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f7ff ff38 	bl	8008464 <SCSI_SenseCode>
      return -1;
 80085f4:	f04f 33ff 	mov.w	r3, #4294967295
 80085f8:	e009      	b.n	800860e <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008600:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 8008602:	7afb      	ldrb	r3, [r7, #11]
 8008604:	4619      	mov	r1, r3
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f000 f90a 	bl	8008820 <SCSI_ProcessRead>
 800860c:	4603      	mov	r3, r0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3718      	adds	r7, #24
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b086      	sub	sp, #24
 800861a:	af00      	add	r7, sp, #0
 800861c:	60f8      	str	r0, [r7, #12]
 800861e:	460b      	mov	r3, r1
 8008620:	607a      	str	r2, [r7, #4]
 8008622:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800862a:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	7a1b      	ldrb	r3, [r3, #8]
 8008630:	2b00      	cmp	r3, #0
 8008632:	f040 8096 	bne.w	8008762 <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800863c:	b25b      	sxtb	r3, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	da0a      	bge.n	8008658 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8008648:	2320      	movs	r3, #32
 800864a:	2205      	movs	r2, #5
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f7ff ff09 	bl	8008464 <SCSI_SenseCode>
      return -1;
 8008652:	f04f 33ff 	mov.w	r3, #4294967295
 8008656:	e08a      	b.n	800876e <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	7afa      	ldrb	r2, [r7, #11]
 8008662:	4610      	mov	r0, r2
 8008664:	4798      	blx	r3
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d008      	beq.n	800867e <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800866c:	7af9      	ldrb	r1, [r7, #11]
 800866e:	233a      	movs	r3, #58	; 0x3a
 8008670:	2202      	movs	r2, #2
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f7ff fef6 	bl	8008464 <SCSI_SenseCode>
      return -1;
 8008678:	f04f 33ff 	mov.w	r3, #4294967295
 800867c:	e077      	b.n	800876e <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	7afa      	ldrb	r2, [r7, #11]
 8008688:	4610      	mov	r0, r2
 800868a:	4798      	blx	r3
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d008      	beq.n	80086a4 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8008692:	7af9      	ldrb	r1, [r7, #11]
 8008694:	2327      	movs	r3, #39	; 0x27
 8008696:	2202      	movs	r2, #2
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f7ff fee3 	bl	8008464 <SCSI_SenseCode>
      return -1;
 800869e:	f04f 33ff 	mov.w	r3, #4294967295
 80086a2:	e064      	b.n	800876e <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	3302      	adds	r3, #2
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	3303      	adds	r3, #3
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80086b4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	3304      	adds	r3, #4
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80086be:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	3205      	adds	r2, #5
 80086c4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80086c6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	3307      	adds	r3, #7
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	3208      	adds	r2, #8
 80086da:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80086dc:	431a      	orrs	r2, r3
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80086f0:	7af9      	ldrb	r1, [r7, #11]
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f000 f872 	bl	80087dc <SCSI_CheckAddressRange>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	da02      	bge.n	8008704 <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80086fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008702:	e034      	b.n	800876e <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8008710:	fb02 f303 	mul.w	r3, r2, r3
 8008714:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800871c:	693a      	ldr	r2, [r7, #16]
 800871e:	429a      	cmp	r2, r3
 8008720:	d00a      	beq.n	8008738 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8008728:	2320      	movs	r3, #32
 800872a:	2205      	movs	r2, #5
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f7ff fe99 	bl	8008464 <SCSI_SenseCode>
      return -1;
 8008732:	f04f 33ff 	mov.w	r3, #4294967295
 8008736:	e01a      	b.n	800876e <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800873e:	bf28      	it	cs
 8008740:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008744:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	2201      	movs	r2, #1
 800874a:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	f103 020c 	add.w	r2, r3, #12
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	b29b      	uxth	r3, r3
 8008756:	2101      	movs	r1, #1
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f001 fe08 	bl	800a36e <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 800875e:	2300      	movs	r3, #0
 8008760:	e005      	b.n	800876e <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 8008762:	7afb      	ldrb	r3, [r7, #11]
 8008764:	4619      	mov	r1, r3
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f000 f8ce 	bl	8008908 <SCSI_ProcessWrite>
 800876c:	4603      	mov	r3, r0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3718      	adds	r7, #24
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b086      	sub	sp, #24
 800877a:	af00      	add	r7, sp, #0
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	460b      	mov	r3, r1
 8008780:	607a      	str	r2, [r7, #4]
 8008782:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800878a:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	3301      	adds	r3, #1
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	f003 0302 	and.w	r3, r3, #2
 8008796:	2b00      	cmp	r3, #0
 8008798:	d008      	beq.n	80087ac <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800879a:	7af9      	ldrb	r1, [r7, #11]
 800879c:	2324      	movs	r3, #36	; 0x24
 800879e:	2205      	movs	r2, #5
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f7ff fe5f 	bl	8008464 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80087a6:	f04f 33ff 	mov.w	r3, #4294967295
 80087aa:	e013      	b.n	80087d4 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80087b8:	7af9      	ldrb	r1, [r7, #11]
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f000 f80e 	bl	80087dc <SCSI_CheckAddressRange>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	da02      	bge.n	80087cc <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 80087c6:	f04f 33ff 	mov.w	r3, #4294967295
 80087ca:	e003      	b.n	80087d4 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	2200      	movs	r2, #0
 80087d0:	815a      	strh	r2, [r3, #10]
  return 0;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3718      	adds	r7, #24
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	607a      	str	r2, [r7, #4]
 80087e6:	603b      	str	r3, [r7, #0]
 80087e8:	460b      	mov	r3, r1
 80087ea:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087f2:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	441a      	add	r2, r3
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8008800:	429a      	cmp	r2, r3
 8008802:	d908      	bls.n	8008816 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8008804:	7af9      	ldrb	r1, [r7, #11]
 8008806:	2321      	movs	r3, #33	; 0x21
 8008808:	2205      	movs	r2, #5
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f7ff fe2a 	bl	8008464 <SCSI_SenseCode>
    return -1;
 8008810:	f04f 33ff 	mov.w	r3, #4294967295
 8008814:	e000      	b.n	8008818 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3718      	adds	r7, #24
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8008820:	b590      	push	{r4, r7, lr}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	460b      	mov	r3, r1
 800882a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008832:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8008840:	fb02 f303 	mul.w	r3, r2, r3
 8008844:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800884c:	bf28      	it	cs
 800884e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008852:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800885a:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800886e:	4618      	mov	r0, r3
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8008876:	b29b      	uxth	r3, r3
 8008878:	78f8      	ldrb	r0, [r7, #3]
 800887a:	47a0      	blx	r4
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	da08      	bge.n	8008894 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8008882:	78f9      	ldrb	r1, [r7, #3]
 8008884:	2311      	movs	r3, #17
 8008886:	2204      	movs	r2, #4
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7ff fdeb 	bl	8008464 <SCSI_SenseCode>
    return -1;
 800888e:	f04f 33ff 	mov.w	r3, #4294967295
 8008892:	e035      	b.n	8008900 <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f103 020c 	add.w	r2, r3, #12
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	b29b      	uxth	r3, r3
 800889e:	2181      	movs	r1, #129	; 0x81
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f001 fd41 	bl	800a328 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80088b2:	4619      	mov	r1, r3
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80088ba:	441a      	add	r2, r3
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80088ce:	4619      	mov	r1, r3
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80088d6:	1ad2      	subs	r2, r2, r3
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	1ad2      	subs	r2, r2, r3
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d102      	bne.n	80088fe <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2203      	movs	r2, #3
 80088fc:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3714      	adds	r7, #20
 8008904:	46bd      	mov	sp, r7
 8008906:	bd90      	pop	{r4, r7, pc}

08008908 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8008908:	b590      	push	{r4, r7, lr}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800891a:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8008928:	fb02 f303 	mul.w	r3, r2, r3
 800892c:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008934:	bf28      	it	cs
 8008936:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800893a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008942:	695c      	ldr	r4, [r3, #20]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f103 010c 	add.w	r1, r3, #12
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8008956:	4618      	mov	r0, r3
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800895e:	b29b      	uxth	r3, r3
 8008960:	78f8      	ldrb	r0, [r7, #3]
 8008962:	47a0      	blx	r4
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	da08      	bge.n	800897c <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800896a:	78f9      	ldrb	r1, [r7, #3]
 800896c:	2303      	movs	r3, #3
 800896e:	2204      	movs	r2, #4
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f7ff fd77 	bl	8008464 <SCSI_SenseCode>

    return -1;
 8008976:	f04f 33ff 	mov.w	r3, #4294967295
 800897a:	e045      	b.n	8008a08 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8008988:	4619      	mov	r1, r3
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008990:	441a      	add	r2, r3
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80089a4:	4619      	mov	r1, r3
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80089ac:	1ad2      	subs	r2, r2, r3
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	1ad2      	subs	r2, r2, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d104      	bne.n	80089d8 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80089ce:	2100      	movs	r1, #0
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7ff f97f 	bl	8007cd4 <MSC_BOT_SendCSW>
 80089d6:	e016      	b.n	8008a06 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 80089e4:	fb02 f303 	mul.w	r3, r2, r3
 80089e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089ec:	bf28      	it	cs
 80089ee:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80089f2:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f103 020c 	add.w	r2, r3, #12
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	2101      	movs	r1, #1
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f001 fcb4 	bl	800a36e <USBD_LL_PrepareReceive>
  }

  return 0;
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3714      	adds	r7, #20
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd90      	pop	{r4, r7, pc}

08008a10 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d101      	bne.n	8008a28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008a24:	2302      	movs	r3, #2
 8008a26:	e01a      	b.n	8008a5e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d003      	beq.n	8008a3a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d003      	beq.n	8008a48 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	79fa      	ldrb	r2, [r7, #7]
 8008a54:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f001 fb0e 	bl	800a078 <USBD_LL_Init>

  return USBD_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b085      	sub	sp, #20
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008a70:	2300      	movs	r3, #0
 8008a72:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d006      	beq.n	8008a88 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	683a      	ldr	r2, [r7, #0]
 8008a7e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	73fb      	strb	r3, [r7, #15]
 8008a86:	e001      	b.n	8008a8c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008a88:	2302      	movs	r3, #2
 8008a8a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3714      	adds	r7, #20
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bc80      	pop	{r7}
 8008a96:	4770      	bx	lr

08008a98 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f001 fb39 	bl	800a118 <USBD_LL_Start>

  return USBD_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bc80      	pop	{r7}
 8008ac2:	4770      	bx	lr

08008ac4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	460b      	mov	r3, r1
 8008ace:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008ad0:	2302      	movs	r3, #2
 8008ad2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00c      	beq.n	8008af8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	78fa      	ldrb	r2, [r7, #3]
 8008ae8:	4611      	mov	r1, r2
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	4798      	blx	r3
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d101      	bne.n	8008af8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b082      	sub	sp, #8
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	78fa      	ldrb	r2, [r7, #3]
 8008b18:	4611      	mov	r1, r2
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	4798      	blx	r3

  return USBD_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008b38:	6839      	ldr	r1, [r7, #0]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 fed7 	bl	80098ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008b4e:	461a      	mov	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008b5c:	f003 031f 	and.w	r3, r3, #31
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d016      	beq.n	8008b92 <USBD_LL_SetupStage+0x6a>
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d81c      	bhi.n	8008ba2 <USBD_LL_SetupStage+0x7a>
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d002      	beq.n	8008b72 <USBD_LL_SetupStage+0x4a>
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d008      	beq.n	8008b82 <USBD_LL_SetupStage+0x5a>
 8008b70:	e017      	b.n	8008ba2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f9ca 	bl	8008f14 <USBD_StdDevReq>
      break;
 8008b80:	e01a      	b.n	8008bb8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008b88:	4619      	mov	r1, r3
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fa2c 	bl	8008fe8 <USBD_StdItfReq>
      break;
 8008b90:	e012      	b.n	8008bb8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008b98:	4619      	mov	r1, r3
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fa6c 	bl	8009078 <USBD_StdEPReq>
      break;
 8008ba0:	e00a      	b.n	8008bb8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008ba8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	4619      	mov	r1, r3
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f001 fb30 	bl	800a216 <USBD_LL_StallEP>
      break;
 8008bb6:	bf00      	nop
  }

  return USBD_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b086      	sub	sp, #24
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	60f8      	str	r0, [r7, #12]
 8008bca:	460b      	mov	r3, r1
 8008bcc:	607a      	str	r2, [r7, #4]
 8008bce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008bd0:	7afb      	ldrb	r3, [r7, #11]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d14b      	bne.n	8008c6e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008bdc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008be4:	2b03      	cmp	r3, #3
 8008be6:	d134      	bne.n	8008c52 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	68da      	ldr	r2, [r3, #12]
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d919      	bls.n	8008c28 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	68da      	ldr	r2, [r3, #12]
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	691b      	ldr	r3, [r3, #16]
 8008bfc:	1ad2      	subs	r2, r2, r3
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	68da      	ldr	r2, [r3, #12]
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d203      	bcs.n	8008c16 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	e002      	b.n	8008c1c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	6879      	ldr	r1, [r7, #4]
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f000 ff38 	bl	8009a96 <USBD_CtlContinueRx>
 8008c26:	e038      	b.n	8008c9a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c2e:	691b      	ldr	r3, [r3, #16]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00a      	beq.n	8008c4a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008c3a:	2b03      	cmp	r3, #3
 8008c3c:	d105      	bne.n	8008c4a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f000 ff35 	bl	8009aba <USBD_CtlSendStatus>
 8008c50:	e023      	b.n	8008c9a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c58:	2b05      	cmp	r3, #5
 8008c5a:	d11e      	bne.n	8008c9a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008c64:	2100      	movs	r1, #0
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f001 fad5 	bl	800a216 <USBD_LL_StallEP>
 8008c6c:	e015      	b.n	8008c9a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c74:	699b      	ldr	r3, [r3, #24]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00d      	beq.n	8008c96 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008c80:	2b03      	cmp	r3, #3
 8008c82:	d108      	bne.n	8008c96 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	7afa      	ldrb	r2, [r7, #11]
 8008c8e:	4611      	mov	r1, r2
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	4798      	blx	r3
 8008c94:	e001      	b.n	8008c9a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008c96:	2302      	movs	r3, #2
 8008c98:	e000      	b.n	8008c9c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b086      	sub	sp, #24
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	460b      	mov	r3, r1
 8008cae:	607a      	str	r2, [r7, #4]
 8008cb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008cb2:	7afb      	ldrb	r3, [r7, #11]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d17f      	bne.n	8008db8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	3314      	adds	r3, #20
 8008cbc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008cc4:	2b02      	cmp	r3, #2
 8008cc6:	d15c      	bne.n	8008d82 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	68da      	ldr	r2, [r3, #12]
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d915      	bls.n	8008d00 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	68da      	ldr	r2, [r3, #12]
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	1ad2      	subs	r2, r2, r3
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	461a      	mov	r2, r3
 8008cea:	6879      	ldr	r1, [r7, #4]
 8008cec:	68f8      	ldr	r0, [r7, #12]
 8008cee:	f000 fec0 	bl	8009a72 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f001 fb38 	bl	800a36e <USBD_LL_PrepareReceive>
 8008cfe:	e04e      	b.n	8008d9e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	697a      	ldr	r2, [r7, #20]
 8008d06:	6912      	ldr	r2, [r2, #16]
 8008d08:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d0c:	fb02 f201 	mul.w	r2, r2, r1
 8008d10:	1a9b      	subs	r3, r3, r2
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d11c      	bne.n	8008d50 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	689a      	ldr	r2, [r3, #8]
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d316      	bcc.n	8008d50 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	689a      	ldr	r2, [r3, #8]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d20f      	bcs.n	8008d50 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008d30:	2200      	movs	r2, #0
 8008d32:	2100      	movs	r1, #0
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f000 fe9c 	bl	8009a72 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d42:	2300      	movs	r3, #0
 8008d44:	2200      	movs	r2, #0
 8008d46:	2100      	movs	r1, #0
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f001 fb10 	bl	800a36e <USBD_LL_PrepareReceive>
 8008d4e:	e026      	b.n	8008d9e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00a      	beq.n	8008d72 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	d105      	bne.n	8008d72 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008d72:	2180      	movs	r1, #128	; 0x80
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	f001 fa4e 	bl	800a216 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f000 feb0 	bl	8009ae0 <USBD_CtlReceiveStatus>
 8008d80:	e00d      	b.n	8008d9e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d88:	2b04      	cmp	r3, #4
 8008d8a:	d004      	beq.n	8008d96 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d103      	bne.n	8008d9e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008d96:	2180      	movs	r1, #128	; 0x80
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f001 fa3c 	bl	800a216 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d11d      	bne.n	8008de4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f7ff fe81 	bl	8008ab0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008db6:	e015      	b.n	8008de4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dbe:	695b      	ldr	r3, [r3, #20]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00d      	beq.n	8008de0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008dca:	2b03      	cmp	r3, #3
 8008dcc:	d108      	bne.n	8008de0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dd4:	695b      	ldr	r3, [r3, #20]
 8008dd6:	7afa      	ldrb	r2, [r7, #11]
 8008dd8:	4611      	mov	r1, r2
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	4798      	blx	r3
 8008dde:	e001      	b.n	8008de4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008de0:	2302      	movs	r3, #2
 8008de2:	e000      	b.n	8008de6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3718      	adds	r7, #24
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b082      	sub	sp, #8
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008df6:	2340      	movs	r3, #64	; 0x40
 8008df8:	2200      	movs	r2, #0
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f001 f9a6 	bl	800a14e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2201      	movs	r2, #1
 8008e06:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2240      	movs	r2, #64	; 0x40
 8008e0e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e12:	2340      	movs	r3, #64	; 0x40
 8008e14:	2200      	movs	r2, #0
 8008e16:	2180      	movs	r1, #128	; 0x80
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f001 f998 	bl	800a14e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2201      	movs	r2, #1
 8008e22:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2240      	movs	r2, #64	; 0x40
 8008e28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d009      	beq.n	8008e66 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	6852      	ldr	r2, [r2, #4]
 8008e5e:	b2d2      	uxtb	r2, r2
 8008e60:	4611      	mov	r1, r2
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	4798      	blx	r3
  }

  return USBD_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	460b      	mov	r3, r1
 8008e7a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	78fa      	ldrb	r2, [r7, #3]
 8008e80:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bc80      	pop	{r7}
 8008e8c:	4770      	bx	lr

08008e8e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e8e:	b480      	push	{r7}
 8008e90:	b083      	sub	sp, #12
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2204      	movs	r2, #4
 8008ea6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bc80      	pop	{r7}
 8008eb4:	4770      	bx	lr

08008eb6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008eb6:	b480      	push	{r7}
 8008eb8:	b083      	sub	sp, #12
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ec4:	2b04      	cmp	r3, #4
 8008ec6:	d105      	bne.n	8008ed4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	370c      	adds	r7, #12
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bc80      	pop	{r7}
 8008ede:	4770      	bx	lr

08008ee0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eee:	2b03      	cmp	r3, #3
 8008ef0:	d10b      	bne.n	8008f0a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ef8:	69db      	ldr	r3, [r3, #28]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d005      	beq.n	8008f0a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f04:	69db      	ldr	r3, [r3, #28]
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f2a:	2b40      	cmp	r3, #64	; 0x40
 8008f2c:	d005      	beq.n	8008f3a <USBD_StdDevReq+0x26>
 8008f2e:	2b40      	cmp	r3, #64	; 0x40
 8008f30:	d84f      	bhi.n	8008fd2 <USBD_StdDevReq+0xbe>
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d009      	beq.n	8008f4a <USBD_StdDevReq+0x36>
 8008f36:	2b20      	cmp	r3, #32
 8008f38:	d14b      	bne.n	8008fd2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	4798      	blx	r3
      break;
 8008f48:	e048      	b.n	8008fdc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	785b      	ldrb	r3, [r3, #1]
 8008f4e:	2b09      	cmp	r3, #9
 8008f50:	d839      	bhi.n	8008fc6 <USBD_StdDevReq+0xb2>
 8008f52:	a201      	add	r2, pc, #4	; (adr r2, 8008f58 <USBD_StdDevReq+0x44>)
 8008f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f58:	08008fa9 	.word	0x08008fa9
 8008f5c:	08008fbd 	.word	0x08008fbd
 8008f60:	08008fc7 	.word	0x08008fc7
 8008f64:	08008fb3 	.word	0x08008fb3
 8008f68:	08008fc7 	.word	0x08008fc7
 8008f6c:	08008f8b 	.word	0x08008f8b
 8008f70:	08008f81 	.word	0x08008f81
 8008f74:	08008fc7 	.word	0x08008fc7
 8008f78:	08008f9f 	.word	0x08008f9f
 8008f7c:	08008f95 	.word	0x08008f95
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008f80:	6839      	ldr	r1, [r7, #0]
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f9dc 	bl	8009340 <USBD_GetDescriptor>
          break;
 8008f88:	e022      	b.n	8008fd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008f8a:	6839      	ldr	r1, [r7, #0]
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 fb3f 	bl	8009610 <USBD_SetAddress>
          break;
 8008f92:	e01d      	b.n	8008fd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008f94:	6839      	ldr	r1, [r7, #0]
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 fb7e 	bl	8009698 <USBD_SetConfig>
          break;
 8008f9c:	e018      	b.n	8008fd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008f9e:	6839      	ldr	r1, [r7, #0]
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fc07 	bl	80097b4 <USBD_GetConfig>
          break;
 8008fa6:	e013      	b.n	8008fd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fc37 	bl	800981e <USBD_GetStatus>
          break;
 8008fb0:	e00e      	b.n	8008fd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008fb2:	6839      	ldr	r1, [r7, #0]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fc65 	bl	8009884 <USBD_SetFeature>
          break;
 8008fba:	e009      	b.n	8008fd0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008fbc:	6839      	ldr	r1, [r7, #0]
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fc74 	bl	80098ac <USBD_ClrFeature>
          break;
 8008fc4:	e004      	b.n	8008fd0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008fc6:	6839      	ldr	r1, [r7, #0]
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fccc 	bl	8009966 <USBD_CtlError>
          break;
 8008fce:	bf00      	nop
      }
      break;
 8008fd0:	e004      	b.n	8008fdc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 fcc6 	bl	8009966 <USBD_CtlError>
      break;
 8008fda:	bf00      	nop
  }

  return ret;
 8008fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop

08008fe8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ffe:	2b40      	cmp	r3, #64	; 0x40
 8009000:	d005      	beq.n	800900e <USBD_StdItfReq+0x26>
 8009002:	2b40      	cmp	r3, #64	; 0x40
 8009004:	d82e      	bhi.n	8009064 <USBD_StdItfReq+0x7c>
 8009006:	2b00      	cmp	r3, #0
 8009008:	d001      	beq.n	800900e <USBD_StdItfReq+0x26>
 800900a:	2b20      	cmp	r3, #32
 800900c:	d12a      	bne.n	8009064 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009014:	3b01      	subs	r3, #1
 8009016:	2b02      	cmp	r3, #2
 8009018:	d81d      	bhi.n	8009056 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	889b      	ldrh	r3, [r3, #4]
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b01      	cmp	r3, #1
 8009022:	d813      	bhi.n	800904c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	6839      	ldr	r1, [r7, #0]
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	4798      	blx	r3
 8009032:	4603      	mov	r3, r0
 8009034:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	88db      	ldrh	r3, [r3, #6]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d110      	bne.n	8009060 <USBD_StdItfReq+0x78>
 800903e:	7bfb      	ldrb	r3, [r7, #15]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d10d      	bne.n	8009060 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 fd38 	bl	8009aba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800904a:	e009      	b.n	8009060 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800904c:	6839      	ldr	r1, [r7, #0]
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 fc89 	bl	8009966 <USBD_CtlError>
          break;
 8009054:	e004      	b.n	8009060 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 fc84 	bl	8009966 <USBD_CtlError>
          break;
 800905e:	e000      	b.n	8009062 <USBD_StdItfReq+0x7a>
          break;
 8009060:	bf00      	nop
      }
      break;
 8009062:	e004      	b.n	800906e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009064:	6839      	ldr	r1, [r7, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fc7d 	bl	8009966 <USBD_CtlError>
      break;
 800906c:	bf00      	nop
  }

  return USBD_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3710      	adds	r7, #16
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009082:	2300      	movs	r3, #0
 8009084:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	889b      	ldrh	r3, [r3, #4]
 800908a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009094:	2b40      	cmp	r3, #64	; 0x40
 8009096:	d007      	beq.n	80090a8 <USBD_StdEPReq+0x30>
 8009098:	2b40      	cmp	r3, #64	; 0x40
 800909a:	f200 8146 	bhi.w	800932a <USBD_StdEPReq+0x2b2>
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00a      	beq.n	80090b8 <USBD_StdEPReq+0x40>
 80090a2:	2b20      	cmp	r3, #32
 80090a4:	f040 8141 	bne.w	800932a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	6839      	ldr	r1, [r7, #0]
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	4798      	blx	r3
      break;
 80090b6:	e13d      	b.n	8009334 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090c0:	2b20      	cmp	r3, #32
 80090c2:	d10a      	bne.n	80090da <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	6839      	ldr	r1, [r7, #0]
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	4798      	blx	r3
 80090d2:	4603      	mov	r3, r0
 80090d4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80090d6:	7bfb      	ldrb	r3, [r7, #15]
 80090d8:	e12d      	b.n	8009336 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	785b      	ldrb	r3, [r3, #1]
 80090de:	2b03      	cmp	r3, #3
 80090e0:	d007      	beq.n	80090f2 <USBD_StdEPReq+0x7a>
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	f300 811b 	bgt.w	800931e <USBD_StdEPReq+0x2a6>
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d072      	beq.n	80091d2 <USBD_StdEPReq+0x15a>
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d03a      	beq.n	8009166 <USBD_StdEPReq+0xee>
 80090f0:	e115      	b.n	800931e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d002      	beq.n	8009102 <USBD_StdEPReq+0x8a>
 80090fc:	2b03      	cmp	r3, #3
 80090fe:	d015      	beq.n	800912c <USBD_StdEPReq+0xb4>
 8009100:	e02b      	b.n	800915a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009102:	7bbb      	ldrb	r3, [r7, #14]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00c      	beq.n	8009122 <USBD_StdEPReq+0xaa>
 8009108:	7bbb      	ldrb	r3, [r7, #14]
 800910a:	2b80      	cmp	r3, #128	; 0x80
 800910c:	d009      	beq.n	8009122 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800910e:	7bbb      	ldrb	r3, [r7, #14]
 8009110:	4619      	mov	r1, r3
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f001 f87f 	bl	800a216 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009118:	2180      	movs	r1, #128	; 0x80
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f001 f87b 	bl	800a216 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009120:	e020      	b.n	8009164 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009122:	6839      	ldr	r1, [r7, #0]
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 fc1e 	bl	8009966 <USBD_CtlError>
              break;
 800912a:	e01b      	b.n	8009164 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	885b      	ldrh	r3, [r3, #2]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10e      	bne.n	8009152 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009134:	7bbb      	ldrb	r3, [r7, #14]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00b      	beq.n	8009152 <USBD_StdEPReq+0xda>
 800913a:	7bbb      	ldrb	r3, [r7, #14]
 800913c:	2b80      	cmp	r3, #128	; 0x80
 800913e:	d008      	beq.n	8009152 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	88db      	ldrh	r3, [r3, #6]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d104      	bne.n	8009152 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009148:	7bbb      	ldrb	r3, [r7, #14]
 800914a:	4619      	mov	r1, r3
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f001 f862 	bl	800a216 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fcb1 	bl	8009aba <USBD_CtlSendStatus>

              break;
 8009158:	e004      	b.n	8009164 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800915a:	6839      	ldr	r1, [r7, #0]
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 fc02 	bl	8009966 <USBD_CtlError>
              break;
 8009162:	bf00      	nop
          }
          break;
 8009164:	e0e0      	b.n	8009328 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800916c:	2b02      	cmp	r3, #2
 800916e:	d002      	beq.n	8009176 <USBD_StdEPReq+0xfe>
 8009170:	2b03      	cmp	r3, #3
 8009172:	d015      	beq.n	80091a0 <USBD_StdEPReq+0x128>
 8009174:	e026      	b.n	80091c4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009176:	7bbb      	ldrb	r3, [r7, #14]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00c      	beq.n	8009196 <USBD_StdEPReq+0x11e>
 800917c:	7bbb      	ldrb	r3, [r7, #14]
 800917e:	2b80      	cmp	r3, #128	; 0x80
 8009180:	d009      	beq.n	8009196 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009182:	7bbb      	ldrb	r3, [r7, #14]
 8009184:	4619      	mov	r1, r3
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f001 f845 	bl	800a216 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800918c:	2180      	movs	r1, #128	; 0x80
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f001 f841 	bl	800a216 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009194:	e01c      	b.n	80091d0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009196:	6839      	ldr	r1, [r7, #0]
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 fbe4 	bl	8009966 <USBD_CtlError>
              break;
 800919e:	e017      	b.n	80091d0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	885b      	ldrh	r3, [r3, #2]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d112      	bne.n	80091ce <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80091a8:	7bbb      	ldrb	r3, [r7, #14]
 80091aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d004      	beq.n	80091bc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80091b2:	7bbb      	ldrb	r3, [r7, #14]
 80091b4:	4619      	mov	r1, r3
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f001 f84c 	bl	800a254 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fc7c 	bl	8009aba <USBD_CtlSendStatus>
              }
              break;
 80091c2:	e004      	b.n	80091ce <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80091c4:	6839      	ldr	r1, [r7, #0]
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fbcd 	bl	8009966 <USBD_CtlError>
              break;
 80091cc:	e000      	b.n	80091d0 <USBD_StdEPReq+0x158>
              break;
 80091ce:	bf00      	nop
          }
          break;
 80091d0:	e0aa      	b.n	8009328 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091d8:	2b02      	cmp	r3, #2
 80091da:	d002      	beq.n	80091e2 <USBD_StdEPReq+0x16a>
 80091dc:	2b03      	cmp	r3, #3
 80091de:	d032      	beq.n	8009246 <USBD_StdEPReq+0x1ce>
 80091e0:	e097      	b.n	8009312 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091e2:	7bbb      	ldrb	r3, [r7, #14]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d007      	beq.n	80091f8 <USBD_StdEPReq+0x180>
 80091e8:	7bbb      	ldrb	r3, [r7, #14]
 80091ea:	2b80      	cmp	r3, #128	; 0x80
 80091ec:	d004      	beq.n	80091f8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80091ee:	6839      	ldr	r1, [r7, #0]
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 fbb8 	bl	8009966 <USBD_CtlError>
                break;
 80091f6:	e091      	b.n	800931c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	da0b      	bge.n	8009218 <USBD_StdEPReq+0x1a0>
 8009200:	7bbb      	ldrb	r3, [r7, #14]
 8009202:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009206:	4613      	mov	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	4413      	add	r3, r2
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	3310      	adds	r3, #16
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	4413      	add	r3, r2
 8009214:	3304      	adds	r3, #4
 8009216:	e00b      	b.n	8009230 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009218:	7bbb      	ldrb	r3, [r7, #14]
 800921a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800921e:	4613      	mov	r3, r2
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	4413      	add	r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	4413      	add	r3, r2
 800922e:	3304      	adds	r3, #4
 8009230:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	2200      	movs	r2, #0
 8009236:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	2202      	movs	r2, #2
 800923c:	4619      	mov	r1, r3
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fbfb 	bl	8009a3a <USBD_CtlSendData>
              break;
 8009244:	e06a      	b.n	800931c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009246:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800924a:	2b00      	cmp	r3, #0
 800924c:	da11      	bge.n	8009272 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800924e:	7bbb      	ldrb	r3, [r7, #14]
 8009250:	f003 020f 	and.w	r2, r3, #15
 8009254:	6879      	ldr	r1, [r7, #4]
 8009256:	4613      	mov	r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	4413      	add	r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	440b      	add	r3, r1
 8009260:	3318      	adds	r3, #24
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d117      	bne.n	8009298 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009268:	6839      	ldr	r1, [r7, #0]
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fb7b 	bl	8009966 <USBD_CtlError>
                  break;
 8009270:	e054      	b.n	800931c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009272:	7bbb      	ldrb	r3, [r7, #14]
 8009274:	f003 020f 	and.w	r2, r3, #15
 8009278:	6879      	ldr	r1, [r7, #4]
 800927a:	4613      	mov	r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4413      	add	r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	440b      	add	r3, r1
 8009284:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d104      	bne.n	8009298 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800928e:	6839      	ldr	r1, [r7, #0]
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fb68 	bl	8009966 <USBD_CtlError>
                  break;
 8009296:	e041      	b.n	800931c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009298:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800929c:	2b00      	cmp	r3, #0
 800929e:	da0b      	bge.n	80092b8 <USBD_StdEPReq+0x240>
 80092a0:	7bbb      	ldrb	r3, [r7, #14]
 80092a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092a6:	4613      	mov	r3, r2
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	4413      	add	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	3310      	adds	r3, #16
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	4413      	add	r3, r2
 80092b4:	3304      	adds	r3, #4
 80092b6:	e00b      	b.n	80092d0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80092b8:	7bbb      	ldrb	r3, [r7, #14]
 80092ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092be:	4613      	mov	r3, r2
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	4413      	add	r3, r2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	4413      	add	r3, r2
 80092ce:	3304      	adds	r3, #4
 80092d0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80092d2:	7bbb      	ldrb	r3, [r7, #14]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d002      	beq.n	80092de <USBD_StdEPReq+0x266>
 80092d8:	7bbb      	ldrb	r3, [r7, #14]
 80092da:	2b80      	cmp	r3, #128	; 0x80
 80092dc:	d103      	bne.n	80092e6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	2200      	movs	r2, #0
 80092e2:	601a      	str	r2, [r3, #0]
 80092e4:	e00e      	b.n	8009304 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80092e6:	7bbb      	ldrb	r3, [r7, #14]
 80092e8:	4619      	mov	r1, r3
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 ffd1 	bl	800a292 <USBD_LL_IsStallEP>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d003      	beq.n	80092fe <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	2201      	movs	r2, #1
 80092fa:	601a      	str	r2, [r3, #0]
 80092fc:	e002      	b.n	8009304 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	2200      	movs	r2, #0
 8009302:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	2202      	movs	r2, #2
 8009308:	4619      	mov	r1, r3
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fb95 	bl	8009a3a <USBD_CtlSendData>
              break;
 8009310:	e004      	b.n	800931c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009312:	6839      	ldr	r1, [r7, #0]
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 fb26 	bl	8009966 <USBD_CtlError>
              break;
 800931a:	bf00      	nop
          }
          break;
 800931c:	e004      	b.n	8009328 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fb20 	bl	8009966 <USBD_CtlError>
          break;
 8009326:	bf00      	nop
      }
      break;
 8009328:	e004      	b.n	8009334 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800932a:	6839      	ldr	r1, [r7, #0]
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 fb1a 	bl	8009966 <USBD_CtlError>
      break;
 8009332:	bf00      	nop
  }

  return ret;
 8009334:	7bfb      	ldrb	r3, [r7, #15]
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
	...

08009340 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800934a:	2300      	movs	r3, #0
 800934c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800934e:	2300      	movs	r3, #0
 8009350:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009352:	2300      	movs	r3, #0
 8009354:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	885b      	ldrh	r3, [r3, #2]
 800935a:	0a1b      	lsrs	r3, r3, #8
 800935c:	b29b      	uxth	r3, r3
 800935e:	3b01      	subs	r3, #1
 8009360:	2b06      	cmp	r3, #6
 8009362:	f200 8128 	bhi.w	80095b6 <USBD_GetDescriptor+0x276>
 8009366:	a201      	add	r2, pc, #4	; (adr r2, 800936c <USBD_GetDescriptor+0x2c>)
 8009368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800936c:	08009389 	.word	0x08009389
 8009370:	080093a1 	.word	0x080093a1
 8009374:	080093e1 	.word	0x080093e1
 8009378:	080095b7 	.word	0x080095b7
 800937c:	080095b7 	.word	0x080095b7
 8009380:	08009557 	.word	0x08009557
 8009384:	08009583 	.word	0x08009583
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	7c12      	ldrb	r2, [r2, #16]
 8009394:	f107 0108 	add.w	r1, r7, #8
 8009398:	4610      	mov	r0, r2
 800939a:	4798      	blx	r3
 800939c:	60f8      	str	r0, [r7, #12]
      break;
 800939e:	e112      	b.n	80095c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	7c1b      	ldrb	r3, [r3, #16]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d10d      	bne.n	80093c4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b0:	f107 0208 	add.w	r2, r7, #8
 80093b4:	4610      	mov	r0, r2
 80093b6:	4798      	blx	r3
 80093b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	3301      	adds	r3, #1
 80093be:	2202      	movs	r2, #2
 80093c0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80093c2:	e100      	b.n	80095c6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093cc:	f107 0208 	add.w	r2, r7, #8
 80093d0:	4610      	mov	r0, r2
 80093d2:	4798      	blx	r3
 80093d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	3301      	adds	r3, #1
 80093da:	2202      	movs	r2, #2
 80093dc:	701a      	strb	r2, [r3, #0]
      break;
 80093de:	e0f2      	b.n	80095c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	885b      	ldrh	r3, [r3, #2]
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	2b05      	cmp	r3, #5
 80093e8:	f200 80ac 	bhi.w	8009544 <USBD_GetDescriptor+0x204>
 80093ec:	a201      	add	r2, pc, #4	; (adr r2, 80093f4 <USBD_GetDescriptor+0xb4>)
 80093ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f2:	bf00      	nop
 80093f4:	0800940d 	.word	0x0800940d
 80093f8:	08009441 	.word	0x08009441
 80093fc:	08009475 	.word	0x08009475
 8009400:	080094a9 	.word	0x080094a9
 8009404:	080094dd 	.word	0x080094dd
 8009408:	08009511 	.word	0x08009511
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00b      	beq.n	8009430 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	7c12      	ldrb	r2, [r2, #16]
 8009424:	f107 0108 	add.w	r1, r7, #8
 8009428:	4610      	mov	r0, r2
 800942a:	4798      	blx	r3
 800942c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800942e:	e091      	b.n	8009554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009430:	6839      	ldr	r1, [r7, #0]
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 fa97 	bl	8009966 <USBD_CtlError>
            err++;
 8009438:	7afb      	ldrb	r3, [r7, #11]
 800943a:	3301      	adds	r3, #1
 800943c:	72fb      	strb	r3, [r7, #11]
          break;
 800943e:	e089      	b.n	8009554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00b      	beq.n	8009464 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	7c12      	ldrb	r2, [r2, #16]
 8009458:	f107 0108 	add.w	r1, r7, #8
 800945c:	4610      	mov	r0, r2
 800945e:	4798      	blx	r3
 8009460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009462:	e077      	b.n	8009554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009464:	6839      	ldr	r1, [r7, #0]
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 fa7d 	bl	8009966 <USBD_CtlError>
            err++;
 800946c:	7afb      	ldrb	r3, [r7, #11]
 800946e:	3301      	adds	r3, #1
 8009470:	72fb      	strb	r3, [r7, #11]
          break;
 8009472:	e06f      	b.n	8009554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00b      	beq.n	8009498 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	7c12      	ldrb	r2, [r2, #16]
 800948c:	f107 0108 	add.w	r1, r7, #8
 8009490:	4610      	mov	r0, r2
 8009492:	4798      	blx	r3
 8009494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009496:	e05d      	b.n	8009554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009498:	6839      	ldr	r1, [r7, #0]
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fa63 	bl	8009966 <USBD_CtlError>
            err++;
 80094a0:	7afb      	ldrb	r3, [r7, #11]
 80094a2:	3301      	adds	r3, #1
 80094a4:	72fb      	strb	r3, [r7, #11]
          break;
 80094a6:	e055      	b.n	8009554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094ae:	691b      	ldr	r3, [r3, #16]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00b      	beq.n	80094cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	7c12      	ldrb	r2, [r2, #16]
 80094c0:	f107 0108 	add.w	r1, r7, #8
 80094c4:	4610      	mov	r0, r2
 80094c6:	4798      	blx	r3
 80094c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094ca:	e043      	b.n	8009554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fa49 	bl	8009966 <USBD_CtlError>
            err++;
 80094d4:	7afb      	ldrb	r3, [r7, #11]
 80094d6:	3301      	adds	r3, #1
 80094d8:	72fb      	strb	r3, [r7, #11]
          break;
 80094da:	e03b      	b.n	8009554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094e2:	695b      	ldr	r3, [r3, #20]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00b      	beq.n	8009500 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094ee:	695b      	ldr	r3, [r3, #20]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	7c12      	ldrb	r2, [r2, #16]
 80094f4:	f107 0108 	add.w	r1, r7, #8
 80094f8:	4610      	mov	r0, r2
 80094fa:	4798      	blx	r3
 80094fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094fe:	e029      	b.n	8009554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 fa2f 	bl	8009966 <USBD_CtlError>
            err++;
 8009508:	7afb      	ldrb	r3, [r7, #11]
 800950a:	3301      	adds	r3, #1
 800950c:	72fb      	strb	r3, [r7, #11]
          break;
 800950e:	e021      	b.n	8009554 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009516:	699b      	ldr	r3, [r3, #24]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00b      	beq.n	8009534 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009522:	699b      	ldr	r3, [r3, #24]
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	7c12      	ldrb	r2, [r2, #16]
 8009528:	f107 0108 	add.w	r1, r7, #8
 800952c:	4610      	mov	r0, r2
 800952e:	4798      	blx	r3
 8009530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009532:	e00f      	b.n	8009554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009534:	6839      	ldr	r1, [r7, #0]
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 fa15 	bl	8009966 <USBD_CtlError>
            err++;
 800953c:	7afb      	ldrb	r3, [r7, #11]
 800953e:	3301      	adds	r3, #1
 8009540:	72fb      	strb	r3, [r7, #11]
          break;
 8009542:	e007      	b.n	8009554 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009544:	6839      	ldr	r1, [r7, #0]
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 fa0d 	bl	8009966 <USBD_CtlError>
          err++;
 800954c:	7afb      	ldrb	r3, [r7, #11]
 800954e:	3301      	adds	r3, #1
 8009550:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009552:	e038      	b.n	80095c6 <USBD_GetDescriptor+0x286>
 8009554:	e037      	b.n	80095c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	7c1b      	ldrb	r3, [r3, #16]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d109      	bne.n	8009572 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009566:	f107 0208 	add.w	r2, r7, #8
 800956a:	4610      	mov	r0, r2
 800956c:	4798      	blx	r3
 800956e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009570:	e029      	b.n	80095c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f9f6 	bl	8009966 <USBD_CtlError>
        err++;
 800957a:	7afb      	ldrb	r3, [r7, #11]
 800957c:	3301      	adds	r3, #1
 800957e:	72fb      	strb	r3, [r7, #11]
      break;
 8009580:	e021      	b.n	80095c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	7c1b      	ldrb	r3, [r3, #16]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d10d      	bne.n	80095a6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009592:	f107 0208 	add.w	r2, r7, #8
 8009596:	4610      	mov	r0, r2
 8009598:	4798      	blx	r3
 800959a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	3301      	adds	r3, #1
 80095a0:	2207      	movs	r2, #7
 80095a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095a4:	e00f      	b.n	80095c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80095a6:	6839      	ldr	r1, [r7, #0]
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 f9dc 	bl	8009966 <USBD_CtlError>
        err++;
 80095ae:	7afb      	ldrb	r3, [r7, #11]
 80095b0:	3301      	adds	r3, #1
 80095b2:	72fb      	strb	r3, [r7, #11]
      break;
 80095b4:	e007      	b.n	80095c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80095b6:	6839      	ldr	r1, [r7, #0]
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 f9d4 	bl	8009966 <USBD_CtlError>
      err++;
 80095be:	7afb      	ldrb	r3, [r7, #11]
 80095c0:	3301      	adds	r3, #1
 80095c2:	72fb      	strb	r3, [r7, #11]
      break;
 80095c4:	bf00      	nop
  }

  if (err != 0U)
 80095c6:	7afb      	ldrb	r3, [r7, #11]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d11c      	bne.n	8009606 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80095cc:	893b      	ldrh	r3, [r7, #8]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d011      	beq.n	80095f6 <USBD_GetDescriptor+0x2b6>
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	88db      	ldrh	r3, [r3, #6]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d00d      	beq.n	80095f6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	88da      	ldrh	r2, [r3, #6]
 80095de:	893b      	ldrh	r3, [r7, #8]
 80095e0:	4293      	cmp	r3, r2
 80095e2:	bf28      	it	cs
 80095e4:	4613      	movcs	r3, r2
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80095ea:	893b      	ldrh	r3, [r7, #8]
 80095ec:	461a      	mov	r2, r3
 80095ee:	68f9      	ldr	r1, [r7, #12]
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 fa22 	bl	8009a3a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	88db      	ldrh	r3, [r3, #6]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d104      	bne.n	8009608 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 fa5b 	bl	8009aba <USBD_CtlSendStatus>
 8009604:	e000      	b.n	8009608 <USBD_GetDescriptor+0x2c8>
    return;
 8009606:	bf00      	nop
    }
  }
}
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop

08009610 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	889b      	ldrh	r3, [r3, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d130      	bne.n	8009684 <USBD_SetAddress+0x74>
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	88db      	ldrh	r3, [r3, #6]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d12c      	bne.n	8009684 <USBD_SetAddress+0x74>
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	885b      	ldrh	r3, [r3, #2]
 800962e:	2b7f      	cmp	r3, #127	; 0x7f
 8009630:	d828      	bhi.n	8009684 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	885b      	ldrh	r3, [r3, #2]
 8009636:	b2db      	uxtb	r3, r3
 8009638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800963c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009644:	2b03      	cmp	r3, #3
 8009646:	d104      	bne.n	8009652 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 f98b 	bl	8009966 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009650:	e01d      	b.n	800968e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	7bfa      	ldrb	r2, [r7, #15]
 8009656:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800965a:	7bfb      	ldrb	r3, [r7, #15]
 800965c:	4619      	mov	r1, r3
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 fe43 	bl	800a2ea <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 fa28 	bl	8009aba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800966a:	7bfb      	ldrb	r3, [r7, #15]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d004      	beq.n	800967a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2202      	movs	r2, #2
 8009674:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009678:	e009      	b.n	800968e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2201      	movs	r2, #1
 800967e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009682:	e004      	b.n	800968e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009684:	6839      	ldr	r1, [r7, #0]
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 f96d 	bl	8009966 <USBD_CtlError>
  }
}
 800968c:	bf00      	nop
 800968e:	bf00      	nop
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
	...

08009698 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	885b      	ldrh	r3, [r3, #2]
 80096a6:	b2da      	uxtb	r2, r3
 80096a8:	4b41      	ldr	r3, [pc, #260]	; (80097b0 <USBD_SetConfig+0x118>)
 80096aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80096ac:	4b40      	ldr	r3, [pc, #256]	; (80097b0 <USBD_SetConfig+0x118>)
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d904      	bls.n	80096be <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80096b4:	6839      	ldr	r1, [r7, #0]
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 f955 	bl	8009966 <USBD_CtlError>
 80096bc:	e075      	b.n	80097aa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	d002      	beq.n	80096ce <USBD_SetConfig+0x36>
 80096c8:	2b03      	cmp	r3, #3
 80096ca:	d023      	beq.n	8009714 <USBD_SetConfig+0x7c>
 80096cc:	e062      	b.n	8009794 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80096ce:	4b38      	ldr	r3, [pc, #224]	; (80097b0 <USBD_SetConfig+0x118>)
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d01a      	beq.n	800970c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80096d6:	4b36      	ldr	r3, [pc, #216]	; (80097b0 <USBD_SetConfig+0x118>)
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	461a      	mov	r2, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2203      	movs	r2, #3
 80096e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80096e8:	4b31      	ldr	r3, [pc, #196]	; (80097b0 <USBD_SetConfig+0x118>)
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	4619      	mov	r1, r3
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f7ff f9e8 	bl	8008ac4 <USBD_SetClassConfig>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d104      	bne.n	8009704 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80096fa:	6839      	ldr	r1, [r7, #0]
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 f932 	bl	8009966 <USBD_CtlError>
            return;
 8009702:	e052      	b.n	80097aa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f9d8 	bl	8009aba <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800970a:	e04e      	b.n	80097aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 f9d4 	bl	8009aba <USBD_CtlSendStatus>
        break;
 8009712:	e04a      	b.n	80097aa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009714:	4b26      	ldr	r3, [pc, #152]	; (80097b0 <USBD_SetConfig+0x118>)
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d112      	bne.n	8009742 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2202      	movs	r2, #2
 8009720:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009724:	4b22      	ldr	r3, [pc, #136]	; (80097b0 <USBD_SetConfig+0x118>)
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	461a      	mov	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800972e:	4b20      	ldr	r3, [pc, #128]	; (80097b0 <USBD_SetConfig+0x118>)
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	4619      	mov	r1, r3
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7ff f9e4 	bl	8008b02 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 f9bd 	bl	8009aba <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009740:	e033      	b.n	80097aa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009742:	4b1b      	ldr	r3, [pc, #108]	; (80097b0 <USBD_SetConfig+0x118>)
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	461a      	mov	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	429a      	cmp	r2, r3
 800974e:	d01d      	beq.n	800978c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	b2db      	uxtb	r3, r3
 8009756:	4619      	mov	r1, r3
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f7ff f9d2 	bl	8008b02 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800975e:	4b14      	ldr	r3, [pc, #80]	; (80097b0 <USBD_SetConfig+0x118>)
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	461a      	mov	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009768:	4b11      	ldr	r3, [pc, #68]	; (80097b0 <USBD_SetConfig+0x118>)
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	4619      	mov	r1, r3
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7ff f9a8 	bl	8008ac4 <USBD_SetClassConfig>
 8009774:	4603      	mov	r3, r0
 8009776:	2b02      	cmp	r3, #2
 8009778:	d104      	bne.n	8009784 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800977a:	6839      	ldr	r1, [r7, #0]
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 f8f2 	bl	8009966 <USBD_CtlError>
            return;
 8009782:	e012      	b.n	80097aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 f998 	bl	8009aba <USBD_CtlSendStatus>
        break;
 800978a:	e00e      	b.n	80097aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 f994 	bl	8009aba <USBD_CtlSendStatus>
        break;
 8009792:	e00a      	b.n	80097aa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009794:	6839      	ldr	r1, [r7, #0]
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f8e5 	bl	8009966 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800979c:	4b04      	ldr	r3, [pc, #16]	; (80097b0 <USBD_SetConfig+0x118>)
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	4619      	mov	r1, r3
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f7ff f9ad 	bl	8008b02 <USBD_ClrClassConfig>
        break;
 80097a8:	bf00      	nop
    }
  }
}
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	20000155 	.word	0x20000155

080097b4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	88db      	ldrh	r3, [r3, #6]
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d004      	beq.n	80097d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80097c6:	6839      	ldr	r1, [r7, #0]
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 f8cc 	bl	8009966 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80097ce:	e022      	b.n	8009816 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	dc02      	bgt.n	80097e0 <USBD_GetConfig+0x2c>
 80097da:	2b00      	cmp	r3, #0
 80097dc:	dc03      	bgt.n	80097e6 <USBD_GetConfig+0x32>
 80097de:	e015      	b.n	800980c <USBD_GetConfig+0x58>
 80097e0:	2b03      	cmp	r3, #3
 80097e2:	d00b      	beq.n	80097fc <USBD_GetConfig+0x48>
 80097e4:	e012      	b.n	800980c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	3308      	adds	r3, #8
 80097f0:	2201      	movs	r2, #1
 80097f2:	4619      	mov	r1, r3
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 f920 	bl	8009a3a <USBD_CtlSendData>
        break;
 80097fa:	e00c      	b.n	8009816 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	3304      	adds	r3, #4
 8009800:	2201      	movs	r2, #1
 8009802:	4619      	mov	r1, r3
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 f918 	bl	8009a3a <USBD_CtlSendData>
        break;
 800980a:	e004      	b.n	8009816 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 f8a9 	bl	8009966 <USBD_CtlError>
        break;
 8009814:	bf00      	nop
}
 8009816:	bf00      	nop
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b082      	sub	sp, #8
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
 8009826:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800982e:	3b01      	subs	r3, #1
 8009830:	2b02      	cmp	r3, #2
 8009832:	d81e      	bhi.n	8009872 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	88db      	ldrh	r3, [r3, #6]
 8009838:	2b02      	cmp	r3, #2
 800983a:	d004      	beq.n	8009846 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 f891 	bl	8009966 <USBD_CtlError>
        break;
 8009844:	e01a      	b.n	800987c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2201      	movs	r2, #1
 800984a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009852:	2b00      	cmp	r3, #0
 8009854:	d005      	beq.n	8009862 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	f043 0202 	orr.w	r2, r3, #2
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	330c      	adds	r3, #12
 8009866:	2202      	movs	r2, #2
 8009868:	4619      	mov	r1, r3
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f8e5 	bl	8009a3a <USBD_CtlSendData>
      break;
 8009870:	e004      	b.n	800987c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009872:	6839      	ldr	r1, [r7, #0]
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 f876 	bl	8009966 <USBD_CtlError>
      break;
 800987a:	bf00      	nop
  }
}
 800987c:	bf00      	nop
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	885b      	ldrh	r3, [r3, #2]
 8009892:	2b01      	cmp	r3, #1
 8009894:	d106      	bne.n	80098a4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2201      	movs	r2, #1
 800989a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 f90b 	bl	8009aba <USBD_CtlSendStatus>
  }
}
 80098a4:	bf00      	nop
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098bc:	3b01      	subs	r3, #1
 80098be:	2b02      	cmp	r3, #2
 80098c0:	d80b      	bhi.n	80098da <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	885b      	ldrh	r3, [r3, #2]
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d10c      	bne.n	80098e4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 f8f1 	bl	8009aba <USBD_CtlSendStatus>
      }
      break;
 80098d8:	e004      	b.n	80098e4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80098da:	6839      	ldr	r1, [r7, #0]
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 f842 	bl	8009966 <USBD_CtlError>
      break;
 80098e2:	e000      	b.n	80098e6 <USBD_ClrFeature+0x3a>
      break;
 80098e4:	bf00      	nop
  }
}
 80098e6:	bf00      	nop
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80098ee:	b480      	push	{r7}
 80098f0:	b083      	sub	sp, #12
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
 80098f6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	781a      	ldrb	r2, [r3, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	785a      	ldrb	r2, [r3, #1]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	3302      	adds	r3, #2
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	b29a      	uxth	r2, r3
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	3303      	adds	r3, #3
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	b29b      	uxth	r3, r3
 8009918:	021b      	lsls	r3, r3, #8
 800991a:	b29b      	uxth	r3, r3
 800991c:	4413      	add	r3, r2
 800991e:	b29a      	uxth	r2, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	3304      	adds	r3, #4
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	b29a      	uxth	r2, r3
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	3305      	adds	r3, #5
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	b29b      	uxth	r3, r3
 8009934:	021b      	lsls	r3, r3, #8
 8009936:	b29b      	uxth	r3, r3
 8009938:	4413      	add	r3, r2
 800993a:	b29a      	uxth	r2, r3
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	3306      	adds	r3, #6
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	b29a      	uxth	r2, r3
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	3307      	adds	r3, #7
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	b29b      	uxth	r3, r3
 8009950:	021b      	lsls	r3, r3, #8
 8009952:	b29b      	uxth	r3, r3
 8009954:	4413      	add	r3, r2
 8009956:	b29a      	uxth	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	80da      	strh	r2, [r3, #6]

}
 800995c:	bf00      	nop
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	bc80      	pop	{r7}
 8009964:	4770      	bx	lr

08009966 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b082      	sub	sp, #8
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
 800996e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009970:	2180      	movs	r1, #128	; 0x80
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 fc4f 	bl	800a216 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009978:	2100      	movs	r1, #0
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fc4b 	bl	800a216 <USBD_LL_StallEP>
}
 8009980:	bf00      	nop
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b086      	sub	sp, #24
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009994:	2300      	movs	r3, #0
 8009996:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d032      	beq.n	8009a04 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f000 f834 	bl	8009a0c <USBD_GetLen>
 80099a4:	4603      	mov	r3, r0
 80099a6:	3301      	adds	r3, #1
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	005b      	lsls	r3, r3, #1
 80099ac:	b29a      	uxth	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80099b2:	7dfb      	ldrb	r3, [r7, #23]
 80099b4:	1c5a      	adds	r2, r3, #1
 80099b6:	75fa      	strb	r2, [r7, #23]
 80099b8:	461a      	mov	r2, r3
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	4413      	add	r3, r2
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	7812      	ldrb	r2, [r2, #0]
 80099c2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80099c4:	7dfb      	ldrb	r3, [r7, #23]
 80099c6:	1c5a      	adds	r2, r3, #1
 80099c8:	75fa      	strb	r2, [r7, #23]
 80099ca:	461a      	mov	r2, r3
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	4413      	add	r3, r2
 80099d0:	2203      	movs	r2, #3
 80099d2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80099d4:	e012      	b.n	80099fc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	1c5a      	adds	r2, r3, #1
 80099da:	60fa      	str	r2, [r7, #12]
 80099dc:	7dfa      	ldrb	r2, [r7, #23]
 80099de:	1c51      	adds	r1, r2, #1
 80099e0:	75f9      	strb	r1, [r7, #23]
 80099e2:	4611      	mov	r1, r2
 80099e4:	68ba      	ldr	r2, [r7, #8]
 80099e6:	440a      	add	r2, r1
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80099ec:	7dfb      	ldrb	r3, [r7, #23]
 80099ee:	1c5a      	adds	r2, r3, #1
 80099f0:	75fa      	strb	r2, [r7, #23]
 80099f2:	461a      	mov	r2, r3
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	4413      	add	r3, r2
 80099f8:	2200      	movs	r2, #0
 80099fa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d1e8      	bne.n	80099d6 <USBD_GetString+0x4e>
    }
  }
}
 8009a04:	bf00      	nop
 8009a06:	3718      	adds	r7, #24
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b085      	sub	sp, #20
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009a14:	2300      	movs	r3, #0
 8009a16:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009a18:	e005      	b.n	8009a26 <USBD_GetLen+0x1a>
  {
    len++;
 8009a1a:	7bfb      	ldrb	r3, [r7, #15]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	3301      	adds	r3, #1
 8009a24:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d1f5      	bne.n	8009a1a <USBD_GetLen+0xe>
  }

  return len;
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3714      	adds	r7, #20
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bc80      	pop	{r7}
 8009a38:	4770      	bx	lr

08009a3a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b084      	sub	sp, #16
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	60f8      	str	r0, [r7, #12]
 8009a42:	60b9      	str	r1, [r7, #8]
 8009a44:	4613      	mov	r3, r2
 8009a46:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2202      	movs	r2, #2
 8009a4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009a50:	88fa      	ldrh	r2, [r7, #6]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009a56:	88fa      	ldrh	r2, [r7, #6]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a5c:	88fb      	ldrh	r3, [r7, #6]
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	2100      	movs	r1, #0
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f000 fc60 	bl	800a328 <USBD_LL_Transmit>

  return USBD_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b084      	sub	sp, #16
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	60f8      	str	r0, [r7, #12]
 8009a7a:	60b9      	str	r1, [r7, #8]
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009a80:	88fb      	ldrh	r3, [r7, #6]
 8009a82:	68ba      	ldr	r2, [r7, #8]
 8009a84:	2100      	movs	r1, #0
 8009a86:	68f8      	ldr	r0, [r7, #12]
 8009a88:	f000 fc4e 	bl	800a328 <USBD_LL_Transmit>

  return USBD_OK;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b084      	sub	sp, #16
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	60f8      	str	r0, [r7, #12]
 8009a9e:	60b9      	str	r1, [r7, #8]
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009aa4:	88fb      	ldrh	r3, [r7, #6]
 8009aa6:	68ba      	ldr	r2, [r7, #8]
 8009aa8:	2100      	movs	r1, #0
 8009aaa:	68f8      	ldr	r0, [r7, #12]
 8009aac:	f000 fc5f 	bl	800a36e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b082      	sub	sp, #8
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2204      	movs	r2, #4
 8009ac6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009aca:	2300      	movs	r3, #0
 8009acc:	2200      	movs	r2, #0
 8009ace:	2100      	movs	r1, #0
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 fc29 	bl	800a328 <USBD_LL_Transmit>

  return USBD_OK;
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2205      	movs	r2, #5
 8009aec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009af0:	2300      	movs	r3, #0
 8009af2:	2200      	movs	r2, #0
 8009af4:	2100      	movs	r1, #0
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 fc39 	bl	800a36e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
	...

08009b08 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b087      	sub	sp, #28
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	4613      	mov	r3, r2
 8009b14:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009b16:	2301      	movs	r3, #1
 8009b18:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8009b1e:	4b1e      	ldr	r3, [pc, #120]	; (8009b98 <FATFS_LinkDriverEx+0x90>)
 8009b20:	7a5b      	ldrb	r3, [r3, #9]
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d831      	bhi.n	8009b8c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009b28:	4b1b      	ldr	r3, [pc, #108]	; (8009b98 <FATFS_LinkDriverEx+0x90>)
 8009b2a:	7a5b      	ldrb	r3, [r3, #9]
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	461a      	mov	r2, r3
 8009b30:	4b19      	ldr	r3, [pc, #100]	; (8009b98 <FATFS_LinkDriverEx+0x90>)
 8009b32:	2100      	movs	r1, #0
 8009b34:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8009b36:	4b18      	ldr	r3, [pc, #96]	; (8009b98 <FATFS_LinkDriverEx+0x90>)
 8009b38:	7a5b      	ldrb	r3, [r3, #9]
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	4a16      	ldr	r2, [pc, #88]	; (8009b98 <FATFS_LinkDriverEx+0x90>)
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	4413      	add	r3, r2
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8009b46:	4b14      	ldr	r3, [pc, #80]	; (8009b98 <FATFS_LinkDriverEx+0x90>)
 8009b48:	7a5b      	ldrb	r3, [r3, #9]
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	4b12      	ldr	r3, [pc, #72]	; (8009b98 <FATFS_LinkDriverEx+0x90>)
 8009b50:	4413      	add	r3, r2
 8009b52:	79fa      	ldrb	r2, [r7, #7]
 8009b54:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009b56:	4b10      	ldr	r3, [pc, #64]	; (8009b98 <FATFS_LinkDriverEx+0x90>)
 8009b58:	7a5b      	ldrb	r3, [r3, #9]
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	1c5a      	adds	r2, r3, #1
 8009b5e:	b2d1      	uxtb	r1, r2
 8009b60:	4a0d      	ldr	r2, [pc, #52]	; (8009b98 <FATFS_LinkDriverEx+0x90>)
 8009b62:	7251      	strb	r1, [r2, #9]
 8009b64:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009b66:	7dbb      	ldrb	r3, [r7, #22]
 8009b68:	3330      	adds	r3, #48	; 0x30
 8009b6a:	b2da      	uxtb	r2, r3
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	3301      	adds	r3, #1
 8009b74:	223a      	movs	r2, #58	; 0x3a
 8009b76:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	3302      	adds	r3, #2
 8009b7c:	222f      	movs	r2, #47	; 0x2f
 8009b7e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	3303      	adds	r3, #3
 8009b84:	2200      	movs	r2, #0
 8009b86:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	371c      	adds	r7, #28
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bc80      	pop	{r7}
 8009b96:	4770      	bx	lr
 8009b98:	20000158 	.word	0x20000158

08009b9c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	6839      	ldr	r1, [r7, #0]
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f7ff ffac 	bl	8009b08 <FATFS_LinkDriverEx>
 8009bb0:	4603      	mov	r3, r0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
	...

08009bbc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	4912      	ldr	r1, [pc, #72]	; (8009c0c <MX_USB_DEVICE_Init+0x50>)
 8009bc4:	4812      	ldr	r0, [pc, #72]	; (8009c10 <MX_USB_DEVICE_Init+0x54>)
 8009bc6:	f7fe ff23 	bl	8008a10 <USBD_Init>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d001      	beq.n	8009bd4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009bd0:	f7f6 fc98 	bl	8000504 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8009bd4:	490f      	ldr	r1, [pc, #60]	; (8009c14 <MX_USB_DEVICE_Init+0x58>)
 8009bd6:	480e      	ldr	r0, [pc, #56]	; (8009c10 <MX_USB_DEVICE_Init+0x54>)
 8009bd8:	f7fe ff45 	bl	8008a66 <USBD_RegisterClass>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009be2:	f7f6 fc8f 	bl	8000504 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8009be6:	490c      	ldr	r1, [pc, #48]	; (8009c18 <MX_USB_DEVICE_Init+0x5c>)
 8009be8:	4809      	ldr	r0, [pc, #36]	; (8009c10 <MX_USB_DEVICE_Init+0x54>)
 8009bea:	f7fd fef1 	bl	80079d0 <USBD_MSC_RegisterStorage>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d001      	beq.n	8009bf8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009bf4:	f7f6 fc86 	bl	8000504 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009bf8:	4805      	ldr	r0, [pc, #20]	; (8009c10 <MX_USB_DEVICE_Init+0x54>)
 8009bfa:	f7fe ff4d 	bl	8008a98 <USBD_Start>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d001      	beq.n	8009c08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009c04:	f7f6 fc7e 	bl	8000504 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009c08:	bf00      	nop
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	200000c8 	.word	0x200000c8
 8009c10:	20000924 	.word	0x20000924
 8009c14:	20000024 	.word	0x20000024
 8009c18:	20000118 	.word	0x20000118

08009c1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	4603      	mov	r3, r0
 8009c24:	6039      	str	r1, [r7, #0]
 8009c26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	2212      	movs	r2, #18
 8009c2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009c2e:	4b03      	ldr	r3, [pc, #12]	; (8009c3c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bc80      	pop	{r7}
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	200000e4 	.word	0x200000e4

08009c40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	4603      	mov	r3, r0
 8009c48:	6039      	str	r1, [r7, #0]
 8009c4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	2204      	movs	r2, #4
 8009c50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009c52:	4b03      	ldr	r3, [pc, #12]	; (8009c60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bc80      	pop	{r7}
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	200000f8 	.word	0x200000f8

08009c64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	6039      	str	r1, [r7, #0]
 8009c6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c70:	79fb      	ldrb	r3, [r7, #7]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d105      	bne.n	8009c82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c76:	683a      	ldr	r2, [r7, #0]
 8009c78:	4907      	ldr	r1, [pc, #28]	; (8009c98 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c7a:	4808      	ldr	r0, [pc, #32]	; (8009c9c <USBD_FS_ProductStrDescriptor+0x38>)
 8009c7c:	f7ff fe84 	bl	8009988 <USBD_GetString>
 8009c80:	e004      	b.n	8009c8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c82:	683a      	ldr	r2, [r7, #0]
 8009c84:	4904      	ldr	r1, [pc, #16]	; (8009c98 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c86:	4805      	ldr	r0, [pc, #20]	; (8009c9c <USBD_FS_ProductStrDescriptor+0x38>)
 8009c88:	f7ff fe7e 	bl	8009988 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c8c:	4b02      	ldr	r3, [pc, #8]	; (8009c98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	20000be8 	.word	0x20000be8
 8009c9c:	0800a504 	.word	0x0800a504

08009ca0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	6039      	str	r1, [r7, #0]
 8009caa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009cac:	683a      	ldr	r2, [r7, #0]
 8009cae:	4904      	ldr	r1, [pc, #16]	; (8009cc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009cb0:	4804      	ldr	r0, [pc, #16]	; (8009cc4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009cb2:	f7ff fe69 	bl	8009988 <USBD_GetString>
  return USBD_StrDesc;
 8009cb6:	4b02      	ldr	r3, [pc, #8]	; (8009cc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3708      	adds	r7, #8
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	20000be8 	.word	0x20000be8
 8009cc4:	0800a518 	.word	0x0800a518

08009cc8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	4603      	mov	r3, r0
 8009cd0:	6039      	str	r1, [r7, #0]
 8009cd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	221a      	movs	r2, #26
 8009cd8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009cda:	f000 f843 	bl	8009d64 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009cde:	4b02      	ldr	r3, [pc, #8]	; (8009ce8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	200000fc 	.word	0x200000fc

08009cec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	6039      	str	r1, [r7, #0]
 8009cf6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009cf8:	79fb      	ldrb	r3, [r7, #7]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d105      	bne.n	8009d0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009cfe:	683a      	ldr	r2, [r7, #0]
 8009d00:	4907      	ldr	r1, [pc, #28]	; (8009d20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d02:	4808      	ldr	r0, [pc, #32]	; (8009d24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d04:	f7ff fe40 	bl	8009988 <USBD_GetString>
 8009d08:	e004      	b.n	8009d14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d0a:	683a      	ldr	r2, [r7, #0]
 8009d0c:	4904      	ldr	r1, [pc, #16]	; (8009d20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d0e:	4805      	ldr	r0, [pc, #20]	; (8009d24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d10:	f7ff fe3a 	bl	8009988 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d14:	4b02      	ldr	r3, [pc, #8]	; (8009d20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	20000be8 	.word	0x20000be8
 8009d24:	0800a52c 	.word	0x0800a52c

08009d28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	4603      	mov	r3, r0
 8009d30:	6039      	str	r1, [r7, #0]
 8009d32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d34:	79fb      	ldrb	r3, [r7, #7]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d105      	bne.n	8009d46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d3a:	683a      	ldr	r2, [r7, #0]
 8009d3c:	4907      	ldr	r1, [pc, #28]	; (8009d5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d3e:	4808      	ldr	r0, [pc, #32]	; (8009d60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d40:	f7ff fe22 	bl	8009988 <USBD_GetString>
 8009d44:	e004      	b.n	8009d50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d46:	683a      	ldr	r2, [r7, #0]
 8009d48:	4904      	ldr	r1, [pc, #16]	; (8009d5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d4a:	4805      	ldr	r0, [pc, #20]	; (8009d60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d4c:	f7ff fe1c 	bl	8009988 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d50:	4b02      	ldr	r3, [pc, #8]	; (8009d5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	20000be8 	.word	0x20000be8
 8009d60:	0800a538 	.word	0x0800a538

08009d64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009d6a:	4b0f      	ldr	r3, [pc, #60]	; (8009da8 <Get_SerialNum+0x44>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009d70:	4b0e      	ldr	r3, [pc, #56]	; (8009dac <Get_SerialNum+0x48>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d76:	4b0e      	ldr	r3, [pc, #56]	; (8009db0 <Get_SerialNum+0x4c>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d7c:	68fa      	ldr	r2, [r7, #12]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4413      	add	r3, r2
 8009d82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d009      	beq.n	8009d9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d8a:	2208      	movs	r2, #8
 8009d8c:	4909      	ldr	r1, [pc, #36]	; (8009db4 <Get_SerialNum+0x50>)
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f000 f814 	bl	8009dbc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d94:	2204      	movs	r2, #4
 8009d96:	4908      	ldr	r1, [pc, #32]	; (8009db8 <Get_SerialNum+0x54>)
 8009d98:	68b8      	ldr	r0, [r7, #8]
 8009d9a:	f000 f80f 	bl	8009dbc <IntToUnicode>
  }
}
 8009d9e:	bf00      	nop
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	1ffff7e8 	.word	0x1ffff7e8
 8009dac:	1ffff7ec 	.word	0x1ffff7ec
 8009db0:	1ffff7f0 	.word	0x1ffff7f0
 8009db4:	200000fe 	.word	0x200000fe
 8009db8:	2000010e 	.word	0x2000010e

08009dbc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b087      	sub	sp, #28
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	4613      	mov	r3, r2
 8009dc8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009dce:	2300      	movs	r3, #0
 8009dd0:	75fb      	strb	r3, [r7, #23]
 8009dd2:	e027      	b.n	8009e24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	0f1b      	lsrs	r3, r3, #28
 8009dd8:	2b09      	cmp	r3, #9
 8009dda:	d80b      	bhi.n	8009df4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	0f1b      	lsrs	r3, r3, #28
 8009de0:	b2da      	uxtb	r2, r3
 8009de2:	7dfb      	ldrb	r3, [r7, #23]
 8009de4:	005b      	lsls	r3, r3, #1
 8009de6:	4619      	mov	r1, r3
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	440b      	add	r3, r1
 8009dec:	3230      	adds	r2, #48	; 0x30
 8009dee:	b2d2      	uxtb	r2, r2
 8009df0:	701a      	strb	r2, [r3, #0]
 8009df2:	e00a      	b.n	8009e0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	0f1b      	lsrs	r3, r3, #28
 8009df8:	b2da      	uxtb	r2, r3
 8009dfa:	7dfb      	ldrb	r3, [r7, #23]
 8009dfc:	005b      	lsls	r3, r3, #1
 8009dfe:	4619      	mov	r1, r3
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	440b      	add	r3, r1
 8009e04:	3237      	adds	r2, #55	; 0x37
 8009e06:	b2d2      	uxtb	r2, r2
 8009e08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	011b      	lsls	r3, r3, #4
 8009e0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009e10:	7dfb      	ldrb	r3, [r7, #23]
 8009e12:	005b      	lsls	r3, r3, #1
 8009e14:	3301      	adds	r3, #1
 8009e16:	68ba      	ldr	r2, [r7, #8]
 8009e18:	4413      	add	r3, r2
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009e1e:	7dfb      	ldrb	r3, [r7, #23]
 8009e20:	3301      	adds	r3, #1
 8009e22:	75fb      	strb	r3, [r7, #23]
 8009e24:	7dfa      	ldrb	r2, [r7, #23]
 8009e26:	79fb      	ldrb	r3, [r7, #7]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d3d3      	bcc.n	8009dd4 <IntToUnicode+0x18>
  }
}
 8009e2c:	bf00      	nop
 8009e2e:	bf00      	nop
 8009e30:	371c      	adds	r7, #28
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bc80      	pop	{r7}
 8009e36:	4770      	bx	lr

08009e38 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	4603      	mov	r3, r0
 8009e40:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8009e42:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bc80      	pop	{r7}
 8009e4c:	4770      	bx	lr

08009e4e <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8009e4e:	b480      	push	{r7}
 8009e50:	b085      	sub	sp, #20
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	4603      	mov	r3, r0
 8009e56:	60b9      	str	r1, [r7, #8]
 8009e58:	607a      	str	r2, [r7, #4]
 8009e5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009e62:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e6a:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8009e6c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3714      	adds	r7, #20
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bc80      	pop	{r7}
 8009e76:	4770      	bx	lr

08009e78 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	4603      	mov	r3, r0
 8009e80:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009e82:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bc80      	pop	{r7}
 8009e8c:	4770      	bx	lr

08009e8e <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b083      	sub	sp, #12
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	4603      	mov	r3, r0
 8009e96:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009e98:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	370c      	adds	r7, #12
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bc80      	pop	{r7}
 8009ea2:	4770      	bx	lr

08009ea4 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60b9      	str	r1, [r7, #8]
 8009eac:	607a      	str	r2, [r7, #4]
 8009eae:	461a      	mov	r2, r3
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	73fb      	strb	r3, [r7, #15]
 8009eb4:	4613      	mov	r3, r2
 8009eb6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8009eb8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3714      	adds	r7, #20
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bc80      	pop	{r7}
 8009ec2:	4770      	bx	lr

08009ec4 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60b9      	str	r1, [r7, #8]
 8009ecc:	607a      	str	r2, [r7, #4]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	73fb      	strb	r3, [r7, #15]
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 8009ed8:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3714      	adds	r7, #20
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bc80      	pop	{r7}
 8009ee2:	4770      	bx	lr

08009ee4 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8009ee8:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bc80      	pop	{r7}
 8009ef0:	4770      	bx	lr
	...

08009ef4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a0d      	ldr	r2, [pc, #52]	; (8009f38 <HAL_PCD_MspInit+0x44>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d113      	bne.n	8009f2e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009f06:	4b0d      	ldr	r3, [pc, #52]	; (8009f3c <HAL_PCD_MspInit+0x48>)
 8009f08:	69db      	ldr	r3, [r3, #28]
 8009f0a:	4a0c      	ldr	r2, [pc, #48]	; (8009f3c <HAL_PCD_MspInit+0x48>)
 8009f0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009f10:	61d3      	str	r3, [r2, #28]
 8009f12:	4b0a      	ldr	r3, [pc, #40]	; (8009f3c <HAL_PCD_MspInit+0x48>)
 8009f14:	69db      	ldr	r3, [r3, #28]
 8009f16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f1a:	60fb      	str	r3, [r7, #12]
 8009f1c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009f1e:	2200      	movs	r2, #0
 8009f20:	2100      	movs	r1, #0
 8009f22:	2014      	movs	r0, #20
 8009f24:	f7f6 ffc5 	bl	8000eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009f28:	2014      	movs	r0, #20
 8009f2a:	f7f6 ffde 	bl	8000eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009f2e:	bf00      	nop
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	40005c00 	.word	0x40005c00
 8009f3c:	40021000 	.word	0x40021000

08009f40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009f54:	4619      	mov	r1, r3
 8009f56:	4610      	mov	r0, r2
 8009f58:	f7fe fde6 	bl	8008b28 <USBD_LL_SetupStage>
}
 8009f5c:	bf00      	nop
 8009f5e:	3708      	adds	r7, #8
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009f76:	78fa      	ldrb	r2, [r7, #3]
 8009f78:	6879      	ldr	r1, [r7, #4]
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	4413      	add	r3, r2
 8009f80:	00db      	lsls	r3, r3, #3
 8009f82:	440b      	add	r3, r1
 8009f84:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	78fb      	ldrb	r3, [r7, #3]
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	f7fe fe18 	bl	8008bc2 <USBD_LL_DataOutStage>
}
 8009f92:	bf00      	nop
 8009f94:	3708      	adds	r7, #8
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b082      	sub	sp, #8
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009fac:	78fa      	ldrb	r2, [r7, #3]
 8009fae:	6879      	ldr	r1, [r7, #4]
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	4413      	add	r3, r2
 8009fb6:	00db      	lsls	r3, r3, #3
 8009fb8:	440b      	add	r3, r1
 8009fba:	333c      	adds	r3, #60	; 0x3c
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	78fb      	ldrb	r3, [r7, #3]
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	f7fe fe6f 	bl	8008ca4 <USBD_LL_DataInStage>
}
 8009fc6:	bf00      	nop
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b082      	sub	sp, #8
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f7fe ff7f 	bl	8008ee0 <USBD_LL_SOF>
}
 8009fe2:	bf00      	nop
 8009fe4:	3708      	adds	r7, #8
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b084      	sub	sp, #16
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	d001      	beq.n	800a002 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009ffe:	f7f6 fa81 	bl	8000504 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a008:	7bfa      	ldrb	r2, [r7, #15]
 800a00a:	4611      	mov	r1, r2
 800a00c:	4618      	mov	r0, r3
 800a00e:	f7fe ff2f 	bl	8008e70 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a018:	4618      	mov	r0, r3
 800a01a:	f7fe fee8 	bl	8008dee <USBD_LL_Reset>
}
 800a01e:	bf00      	nop
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
	...

0800a028 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a036:	4618      	mov	r0, r3
 800a038:	f7fe ff29 	bl	8008e8e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	699b      	ldr	r3, [r3, #24]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d005      	beq.n	800a050 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a044:	4b04      	ldr	r3, [pc, #16]	; (800a058 <HAL_PCD_SuspendCallback+0x30>)
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	4a03      	ldr	r2, [pc, #12]	; (800a058 <HAL_PCD_SuspendCallback+0x30>)
 800a04a:	f043 0306 	orr.w	r3, r3, #6
 800a04e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a050:	bf00      	nop
 800a052:	3708      	adds	r7, #8
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}
 800a058:	e000ed00 	.word	0xe000ed00

0800a05c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7fe ff23 	bl	8008eb6 <USBD_LL_Resume>
}
 800a070:	bf00      	nop
 800a072:	3708      	adds	r7, #8
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a080:	4a23      	ldr	r2, [pc, #140]	; (800a110 <USBD_LL_Init+0x98>)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a21      	ldr	r2, [pc, #132]	; (800a110 <USBD_LL_Init+0x98>)
 800a08c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a090:	4b1f      	ldr	r3, [pc, #124]	; (800a110 <USBD_LL_Init+0x98>)
 800a092:	4a20      	ldr	r2, [pc, #128]	; (800a114 <USBD_LL_Init+0x9c>)
 800a094:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a096:	4b1e      	ldr	r3, [pc, #120]	; (800a110 <USBD_LL_Init+0x98>)
 800a098:	2208      	movs	r2, #8
 800a09a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a09c:	4b1c      	ldr	r3, [pc, #112]	; (800a110 <USBD_LL_Init+0x98>)
 800a09e:	2202      	movs	r2, #2
 800a0a0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a0a2:	4b1b      	ldr	r3, [pc, #108]	; (800a110 <USBD_LL_Init+0x98>)
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a0a8:	4b19      	ldr	r3, [pc, #100]	; (800a110 <USBD_LL_Init+0x98>)
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a0ae:	4b18      	ldr	r3, [pc, #96]	; (800a110 <USBD_LL_Init+0x98>)
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a0b4:	4816      	ldr	r0, [pc, #88]	; (800a110 <USBD_LL_Init+0x98>)
 800a0b6:	f7f7 f8cf 	bl	8001258 <HAL_PCD_Init>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d001      	beq.n	800a0c4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a0c0:	f7f6 fa20 	bl	8000504 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a0ca:	2318      	movs	r3, #24
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	f7f8 fd72 	bl	8002bb8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a0da:	2358      	movs	r3, #88	; 0x58
 800a0dc:	2200      	movs	r2, #0
 800a0de:	2180      	movs	r1, #128	; 0x80
 800a0e0:	f7f8 fd6a 	bl	8002bb8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a0ea:	2398      	movs	r3, #152	; 0x98
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	2181      	movs	r1, #129	; 0x81
 800a0f0:	f7f8 fd62 	bl	8002bb8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a0fa:	23d8      	movs	r3, #216	; 0xd8
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	2101      	movs	r1, #1
 800a100:	f7f8 fd5a 	bl	8002bb8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 800a104:	2300      	movs	r3, #0
}
 800a106:	4618      	mov	r0, r3
 800a108:	3708      	adds	r7, #8
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	20000de8 	.word	0x20000de8
 800a114:	40005c00 	.word	0x40005c00

0800a118 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a120:	2300      	movs	r3, #0
 800a122:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a124:	2300      	movs	r3, #0
 800a126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a12e:	4618      	mov	r0, r3
 800a130:	f7f7 f99d 	bl	800146e <HAL_PCD_Start>
 800a134:	4603      	mov	r3, r0
 800a136:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a138:	7bfb      	ldrb	r3, [r7, #15]
 800a13a:	4618      	mov	r0, r3
 800a13c:	f000 f96e 	bl	800a41c <USBD_Get_USB_Status>
 800a140:	4603      	mov	r3, r0
 800a142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a144:	7bbb      	ldrb	r3, [r7, #14]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b084      	sub	sp, #16
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
 800a156:	4608      	mov	r0, r1
 800a158:	4611      	mov	r1, r2
 800a15a:	461a      	mov	r2, r3
 800a15c:	4603      	mov	r3, r0
 800a15e:	70fb      	strb	r3, [r7, #3]
 800a160:	460b      	mov	r3, r1
 800a162:	70bb      	strb	r3, [r7, #2]
 800a164:	4613      	mov	r3, r2
 800a166:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a168:	2300      	movs	r3, #0
 800a16a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a16c:	2300      	movs	r3, #0
 800a16e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a176:	78bb      	ldrb	r3, [r7, #2]
 800a178:	883a      	ldrh	r2, [r7, #0]
 800a17a:	78f9      	ldrb	r1, [r7, #3]
 800a17c:	f7f7 fb17 	bl	80017ae <HAL_PCD_EP_Open>
 800a180:	4603      	mov	r3, r0
 800a182:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a184:	7bfb      	ldrb	r3, [r7, #15]
 800a186:	4618      	mov	r0, r3
 800a188:	f000 f948 	bl	800a41c <USBD_Get_USB_Status>
 800a18c:	4603      	mov	r3, r0
 800a18e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a190:	7bbb      	ldrb	r3, [r7, #14]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b084      	sub	sp, #16
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
 800a1a2:	460b      	mov	r3, r1
 800a1a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1b4:	78fa      	ldrb	r2, [r7, #3]
 800a1b6:	4611      	mov	r1, r2
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7f7 fb5e 	bl	800187a <HAL_PCD_EP_Close>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1c2:	7bfb      	ldrb	r3, [r7, #15]
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f000 f929 	bl	800a41c <USBD_Get_USB_Status>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1f2:	78fa      	ldrb	r2, [r7, #3]
 800a1f4:	4611      	mov	r1, r2
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7f7 fcd2 	bl	8001ba0 <HAL_PCD_EP_Flush>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a200:	7bfb      	ldrb	r3, [r7, #15]
 800a202:	4618      	mov	r0, r3
 800a204:	f000 f90a 	bl	800a41c <USBD_Get_USB_Status>
 800a208:	4603      	mov	r3, r0
 800a20a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a20c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3710      	adds	r7, #16
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b084      	sub	sp, #16
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
 800a21e:	460b      	mov	r3, r1
 800a220:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a222:	2300      	movs	r3, #0
 800a224:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a226:	2300      	movs	r3, #0
 800a228:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a230:	78fa      	ldrb	r2, [r7, #3]
 800a232:	4611      	mov	r1, r2
 800a234:	4618      	mov	r0, r3
 800a236:	f7f7 fbff 	bl	8001a38 <HAL_PCD_EP_SetStall>
 800a23a:	4603      	mov	r3, r0
 800a23c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a23e:	7bfb      	ldrb	r3, [r7, #15]
 800a240:	4618      	mov	r0, r3
 800a242:	f000 f8eb 	bl	800a41c <USBD_Get_USB_Status>
 800a246:	4603      	mov	r3, r0
 800a248:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a24a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3710      	adds	r7, #16
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	460b      	mov	r3, r1
 800a25e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a260:	2300      	movs	r3, #0
 800a262:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a264:	2300      	movs	r3, #0
 800a266:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a26e:	78fa      	ldrb	r2, [r7, #3]
 800a270:	4611      	mov	r1, r2
 800a272:	4618      	mov	r0, r3
 800a274:	f7f7 fc40 	bl	8001af8 <HAL_PCD_EP_ClrStall>
 800a278:	4603      	mov	r3, r0
 800a27a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a27c:	7bfb      	ldrb	r3, [r7, #15]
 800a27e:	4618      	mov	r0, r3
 800a280:	f000 f8cc 	bl	800a41c <USBD_Get_USB_Status>
 800a284:	4603      	mov	r3, r0
 800a286:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a288:	7bbb      	ldrb	r3, [r7, #14]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a292:	b480      	push	{r7}
 800a294:	b085      	sub	sp, #20
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
 800a29a:	460b      	mov	r3, r1
 800a29c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a2a4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a2a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	da0c      	bge.n	800a2c8 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a2ae:	78fb      	ldrb	r3, [r7, #3]
 800a2b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2b4:	68f9      	ldr	r1, [r7, #12]
 800a2b6:	1c5a      	adds	r2, r3, #1
 800a2b8:	4613      	mov	r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4413      	add	r3, r2
 800a2be:	00db      	lsls	r3, r3, #3
 800a2c0:	440b      	add	r3, r1
 800a2c2:	3302      	adds	r3, #2
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	e00b      	b.n	800a2e0 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a2c8:	78fb      	ldrb	r3, [r7, #3]
 800a2ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2ce:	68f9      	ldr	r1, [r7, #12]
 800a2d0:	4613      	mov	r3, r2
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	4413      	add	r3, r2
 800a2d6:	00db      	lsls	r3, r3, #3
 800a2d8:	440b      	add	r3, r1
 800a2da:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a2de:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3714      	adds	r7, #20
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bc80      	pop	{r7}
 800a2e8:	4770      	bx	lr

0800a2ea <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b084      	sub	sp, #16
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a304:	78fa      	ldrb	r2, [r7, #3]
 800a306:	4611      	mov	r1, r2
 800a308:	4618      	mov	r0, r3
 800a30a:	f7f7 fa2b 	bl	8001764 <HAL_PCD_SetAddress>
 800a30e:	4603      	mov	r3, r0
 800a310:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a312:	7bfb      	ldrb	r3, [r7, #15]
 800a314:	4618      	mov	r0, r3
 800a316:	f000 f881 	bl	800a41c <USBD_Get_USB_Status>
 800a31a:	4603      	mov	r3, r0
 800a31c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a31e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a320:	4618      	mov	r0, r3
 800a322:	3710      	adds	r7, #16
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b086      	sub	sp, #24
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	607a      	str	r2, [r7, #4]
 800a332:	461a      	mov	r2, r3
 800a334:	460b      	mov	r3, r1
 800a336:	72fb      	strb	r3, [r7, #11]
 800a338:	4613      	mov	r3, r2
 800a33a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a33c:	2300      	movs	r3, #0
 800a33e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a340:	2300      	movs	r3, #0
 800a342:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a34a:	893b      	ldrh	r3, [r7, #8]
 800a34c:	7af9      	ldrb	r1, [r7, #11]
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	f7f7 fb2f 	bl	80019b2 <HAL_PCD_EP_Transmit>
 800a354:	4603      	mov	r3, r0
 800a356:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a358:	7dfb      	ldrb	r3, [r7, #23]
 800a35a:	4618      	mov	r0, r3
 800a35c:	f000 f85e 	bl	800a41c <USBD_Get_USB_Status>
 800a360:	4603      	mov	r3, r0
 800a362:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a364:	7dbb      	ldrb	r3, [r7, #22]
}
 800a366:	4618      	mov	r0, r3
 800a368:	3718      	adds	r7, #24
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b086      	sub	sp, #24
 800a372:	af00      	add	r7, sp, #0
 800a374:	60f8      	str	r0, [r7, #12]
 800a376:	607a      	str	r2, [r7, #4]
 800a378:	461a      	mov	r2, r3
 800a37a:	460b      	mov	r3, r1
 800a37c:	72fb      	strb	r3, [r7, #11]
 800a37e:	4613      	mov	r3, r2
 800a380:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a382:	2300      	movs	r3, #0
 800a384:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a386:	2300      	movs	r3, #0
 800a388:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a390:	893b      	ldrh	r3, [r7, #8]
 800a392:	7af9      	ldrb	r1, [r7, #11]
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	f7f7 fab8 	bl	800190a <HAL_PCD_EP_Receive>
 800a39a:	4603      	mov	r3, r0
 800a39c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a39e:	7dfb      	ldrb	r3, [r7, #23]
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f000 f83b 	bl	800a41c <USBD_Get_USB_Status>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3aa:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3718      	adds	r7, #24
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	460b      	mov	r3, r1
 800a3be:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3c6:	78fa      	ldrb	r2, [r7, #3]
 800a3c8:	4611      	mov	r1, r2
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7f7 fada 	bl	8001984 <HAL_PCD_EP_GetRxCount>
 800a3d0:	4603      	mov	r3, r0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3708      	adds	r7, #8
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
	...

0800a3dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a3e4:	4b02      	ldr	r3, [pc, #8]	; (800a3f0 <USBD_static_malloc+0x14>)
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	370c      	adds	r7, #12
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bc80      	pop	{r7}
 800a3ee:	4770      	bx	lr
 800a3f0:	20000164 	.word	0x20000164

0800a3f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]

}
 800a3fc:	bf00      	nop
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	bc80      	pop	{r7}
 800a404:	4770      	bx	lr

0800a406 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a406:	b480      	push	{r7}
 800a408:	b083      	sub	sp, #12
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	460b      	mov	r3, r1
 800a410:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a412:	bf00      	nop
 800a414:	370c      	adds	r7, #12
 800a416:	46bd      	mov	sp, r7
 800a418:	bc80      	pop	{r7}
 800a41a:	4770      	bx	lr

0800a41c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	4603      	mov	r3, r0
 800a424:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a426:	2300      	movs	r3, #0
 800a428:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a42a:	79fb      	ldrb	r3, [r7, #7]
 800a42c:	2b03      	cmp	r3, #3
 800a42e:	d817      	bhi.n	800a460 <USBD_Get_USB_Status+0x44>
 800a430:	a201      	add	r2, pc, #4	; (adr r2, 800a438 <USBD_Get_USB_Status+0x1c>)
 800a432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a436:	bf00      	nop
 800a438:	0800a449 	.word	0x0800a449
 800a43c:	0800a44f 	.word	0x0800a44f
 800a440:	0800a455 	.word	0x0800a455
 800a444:	0800a45b 	.word	0x0800a45b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a448:	2300      	movs	r3, #0
 800a44a:	73fb      	strb	r3, [r7, #15]
    break;
 800a44c:	e00b      	b.n	800a466 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a44e:	2302      	movs	r3, #2
 800a450:	73fb      	strb	r3, [r7, #15]
    break;
 800a452:	e008      	b.n	800a466 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a454:	2301      	movs	r3, #1
 800a456:	73fb      	strb	r3, [r7, #15]
    break;
 800a458:	e005      	b.n	800a466 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a45a:	2302      	movs	r3, #2
 800a45c:	73fb      	strb	r3, [r7, #15]
    break;
 800a45e:	e002      	b.n	800a466 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a460:	2302      	movs	r3, #2
 800a462:	73fb      	strb	r3, [r7, #15]
    break;
 800a464:	bf00      	nop
  }
  return usb_status;
 800a466:	7bfb      	ldrb	r3, [r7, #15]
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3714      	adds	r7, #20
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bc80      	pop	{r7}
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop

0800a474 <__libc_init_array>:
 800a474:	b570      	push	{r4, r5, r6, lr}
 800a476:	2600      	movs	r6, #0
 800a478:	4d0c      	ldr	r5, [pc, #48]	; (800a4ac <__libc_init_array+0x38>)
 800a47a:	4c0d      	ldr	r4, [pc, #52]	; (800a4b0 <__libc_init_array+0x3c>)
 800a47c:	1b64      	subs	r4, r4, r5
 800a47e:	10a4      	asrs	r4, r4, #2
 800a480:	42a6      	cmp	r6, r4
 800a482:	d109      	bne.n	800a498 <__libc_init_array+0x24>
 800a484:	f000 f822 	bl	800a4cc <_init>
 800a488:	2600      	movs	r6, #0
 800a48a:	4d0a      	ldr	r5, [pc, #40]	; (800a4b4 <__libc_init_array+0x40>)
 800a48c:	4c0a      	ldr	r4, [pc, #40]	; (800a4b8 <__libc_init_array+0x44>)
 800a48e:	1b64      	subs	r4, r4, r5
 800a490:	10a4      	asrs	r4, r4, #2
 800a492:	42a6      	cmp	r6, r4
 800a494:	d105      	bne.n	800a4a2 <__libc_init_array+0x2e>
 800a496:	bd70      	pop	{r4, r5, r6, pc}
 800a498:	f855 3b04 	ldr.w	r3, [r5], #4
 800a49c:	4798      	blx	r3
 800a49e:	3601      	adds	r6, #1
 800a4a0:	e7ee      	b.n	800a480 <__libc_init_array+0xc>
 800a4a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4a6:	4798      	blx	r3
 800a4a8:	3601      	adds	r6, #1
 800a4aa:	e7f2      	b.n	800a492 <__libc_init_array+0x1e>
 800a4ac:	0800a59c 	.word	0x0800a59c
 800a4b0:	0800a59c 	.word	0x0800a59c
 800a4b4:	0800a59c 	.word	0x0800a59c
 800a4b8:	0800a5a0 	.word	0x0800a5a0

0800a4bc <memset>:
 800a4bc:	4603      	mov	r3, r0
 800a4be:	4402      	add	r2, r0
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d100      	bne.n	800a4c6 <memset+0xa>
 800a4c4:	4770      	bx	lr
 800a4c6:	f803 1b01 	strb.w	r1, [r3], #1
 800a4ca:	e7f9      	b.n	800a4c0 <memset+0x4>

0800a4cc <_init>:
 800a4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ce:	bf00      	nop
 800a4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4d2:	bc08      	pop	{r3}
 800a4d4:	469e      	mov	lr, r3
 800a4d6:	4770      	bx	lr

0800a4d8 <_fini>:
 800a4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4da:	bf00      	nop
 800a4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4de:	bc08      	pop	{r3}
 800a4e0:	469e      	mov	lr, r3
 800a4e2:	4770      	bx	lr
