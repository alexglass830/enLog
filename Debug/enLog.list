
enLog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08009700  08009700  00019700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097b8  080097b8  00020134  2**0
                  CONTENTS
  4 .ARM          00000000  080097b8  080097b8  00020134  2**0
                  CONTENTS
  5 .preinit_array 00000000  080097b8  080097b8  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097b8  080097b8  000197b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097bc  080097bc  000197bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  080097c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f94  20000134  080098f4  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010c8  080098f4  000210c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d20c  00000000  00000000  0002015d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000467a  00000000  00000000  0003d369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  000419e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  00042cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ceaf  00000000  00000000  00043db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d8f  00000000  00000000  00060c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091396  00000000  00000000  000799f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010ad8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004af4  00000000  00000000  0010ade0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000134 	.word	0x20000134
 8000128:	00000000 	.word	0x00000000
 800012c:	080096e8 	.word	0x080096e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000138 	.word	0x20000138
 8000148:	080096e8 	.word	0x080096e8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t isRecording = 0;
 8000152:	2300      	movs	r3, #0
 8000154:	73fb      	strb	r3, [r7, #15]
  uint8_t BTN_press = 0;
 8000156:	2300      	movs	r3, #0
 8000158:	73bb      	strb	r3, [r7, #14]
  uint8_t BTN_release = 0;
 800015a:	2300      	movs	r3, #0
 800015c:	737b      	strb	r3, [r7, #13]
  uint8_t BTN_pressed = 0;
 800015e:	2300      	movs	r3, #0
 8000160:	733b      	strb	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fb7d 	bl	8000860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f83d 	bl	80001e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f987 	bl	800047c <MX_GPIO_Init>
  MX_ADC1_Init();
 800016e:	f000 f89d 	bl	80002ac <MX_ADC1_Init>
  MX_RTC_Init();
 8000172:	f000 f8d9 	bl	8000328 <MX_RTC_Init>
  MX_SPI2_Init();
 8000176:	f000 f921 	bl	80003bc <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800017a:	f000 f955 	bl	8000428 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800017e:	f006 fac7 	bl	8006710 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000182:	f008 fe29 	bl	8008dd8 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t isRecording = 0;
 8000186:	2300      	movs	r3, #0
 8000188:	72fb      	strb	r3, [r7, #11]
	  uint8_t BTN_press = 0;
 800018a:	2300      	movs	r3, #0
 800018c:	72bb      	strb	r3, [r7, #10]
	  uint8_t BTN_release = 0;
 800018e:	2300      	movs	r3, #0
 8000190:	727b      	strb	r3, [r7, #9]
	  uint8_t BTN_pressed = 0;
 8000192:	2300      	movs	r3, #0
 8000194:	723b      	strb	r3, [r7, #8]
	  uint8_t Bouncevalue = 200;
 8000196:	23c8      	movs	r3, #200	; 0xc8
 8000198:	71fb      	strb	r3, [r7, #7]

	  //обаботка дребезга
	  if (  HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1) == GPIO_PIN_RESET )
 800019a:	2102      	movs	r1, #2
 800019c:	4810      	ldr	r0, [pc, #64]	; (80001e0 <main+0x94>)
 800019e:	f001 f865 	bl	800126c <HAL_GPIO_ReadPin>
 80001a2:	4603      	mov	r3, r0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d10d      	bne.n	80001c4 <main+0x78>
        {
            BTN_press++;
 80001a8:	7abb      	ldrb	r3, [r7, #10]
 80001aa:	3301      	adds	r3, #1
 80001ac:	72bb      	strb	r3, [r7, #10]
            BTN_release = 0;
 80001ae:	2300      	movs	r3, #0
 80001b0:	727b      	strb	r3, [r7, #9]
            if (BTN_press > Bouncevalue)
 80001b2:	7aba      	ldrb	r2, [r7, #10]
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	429a      	cmp	r2, r3
 80001b8:	d9e5      	bls.n	8000186 <main+0x3a>
            {
            	BTN_press = 0;
 80001ba:	2300      	movs	r3, #0
 80001bc:	72bb      	strb	r3, [r7, #10]
                BTN_pressed =1;
 80001be:	2301      	movs	r3, #1
 80001c0:	723b      	strb	r3, [r7, #8]
 80001c2:	e7e0      	b.n	8000186 <main+0x3a>

            }
        }
        else
        {
            BTN_release++;
 80001c4:	7a7b      	ldrb	r3, [r7, #9]
 80001c6:	3301      	adds	r3, #1
 80001c8:	727b      	strb	r3, [r7, #9]
            BTN_press = 0;
 80001ca:	2300      	movs	r3, #0
 80001cc:	72bb      	strb	r3, [r7, #10]
            if (BTN_release > Bouncevalue)
 80001ce:	7a7a      	ldrb	r2, [r7, #9]
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	429a      	cmp	r2, r3
 80001d4:	d9d7      	bls.n	8000186 <main+0x3a>
            {
                BTN_release = 0;
 80001d6:	2300      	movs	r3, #0
 80001d8:	727b      	strb	r3, [r7, #9]
                BTN_pressed = 0;
 80001da:	2300      	movs	r3, #0
 80001dc:	723b      	strb	r3, [r7, #8]
  {
 80001de:	e7d2      	b.n	8000186 <main+0x3a>
 80001e0:	40010800 	.word	0x40010800

080001e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b094      	sub	sp, #80	; 0x50
 80001e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ee:	2228      	movs	r2, #40	; 0x28
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f009 fa70 	bl	80096d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f8:	f107 0314 	add.w	r3, r7, #20
 80001fc:	2200      	movs	r2, #0
 80001fe:	601a      	str	r2, [r3, #0]
 8000200:	605a      	str	r2, [r3, #4]
 8000202:	609a      	str	r2, [r3, #8]
 8000204:	60da      	str	r2, [r3, #12]
 8000206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000214:	2305      	movs	r3, #5
 8000216:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000222:	2301      	movs	r3, #1
 8000224:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000226:	2301      	movs	r3, #1
 8000228:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022a:	2302      	movs	r3, #2
 800022c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800022e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000232:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000234:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000238:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800023e:	4618      	mov	r0, r3
 8000240:	f002 fd42 	bl	8002cc8 <HAL_RCC_OscConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800024a:	f000 f97d 	bl	8000548 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024e:	230f      	movs	r3, #15
 8000250:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000252:	2302      	movs	r3, #2
 8000254:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800025e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000264:	f107 0314 	add.w	r3, r7, #20
 8000268:	2101      	movs	r1, #1
 800026a:	4618      	mov	r0, r3
 800026c:	f002 ffac 	bl	80031c8 <HAL_RCC_ClockConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000276:	f000 f967 	bl	8000548 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
 800027a:	2313      	movs	r3, #19
 800027c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800027e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000282:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000284:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000288:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800028a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800028e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	4618      	mov	r0, r3
 8000294:	f003 f932 	bl	80034fc <HAL_RCCEx_PeriphCLKConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800029e:	f000 f953 	bl	8000548 <Error_Handler>
  }
}
 80002a2:	bf00      	nop
 80002a4:	3750      	adds	r7, #80	; 0x50
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002bc:	4b18      	ldr	r3, [pc, #96]	; (8000320 <MX_ADC1_Init+0x74>)
 80002be:	4a19      	ldr	r2, [pc, #100]	; (8000324 <MX_ADC1_Init+0x78>)
 80002c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002c2:	4b17      	ldr	r3, [pc, #92]	; (8000320 <MX_ADC1_Init+0x74>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002c8:	4b15      	ldr	r3, [pc, #84]	; (8000320 <MX_ADC1_Init+0x74>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002ce:	4b14      	ldr	r3, [pc, #80]	; (8000320 <MX_ADC1_Init+0x74>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002d4:	4b12      	ldr	r3, [pc, #72]	; (8000320 <MX_ADC1_Init+0x74>)
 80002d6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002dc:	4b10      	ldr	r3, [pc, #64]	; (8000320 <MX_ADC1_Init+0x74>)
 80002de:	2200      	movs	r2, #0
 80002e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002e2:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <MX_ADC1_Init+0x74>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002e8:	480d      	ldr	r0, [pc, #52]	; (8000320 <MX_ADC1_Init+0x74>)
 80002ea:	f000 fb1b 	bl	8000924 <HAL_ADC_Init>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002f4:	f000 f928 	bl	8000548 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80002f8:	2306      	movs	r3, #6
 80002fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002fc:	2301      	movs	r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000300:	2300      	movs	r3, #0
 8000302:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	4619      	mov	r1, r3
 8000308:	4805      	ldr	r0, [pc, #20]	; (8000320 <MX_ADC1_Init+0x74>)
 800030a:	f000 fbe3 	bl	8000ad4 <HAL_ADC_ConfigChannel>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000314:	f000 f918 	bl	8000548 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000318:	bf00      	nop
 800031a:	3710      	adds	r7, #16
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000428 	.word	0x20000428
 8000324:	40012400 	.word	0x40012400

08000328 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2100      	movs	r1, #0
 8000332:	460a      	mov	r2, r1
 8000334:	801a      	strh	r2, [r3, #0]
 8000336:	460a      	mov	r2, r1
 8000338:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800033a:	2300      	movs	r3, #0
 800033c:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800033e:	4b1d      	ldr	r3, [pc, #116]	; (80003b4 <MX_RTC_Init+0x8c>)
 8000340:	4a1d      	ldr	r2, [pc, #116]	; (80003b8 <MX_RTC_Init+0x90>)
 8000342:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000344:	4b1b      	ldr	r3, [pc, #108]	; (80003b4 <MX_RTC_Init+0x8c>)
 8000346:	f04f 32ff 	mov.w	r2, #4294967295
 800034a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800034c:	4b19      	ldr	r3, [pc, #100]	; (80003b4 <MX_RTC_Init+0x8c>)
 800034e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000352:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000354:	4817      	ldr	r0, [pc, #92]	; (80003b4 <MX_RTC_Init+0x8c>)
 8000356:	f003 fa4b 	bl	80037f0 <HAL_RTC_Init>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000360:	f000 f8f2 	bl	8000548 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000364:	2300      	movs	r3, #0
 8000366:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000368:	2300      	movs	r3, #0
 800036a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800036c:	2300      	movs	r3, #0
 800036e:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	2201      	movs	r2, #1
 8000374:	4619      	mov	r1, r3
 8000376:	480f      	ldr	r0, [pc, #60]	; (80003b4 <MX_RTC_Init+0x8c>)
 8000378:	f003 fad0 	bl	800391c <HAL_RTC_SetTime>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000382:	f000 f8e1 	bl	8000548 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000386:	2301      	movs	r3, #1
 8000388:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800038a:	2301      	movs	r3, #1
 800038c:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 800038e:	2301      	movs	r3, #1
 8000390:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000392:	2300      	movs	r3, #0
 8000394:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000396:	463b      	mov	r3, r7
 8000398:	2201      	movs	r2, #1
 800039a:	4619      	mov	r1, r3
 800039c:	4805      	ldr	r0, [pc, #20]	; (80003b4 <MX_RTC_Init+0x8c>)
 800039e:	f003 fb55 	bl	8003a4c <HAL_RTC_SetDate>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80003a8:	f000 f8ce 	bl	8000548 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80003ac:	bf00      	nop
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20000458 	.word	0x20000458
 80003b8:	40002800 	.word	0x40002800

080003bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80003c0:	4b17      	ldr	r3, [pc, #92]	; (8000420 <MX_SPI2_Init+0x64>)
 80003c2:	4a18      	ldr	r2, [pc, #96]	; (8000424 <MX_SPI2_Init+0x68>)
 80003c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80003c6:	4b16      	ldr	r3, [pc, #88]	; (8000420 <MX_SPI2_Init+0x64>)
 80003c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80003ce:	4b14      	ldr	r3, [pc, #80]	; (8000420 <MX_SPI2_Init+0x64>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80003d4:	4b12      	ldr	r3, [pc, #72]	; (8000420 <MX_SPI2_Init+0x64>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003da:	4b11      	ldr	r3, [pc, #68]	; (8000420 <MX_SPI2_Init+0x64>)
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003e0:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <MX_SPI2_Init+0x64>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80003e6:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <MX_SPI2_Init+0x64>)
 80003e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80003ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003ee:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <MX_SPI2_Init+0x64>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003f4:	4b0a      	ldr	r3, [pc, #40]	; (8000420 <MX_SPI2_Init+0x64>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003fa:	4b09      	ldr	r3, [pc, #36]	; (8000420 <MX_SPI2_Init+0x64>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000400:	4b07      	ldr	r3, [pc, #28]	; (8000420 <MX_SPI2_Init+0x64>)
 8000402:	2200      	movs	r2, #0
 8000404:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <MX_SPI2_Init+0x64>)
 8000408:	220a      	movs	r2, #10
 800040a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800040c:	4804      	ldr	r0, [pc, #16]	; (8000420 <MX_SPI2_Init+0x64>)
 800040e:	f003 fd7d 	bl	8003f0c <HAL_SPI_Init>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000418:	f000 f896 	bl	8000548 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}
 8000420:	200003d0 	.word	0x200003d0
 8000424:	40003800 	.word	0x40003800

08000428 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 800042e:	4a12      	ldr	r2, [pc, #72]	; (8000478 <MX_USART2_UART_Init+0x50>)
 8000430:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000432:	4b10      	ldr	r3, [pc, #64]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 8000434:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000438:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 800043c:	2200      	movs	r2, #0
 800043e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 8000442:	2200      	movs	r2, #0
 8000444:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 8000448:	2200      	movs	r2, #0
 800044a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800044c:	4b09      	ldr	r3, [pc, #36]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 800044e:	220c      	movs	r2, #12
 8000450:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 8000454:	2200      	movs	r2, #0
 8000456:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 800045a:	2200      	movs	r2, #0
 800045c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800045e:	4805      	ldr	r0, [pc, #20]	; (8000474 <MX_USART2_UART_Init+0x4c>)
 8000460:	f003 fdd8 	bl	8004014 <HAL_UART_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800046a:	f000 f86d 	bl	8000548 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	2000046c 	.word	0x2000046c
 8000478:	40004400 	.word	0x40004400

0800047c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000482:	f107 0310 	add.w	r3, r7, #16
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000490:	4b2a      	ldr	r3, [pc, #168]	; (800053c <MX_GPIO_Init+0xc0>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a29      	ldr	r2, [pc, #164]	; (800053c <MX_GPIO_Init+0xc0>)
 8000496:	f043 0310 	orr.w	r3, r3, #16
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b27      	ldr	r3, [pc, #156]	; (800053c <MX_GPIO_Init+0xc0>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0310 	and.w	r3, r3, #16
 80004a4:	60fb      	str	r3, [r7, #12]
 80004a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004a8:	4b24      	ldr	r3, [pc, #144]	; (800053c <MX_GPIO_Init+0xc0>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a23      	ldr	r2, [pc, #140]	; (800053c <MX_GPIO_Init+0xc0>)
 80004ae:	f043 0320 	orr.w	r3, r3, #32
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b21      	ldr	r3, [pc, #132]	; (800053c <MX_GPIO_Init+0xc0>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0320 	and.w	r3, r3, #32
 80004bc:	60bb      	str	r3, [r7, #8]
 80004be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c0:	4b1e      	ldr	r3, [pc, #120]	; (800053c <MX_GPIO_Init+0xc0>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a1d      	ldr	r2, [pc, #116]	; (800053c <MX_GPIO_Init+0xc0>)
 80004c6:	f043 0304 	orr.w	r3, r3, #4
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b1b      	ldr	r3, [pc, #108]	; (800053c <MX_GPIO_Init+0xc0>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0304 	and.w	r3, r3, #4
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d8:	4b18      	ldr	r3, [pc, #96]	; (800053c <MX_GPIO_Init+0xc0>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a17      	ldr	r2, [pc, #92]	; (800053c <MX_GPIO_Init+0xc0>)
 80004de:	f043 0308 	orr.w	r3, r3, #8
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b15      	ldr	r3, [pc, #84]	; (800053c <MX_GPIO_Init+0xc0>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0308 	and.w	r3, r3, #8
 80004ec:	603b      	str	r3, [r7, #0]
 80004ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f6:	4812      	ldr	r0, [pc, #72]	; (8000540 <MX_GPIO_Init+0xc4>)
 80004f8:	f000 fecf 	bl	800129a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000500:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000502:	2301      	movs	r3, #1
 8000504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050a:	2302      	movs	r3, #2
 800050c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800050e:	f107 0310 	add.w	r3, r7, #16
 8000512:	4619      	mov	r1, r3
 8000514:	480a      	ldr	r0, [pc, #40]	; (8000540 <MX_GPIO_Init+0xc4>)
 8000516:	f000 fd25 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800051a:	2302      	movs	r3, #2
 800051c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000522:	2301      	movs	r3, #1
 8000524:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000526:	f107 0310 	add.w	r3, r7, #16
 800052a:	4619      	mov	r1, r3
 800052c:	4805      	ldr	r0, [pc, #20]	; (8000544 <MX_GPIO_Init+0xc8>)
 800052e:	f000 fd19 	bl	8000f64 <HAL_GPIO_Init>

}
 8000532:	bf00      	nop
 8000534:	3720      	adds	r7, #32
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40021000 	.word	0x40021000
 8000540:	40011000 	.word	0x40011000
 8000544:	40010800 	.word	0x40010800

08000548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800054c:	b672      	cpsid	i
}
 800054e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000550:	e7fe      	b.n	8000550 <Error_Handler+0x8>
	...

08000554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800055a:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <HAL_MspInit+0x5c>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	4a14      	ldr	r2, [pc, #80]	; (80005b0 <HAL_MspInit+0x5c>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6193      	str	r3, [r2, #24]
 8000566:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_MspInit+0x5c>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000572:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <HAL_MspInit+0x5c>)
 8000574:	69db      	ldr	r3, [r3, #28]
 8000576:	4a0e      	ldr	r2, [pc, #56]	; (80005b0 <HAL_MspInit+0x5c>)
 8000578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057c:	61d3      	str	r3, [r2, #28]
 800057e:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <HAL_MspInit+0x5c>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <HAL_MspInit+0x60>)
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <HAL_MspInit+0x60>)
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	40021000 	.word	0x40021000
 80005b4:	40010000 	.word	0x40010000

080005b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b088      	sub	sp, #32
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c0:	f107 0310 	add.w	r3, r7, #16
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a14      	ldr	r2, [pc, #80]	; (8000624 <HAL_ADC_MspInit+0x6c>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d121      	bne.n	800061c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005d8:	4b13      	ldr	r3, [pc, #76]	; (8000628 <HAL_ADC_MspInit+0x70>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	4a12      	ldr	r2, [pc, #72]	; (8000628 <HAL_ADC_MspInit+0x70>)
 80005de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005e2:	6193      	str	r3, [r2, #24]
 80005e4:	4b10      	ldr	r3, [pc, #64]	; (8000628 <HAL_ADC_MspInit+0x70>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f0:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <HAL_ADC_MspInit+0x70>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a0c      	ldr	r2, [pc, #48]	; (8000628 <HAL_ADC_MspInit+0x70>)
 80005f6:	f043 0304 	orr.w	r3, r3, #4
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <HAL_ADC_MspInit+0x70>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f003 0304 	and.w	r3, r3, #4
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000608:	2340      	movs	r3, #64	; 0x40
 800060a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800060c:	2303      	movs	r3, #3
 800060e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	4619      	mov	r1, r3
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <HAL_ADC_MspInit+0x74>)
 8000618:	f000 fca4 	bl	8000f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800061c:	bf00      	nop
 800061e:	3720      	adds	r7, #32
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40012400 	.word	0x40012400
 8000628:	40021000 	.word	0x40021000
 800062c:	40010800 	.word	0x40010800

08000630 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a0b      	ldr	r2, [pc, #44]	; (800066c <HAL_RTC_MspInit+0x3c>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d110      	bne.n	8000664 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000642:	f002 fb35 	bl	8002cb0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <HAL_RTC_MspInit+0x40>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	4a09      	ldr	r2, [pc, #36]	; (8000670 <HAL_RTC_MspInit+0x40>)
 800064c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000650:	61d3      	str	r3, [r2, #28]
 8000652:	4b07      	ldr	r3, [pc, #28]	; (8000670 <HAL_RTC_MspInit+0x40>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800065e:	4b05      	ldr	r3, [pc, #20]	; (8000674 <HAL_RTC_MspInit+0x44>)
 8000660:	2201      	movs	r2, #1
 8000662:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000664:	bf00      	nop
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40002800 	.word	0x40002800
 8000670:	40021000 	.word	0x40021000
 8000674:	4242043c 	.word	0x4242043c

08000678 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	f107 0310 	add.w	r3, r7, #16
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a1c      	ldr	r2, [pc, #112]	; (8000704 <HAL_SPI_MspInit+0x8c>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d131      	bne.n	80006fc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <HAL_SPI_MspInit+0x90>)
 800069a:	69db      	ldr	r3, [r3, #28]
 800069c:	4a1a      	ldr	r2, [pc, #104]	; (8000708 <HAL_SPI_MspInit+0x90>)
 800069e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a2:	61d3      	str	r3, [r2, #28]
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <HAL_SPI_MspInit+0x90>)
 80006a6:	69db      	ldr	r3, [r3, #28]
 80006a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <HAL_SPI_MspInit+0x90>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a14      	ldr	r2, [pc, #80]	; (8000708 <HAL_SPI_MspInit+0x90>)
 80006b6:	f043 0308 	orr.w	r3, r3, #8
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_SPI_MspInit+0x90>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f003 0308 	and.w	r3, r3, #8
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80006c8:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80006cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ce:	2302      	movs	r3, #2
 80006d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d2:	2303      	movs	r3, #3
 80006d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d6:	f107 0310 	add.w	r3, r7, #16
 80006da:	4619      	mov	r1, r3
 80006dc:	480b      	ldr	r0, [pc, #44]	; (800070c <HAL_SPI_MspInit+0x94>)
 80006de:	f000 fc41 	bl	8000f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80006e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	4619      	mov	r1, r3
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <HAL_SPI_MspInit+0x94>)
 80006f8:	f000 fc34 	bl	8000f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80006fc:	bf00      	nop
 80006fe:	3720      	adds	r7, #32
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40003800 	.word	0x40003800
 8000708:	40021000 	.word	0x40021000
 800070c:	40010c00 	.word	0x40010c00

08000710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a1b      	ldr	r2, [pc, #108]	; (8000798 <HAL_UART_MspInit+0x88>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d12f      	bne.n	8000790 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <HAL_UART_MspInit+0x8c>)
 8000732:	69db      	ldr	r3, [r3, #28]
 8000734:	4a19      	ldr	r2, [pc, #100]	; (800079c <HAL_UART_MspInit+0x8c>)
 8000736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800073a:	61d3      	str	r3, [r2, #28]
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <HAL_UART_MspInit+0x8c>)
 800073e:	69db      	ldr	r3, [r3, #28]
 8000740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <HAL_UART_MspInit+0x8c>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	4a13      	ldr	r2, [pc, #76]	; (800079c <HAL_UART_MspInit+0x8c>)
 800074e:	f043 0304 	orr.w	r3, r3, #4
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <HAL_UART_MspInit+0x8c>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f003 0304 	and.w	r3, r3, #4
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000760:	2304      	movs	r3, #4
 8000762:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000764:	2302      	movs	r3, #2
 8000766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000768:	2303      	movs	r3, #3
 800076a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	4619      	mov	r1, r3
 8000772:	480b      	ldr	r0, [pc, #44]	; (80007a0 <HAL_UART_MspInit+0x90>)
 8000774:	f000 fbf6 	bl	8000f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000778:	2308      	movs	r3, #8
 800077a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	4619      	mov	r1, r3
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <HAL_UART_MspInit+0x90>)
 800078c:	f000 fbea 	bl	8000f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000790:	bf00      	nop
 8000792:	3720      	adds	r7, #32
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40004400 	.word	0x40004400
 800079c:	40021000 	.word	0x40021000
 80007a0:	40010800 	.word	0x40010800

080007a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <NMI_Handler+0x4>

080007aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <HardFault_Handler+0x4>

080007b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <MemManage_Handler+0x4>

080007b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <BusFault_Handler+0x4>

080007bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <UsageFault_Handler+0x4>

080007c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr

080007ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr

080007da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr

080007e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ea:	f000 f87f 	bl	80008ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007f8:	4802      	ldr	r0, [pc, #8]	; (8000804 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007fa:	f000 fe97 	bl	800152c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000ddc 	.word	0x20000ddc

08000808 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000816:	490d      	ldr	r1, [pc, #52]	; (800084c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000818:	4a0d      	ldr	r2, [pc, #52]	; (8000850 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800081c:	e002      	b.n	8000824 <LoopCopyDataInit>

0800081e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000822:	3304      	adds	r3, #4

08000824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000828:	d3f9      	bcc.n	800081e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800082c:	4c0a      	ldr	r4, [pc, #40]	; (8000858 <LoopFillZerobss+0x22>)
  movs r3, #0
 800082e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000830:	e001      	b.n	8000836 <LoopFillZerobss>

08000832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000834:	3204      	adds	r2, #4

08000836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000838:	d3fb      	bcc.n	8000832 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800083a:	f7ff ffe5 	bl	8000808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800083e:	f008 ff27 	bl	8009690 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000842:	f7ff fc83 	bl	800014c <main>
  bx lr
 8000846:	4770      	bx	lr
  ldr r0, =_sdata
 8000848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800084c:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8000850:	080097c0 	.word	0x080097c0
  ldr r2, =_sbss
 8000854:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8000858:	200010c8 	.word	0x200010c8

0800085c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800085c:	e7fe      	b.n	800085c <ADC1_2_IRQHandler>
	...

08000860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <HAL_Init+0x28>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a07      	ldr	r2, [pc, #28]	; (8000888 <HAL_Init+0x28>)
 800086a:	f043 0310 	orr.w	r3, r3, #16
 800086e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000870:	2003      	movs	r0, #3
 8000872:	f000 fb35 	bl	8000ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000876:	200f      	movs	r0, #15
 8000878:	f000 f808 	bl	800088c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800087c:	f7ff fe6a 	bl	8000554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40022000 	.word	0x40022000

0800088c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_InitTick+0x54>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_InitTick+0x58>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4619      	mov	r1, r3
 800089e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 fb4d 	bl	8000f4a <HAL_SYSTICK_Config>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	e00e      	b.n	80008d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b0f      	cmp	r3, #15
 80008be:	d80a      	bhi.n	80008d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c0:	2200      	movs	r2, #0
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	f04f 30ff 	mov.w	r0, #4294967295
 80008c8:	f000 fb15 	bl	8000ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008cc:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <HAL_InitTick+0x5c>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008d2:	2300      	movs	r3, #0
 80008d4:	e000      	b.n	80008d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000008 	.word	0x20000008
 80008e8:	20000004 	.word	0x20000004

080008ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <HAL_IncTick+0x1c>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b05      	ldr	r3, [pc, #20]	; (800090c <HAL_IncTick+0x20>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	4a03      	ldr	r2, [pc, #12]	; (800090c <HAL_IncTick+0x20>)
 80008fe:	6013      	str	r3, [r2, #0]
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	20000008 	.word	0x20000008
 800090c:	200004b0 	.word	0x200004b0

08000910 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return uwTick;
 8000914:	4b02      	ldr	r3, [pc, #8]	; (8000920 <HAL_GetTick+0x10>)
 8000916:	681b      	ldr	r3, [r3, #0]
}
 8000918:	4618      	mov	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	200004b0 	.word	0x200004b0

08000924 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800092c:	2300      	movs	r3, #0
 800092e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000930:	2300      	movs	r3, #0
 8000932:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d101      	bne.n	8000946 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	e0be      	b.n	8000ac4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000950:	2b00      	cmp	r3, #0
 8000952:	d109      	bne.n	8000968 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2200      	movs	r2, #0
 8000958:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2200      	movs	r2, #0
 800095e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff fe28 	bl	80005b8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f000 f9ab 	bl	8000cc4 <ADC_ConversionStop_Disable>
 800096e:	4603      	mov	r3, r0
 8000970:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000976:	f003 0310 	and.w	r3, r3, #16
 800097a:	2b00      	cmp	r3, #0
 800097c:	f040 8099 	bne.w	8000ab2 <HAL_ADC_Init+0x18e>
 8000980:	7dfb      	ldrb	r3, [r7, #23]
 8000982:	2b00      	cmp	r3, #0
 8000984:	f040 8095 	bne.w	8000ab2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800098c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000990:	f023 0302 	bic.w	r3, r3, #2
 8000994:	f043 0202 	orr.w	r2, r3, #2
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009a4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	7b1b      	ldrb	r3, [r3, #12]
 80009aa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009ac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009bc:	d003      	beq.n	80009c6 <HAL_ADC_Init+0xa2>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d102      	bne.n	80009cc <HAL_ADC_Init+0xa8>
 80009c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ca:	e000      	b.n	80009ce <HAL_ADC_Init+0xaa>
 80009cc:	2300      	movs	r3, #0
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	7d1b      	ldrb	r3, [r3, #20]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d119      	bne.n	8000a10 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	7b1b      	ldrb	r3, [r3, #12]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d109      	bne.n	80009f8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	3b01      	subs	r3, #1
 80009ea:	035a      	lsls	r2, r3, #13
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	e00b      	b.n	8000a10 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009fc:	f043 0220 	orr.w	r2, r3, #32
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a08:	f043 0201 	orr.w	r2, r3, #1
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	430a      	orrs	r2, r1
 8000a22:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	689a      	ldr	r2, [r3, #8]
 8000a2a:	4b28      	ldr	r3, [pc, #160]	; (8000acc <HAL_ADC_Init+0x1a8>)
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	6812      	ldr	r2, [r2, #0]
 8000a32:	68b9      	ldr	r1, [r7, #8]
 8000a34:	430b      	orrs	r3, r1
 8000a36:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a40:	d003      	beq.n	8000a4a <HAL_ADC_Init+0x126>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d104      	bne.n	8000a54 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	691b      	ldr	r3, [r3, #16]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	051b      	lsls	r3, r3, #20
 8000a52:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	430a      	orrs	r2, r1
 8000a66:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	689a      	ldr	r2, [r3, #8]
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <HAL_ADC_Init+0x1ac>)
 8000a70:	4013      	ands	r3, r2
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d10b      	bne.n	8000a90 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a82:	f023 0303 	bic.w	r3, r3, #3
 8000a86:	f043 0201 	orr.w	r2, r3, #1
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a8e:	e018      	b.n	8000ac2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a94:	f023 0312 	bic.w	r3, r3, #18
 8000a98:	f043 0210 	orr.w	r2, r3, #16
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa4:	f043 0201 	orr.w	r2, r3, #1
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000aac:	2301      	movs	r3, #1
 8000aae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ab0:	e007      	b.n	8000ac2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab6:	f043 0210 	orr.w	r2, r3, #16
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	ffe1f7fd 	.word	0xffe1f7fd
 8000ad0:	ff1f0efe 	.word	0xff1f0efe

08000ad4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d101      	bne.n	8000af4 <HAL_ADC_ConfigChannel+0x20>
 8000af0:	2302      	movs	r3, #2
 8000af2:	e0dc      	b.n	8000cae <HAL_ADC_ConfigChannel+0x1da>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2201      	movs	r2, #1
 8000af8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	2b06      	cmp	r3, #6
 8000b02:	d81c      	bhi.n	8000b3e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685a      	ldr	r2, [r3, #4]
 8000b0e:	4613      	mov	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	4413      	add	r3, r2
 8000b14:	3b05      	subs	r3, #5
 8000b16:	221f      	movs	r2, #31
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	4019      	ands	r1, r3
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	6818      	ldr	r0, [r3, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685a      	ldr	r2, [r3, #4]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	3b05      	subs	r3, #5
 8000b30:	fa00 f203 	lsl.w	r2, r0, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	635a      	str	r2, [r3, #52]	; 0x34
 8000b3c:	e03c      	b.n	8000bb8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2b0c      	cmp	r3, #12
 8000b44:	d81c      	bhi.n	8000b80 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685a      	ldr	r2, [r3, #4]
 8000b50:	4613      	mov	r3, r2
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	4413      	add	r3, r2
 8000b56:	3b23      	subs	r3, #35	; 0x23
 8000b58:	221f      	movs	r2, #31
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	4019      	ands	r1, r3
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	6818      	ldr	r0, [r3, #0]
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685a      	ldr	r2, [r3, #4]
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	4413      	add	r3, r2
 8000b70:	3b23      	subs	r3, #35	; 0x23
 8000b72:	fa00 f203 	lsl.w	r2, r0, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	631a      	str	r2, [r3, #48]	; 0x30
 8000b7e:	e01b      	b.n	8000bb8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685a      	ldr	r2, [r3, #4]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	4413      	add	r3, r2
 8000b90:	3b41      	subs	r3, #65	; 0x41
 8000b92:	221f      	movs	r2, #31
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	4019      	ands	r1, r3
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	6818      	ldr	r0, [r3, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	4413      	add	r3, r2
 8000baa:	3b41      	subs	r3, #65	; 0x41
 8000bac:	fa00 f203 	lsl.w	r2, r0, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b09      	cmp	r3, #9
 8000bbe:	d91c      	bls.n	8000bfa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	68d9      	ldr	r1, [r3, #12]
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	4413      	add	r3, r2
 8000bd0:	3b1e      	subs	r3, #30
 8000bd2:	2207      	movs	r2, #7
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	4019      	ands	r1, r3
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	6898      	ldr	r0, [r3, #8]
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4613      	mov	r3, r2
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	4413      	add	r3, r2
 8000bea:	3b1e      	subs	r3, #30
 8000bec:	fa00 f203 	lsl.w	r2, r0, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	e019      	b.n	8000c2e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	6919      	ldr	r1, [r3, #16]
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4613      	mov	r3, r2
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	4413      	add	r3, r2
 8000c0a:	2207      	movs	r2, #7
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	43db      	mvns	r3, r3
 8000c12:	4019      	ands	r1, r3
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	6898      	ldr	r0, [r3, #8]
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	4413      	add	r3, r2
 8000c22:	fa00 f203 	lsl.w	r2, r0, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b10      	cmp	r3, #16
 8000c34:	d003      	beq.n	8000c3e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c3a:	2b11      	cmp	r3, #17
 8000c3c:	d132      	bne.n	8000ca4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a1d      	ldr	r2, [pc, #116]	; (8000cb8 <HAL_ADC_ConfigChannel+0x1e4>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d125      	bne.n	8000c94 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d126      	bne.n	8000ca4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	689a      	ldr	r2, [r3, #8]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000c64:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b10      	cmp	r3, #16
 8000c6c:	d11a      	bne.n	8000ca4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <HAL_ADC_ConfigChannel+0x1e8>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <HAL_ADC_ConfigChannel+0x1ec>)
 8000c74:	fba2 2303 	umull	r2, r3, r2, r3
 8000c78:	0c9a      	lsrs	r2, r3, #18
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	4413      	add	r3, r2
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c84:	e002      	b.n	8000c8c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d1f9      	bne.n	8000c86 <HAL_ADC_ConfigChannel+0x1b2>
 8000c92:	e007      	b.n	8000ca4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c98:	f043 0220 	orr.w	r2, r3, #32
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	40012400 	.word	0x40012400
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	431bde83 	.word	0x431bde83

08000cc4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d12e      	bne.n	8000d3c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f022 0201 	bic.w	r2, r2, #1
 8000cec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000cee:	f7ff fe0f 	bl	8000910 <HAL_GetTick>
 8000cf2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000cf4:	e01b      	b.n	8000d2e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000cf6:	f7ff fe0b 	bl	8000910 <HAL_GetTick>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d914      	bls.n	8000d2e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d10d      	bne.n	8000d2e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d16:	f043 0210 	orr.w	r2, r3, #16
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d22:	f043 0201 	orr.w	r2, r3, #1
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e007      	b.n	8000d3e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d0dc      	beq.n	8000cf6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	60d3      	str	r3, [r2, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <__NVIC_GetPriorityGrouping+0x18>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	f003 0307 	and.w	r3, r3, #7
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	db0b      	blt.n	8000dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f003 021f 	and.w	r2, r3, #31
 8000dc4:	4906      	ldr	r1, [pc, #24]	; (8000de0 <__NVIC_EnableIRQ+0x34>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	2001      	movs	r0, #1
 8000dce:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr
 8000de0:	e000e100 	.word	0xe000e100

08000de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db0a      	blt.n	8000e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	490c      	ldr	r1, [pc, #48]	; (8000e30 <__NVIC_SetPriority+0x4c>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	440b      	add	r3, r1
 8000e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e0c:	e00a      	b.n	8000e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4908      	ldr	r1, [pc, #32]	; (8000e34 <__NVIC_SetPriority+0x50>)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	3b04      	subs	r3, #4
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	440b      	add	r3, r1
 8000e22:	761a      	strb	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf28      	it	cs
 8000e56:	2304      	movcs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d902      	bls.n	8000e68 <NVIC_EncodePriority+0x30>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b03      	subs	r3, #3
 8000e66:	e000      	b.n	8000e6a <NVIC_EncodePriority+0x32>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	4313      	orrs	r3, r2
         );
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3724      	adds	r7, #36	; 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eac:	d301      	bcc.n	8000eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00f      	b.n	8000ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <SysTick_Config+0x40>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eba:	210f      	movs	r1, #15
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec0:	f7ff ff90 	bl	8000de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <SysTick_Config+0x40>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eca:	4b04      	ldr	r3, [pc, #16]	; (8000edc <SysTick_Config+0x40>)
 8000ecc:	2207      	movs	r2, #7
 8000ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	e000e010 	.word	0xe000e010

08000ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ff2d 	bl	8000d48 <__NVIC_SetPriorityGrouping>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f08:	f7ff ff42 	bl	8000d90 <__NVIC_GetPriorityGrouping>
 8000f0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	68b9      	ldr	r1, [r7, #8]
 8000f12:	6978      	ldr	r0, [r7, #20]
 8000f14:	f7ff ff90 	bl	8000e38 <NVIC_EncodePriority>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff5f 	bl	8000de4 <__NVIC_SetPriority>
}
 8000f26:	bf00      	nop
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff35 	bl	8000dac <__NVIC_EnableIRQ>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffa2 	bl	8000e9c <SysTick_Config>
 8000f58:	4603      	mov	r3, r0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b08b      	sub	sp, #44	; 0x2c
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f76:	e169      	b.n	800124c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	69fa      	ldr	r2, [r7, #28]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	f040 8158 	bne.w	8001246 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	4a9a      	ldr	r2, [pc, #616]	; (8001204 <HAL_GPIO_Init+0x2a0>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d05e      	beq.n	800105e <HAL_GPIO_Init+0xfa>
 8000fa0:	4a98      	ldr	r2, [pc, #608]	; (8001204 <HAL_GPIO_Init+0x2a0>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d875      	bhi.n	8001092 <HAL_GPIO_Init+0x12e>
 8000fa6:	4a98      	ldr	r2, [pc, #608]	; (8001208 <HAL_GPIO_Init+0x2a4>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d058      	beq.n	800105e <HAL_GPIO_Init+0xfa>
 8000fac:	4a96      	ldr	r2, [pc, #600]	; (8001208 <HAL_GPIO_Init+0x2a4>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d86f      	bhi.n	8001092 <HAL_GPIO_Init+0x12e>
 8000fb2:	4a96      	ldr	r2, [pc, #600]	; (800120c <HAL_GPIO_Init+0x2a8>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d052      	beq.n	800105e <HAL_GPIO_Init+0xfa>
 8000fb8:	4a94      	ldr	r2, [pc, #592]	; (800120c <HAL_GPIO_Init+0x2a8>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d869      	bhi.n	8001092 <HAL_GPIO_Init+0x12e>
 8000fbe:	4a94      	ldr	r2, [pc, #592]	; (8001210 <HAL_GPIO_Init+0x2ac>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d04c      	beq.n	800105e <HAL_GPIO_Init+0xfa>
 8000fc4:	4a92      	ldr	r2, [pc, #584]	; (8001210 <HAL_GPIO_Init+0x2ac>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d863      	bhi.n	8001092 <HAL_GPIO_Init+0x12e>
 8000fca:	4a92      	ldr	r2, [pc, #584]	; (8001214 <HAL_GPIO_Init+0x2b0>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d046      	beq.n	800105e <HAL_GPIO_Init+0xfa>
 8000fd0:	4a90      	ldr	r2, [pc, #576]	; (8001214 <HAL_GPIO_Init+0x2b0>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d85d      	bhi.n	8001092 <HAL_GPIO_Init+0x12e>
 8000fd6:	2b12      	cmp	r3, #18
 8000fd8:	d82a      	bhi.n	8001030 <HAL_GPIO_Init+0xcc>
 8000fda:	2b12      	cmp	r3, #18
 8000fdc:	d859      	bhi.n	8001092 <HAL_GPIO_Init+0x12e>
 8000fde:	a201      	add	r2, pc, #4	; (adr r2, 8000fe4 <HAL_GPIO_Init+0x80>)
 8000fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe4:	0800105f 	.word	0x0800105f
 8000fe8:	08001039 	.word	0x08001039
 8000fec:	0800104b 	.word	0x0800104b
 8000ff0:	0800108d 	.word	0x0800108d
 8000ff4:	08001093 	.word	0x08001093
 8000ff8:	08001093 	.word	0x08001093
 8000ffc:	08001093 	.word	0x08001093
 8001000:	08001093 	.word	0x08001093
 8001004:	08001093 	.word	0x08001093
 8001008:	08001093 	.word	0x08001093
 800100c:	08001093 	.word	0x08001093
 8001010:	08001093 	.word	0x08001093
 8001014:	08001093 	.word	0x08001093
 8001018:	08001093 	.word	0x08001093
 800101c:	08001093 	.word	0x08001093
 8001020:	08001093 	.word	0x08001093
 8001024:	08001093 	.word	0x08001093
 8001028:	08001041 	.word	0x08001041
 800102c:	08001055 	.word	0x08001055
 8001030:	4a79      	ldr	r2, [pc, #484]	; (8001218 <HAL_GPIO_Init+0x2b4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d013      	beq.n	800105e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001036:	e02c      	b.n	8001092 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	623b      	str	r3, [r7, #32]
          break;
 800103e:	e029      	b.n	8001094 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	3304      	adds	r3, #4
 8001046:	623b      	str	r3, [r7, #32]
          break;
 8001048:	e024      	b.n	8001094 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	3308      	adds	r3, #8
 8001050:	623b      	str	r3, [r7, #32]
          break;
 8001052:	e01f      	b.n	8001094 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	330c      	adds	r3, #12
 800105a:	623b      	str	r3, [r7, #32]
          break;
 800105c:	e01a      	b.n	8001094 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d102      	bne.n	800106c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001066:	2304      	movs	r3, #4
 8001068:	623b      	str	r3, [r7, #32]
          break;
 800106a:	e013      	b.n	8001094 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d105      	bne.n	8001080 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001074:	2308      	movs	r3, #8
 8001076:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69fa      	ldr	r2, [r7, #28]
 800107c:	611a      	str	r2, [r3, #16]
          break;
 800107e:	e009      	b.n	8001094 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001080:	2308      	movs	r3, #8
 8001082:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69fa      	ldr	r2, [r7, #28]
 8001088:	615a      	str	r2, [r3, #20]
          break;
 800108a:	e003      	b.n	8001094 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
          break;
 8001090:	e000      	b.n	8001094 <HAL_GPIO_Init+0x130>
          break;
 8001092:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	2bff      	cmp	r3, #255	; 0xff
 8001098:	d801      	bhi.n	800109e <HAL_GPIO_Init+0x13a>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	e001      	b.n	80010a2 <HAL_GPIO_Init+0x13e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3304      	adds	r3, #4
 80010a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	2bff      	cmp	r3, #255	; 0xff
 80010a8:	d802      	bhi.n	80010b0 <HAL_GPIO_Init+0x14c>
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	e002      	b.n	80010b6 <HAL_GPIO_Init+0x152>
 80010b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b2:	3b08      	subs	r3, #8
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	210f      	movs	r1, #15
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	fa01 f303 	lsl.w	r3, r1, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	401a      	ands	r2, r3
 80010c8:	6a39      	ldr	r1, [r7, #32]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	fa01 f303 	lsl.w	r3, r1, r3
 80010d0:	431a      	orrs	r2, r3
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 80b1 	beq.w	8001246 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010e4:	4b4d      	ldr	r3, [pc, #308]	; (800121c <HAL_GPIO_Init+0x2b8>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	4a4c      	ldr	r2, [pc, #304]	; (800121c <HAL_GPIO_Init+0x2b8>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6193      	str	r3, [r2, #24]
 80010f0:	4b4a      	ldr	r3, [pc, #296]	; (800121c <HAL_GPIO_Init+0x2b8>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010fc:	4a48      	ldr	r2, [pc, #288]	; (8001220 <HAL_GPIO_Init+0x2bc>)
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	3302      	adds	r3, #2
 8001104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001108:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	220f      	movs	r2, #15
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	4013      	ands	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a40      	ldr	r2, [pc, #256]	; (8001224 <HAL_GPIO_Init+0x2c0>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d013      	beq.n	8001150 <HAL_GPIO_Init+0x1ec>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a3f      	ldr	r2, [pc, #252]	; (8001228 <HAL_GPIO_Init+0x2c4>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d00d      	beq.n	800114c <HAL_GPIO_Init+0x1e8>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a3e      	ldr	r2, [pc, #248]	; (800122c <HAL_GPIO_Init+0x2c8>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d007      	beq.n	8001148 <HAL_GPIO_Init+0x1e4>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a3d      	ldr	r2, [pc, #244]	; (8001230 <HAL_GPIO_Init+0x2cc>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d101      	bne.n	8001144 <HAL_GPIO_Init+0x1e0>
 8001140:	2303      	movs	r3, #3
 8001142:	e006      	b.n	8001152 <HAL_GPIO_Init+0x1ee>
 8001144:	2304      	movs	r3, #4
 8001146:	e004      	b.n	8001152 <HAL_GPIO_Init+0x1ee>
 8001148:	2302      	movs	r3, #2
 800114a:	e002      	b.n	8001152 <HAL_GPIO_Init+0x1ee>
 800114c:	2301      	movs	r3, #1
 800114e:	e000      	b.n	8001152 <HAL_GPIO_Init+0x1ee>
 8001150:	2300      	movs	r3, #0
 8001152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001154:	f002 0203 	and.w	r2, r2, #3
 8001158:	0092      	lsls	r2, r2, #2
 800115a:	4093      	lsls	r3, r2
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	4313      	orrs	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001162:	492f      	ldr	r1, [pc, #188]	; (8001220 <HAL_GPIO_Init+0x2bc>)
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	089b      	lsrs	r3, r3, #2
 8001168:	3302      	adds	r3, #2
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d006      	beq.n	800118a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800117c:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	492c      	ldr	r1, [pc, #176]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	600b      	str	r3, [r1, #0]
 8001188:	e006      	b.n	8001198 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800118a:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	43db      	mvns	r3, r3
 8001192:	4928      	ldr	r1, [pc, #160]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 8001194:	4013      	ands	r3, r2
 8001196:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d006      	beq.n	80011b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011a4:	4b23      	ldr	r3, [pc, #140]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	4922      	ldr	r1, [pc, #136]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	604b      	str	r3, [r1, #4]
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011b2:	4b20      	ldr	r3, [pc, #128]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	491e      	ldr	r1, [pc, #120]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80011bc:	4013      	ands	r3, r2
 80011be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d006      	beq.n	80011da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	4918      	ldr	r1, [pc, #96]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	608b      	str	r3, [r1, #8]
 80011d8:	e006      	b.n	80011e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	4914      	ldr	r1, [pc, #80]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80011e4:	4013      	ands	r3, r2
 80011e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d021      	beq.n	8001238 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80011f6:	68da      	ldr	r2, [r3, #12]
 80011f8:	490e      	ldr	r1, [pc, #56]	; (8001234 <HAL_GPIO_Init+0x2d0>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	60cb      	str	r3, [r1, #12]
 8001200:	e021      	b.n	8001246 <HAL_GPIO_Init+0x2e2>
 8001202:	bf00      	nop
 8001204:	10320000 	.word	0x10320000
 8001208:	10310000 	.word	0x10310000
 800120c:	10220000 	.word	0x10220000
 8001210:	10210000 	.word	0x10210000
 8001214:	10120000 	.word	0x10120000
 8001218:	10110000 	.word	0x10110000
 800121c:	40021000 	.word	0x40021000
 8001220:	40010000 	.word	0x40010000
 8001224:	40010800 	.word	0x40010800
 8001228:	40010c00 	.word	0x40010c00
 800122c:	40011000 	.word	0x40011000
 8001230:	40011400 	.word	0x40011400
 8001234:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_GPIO_Init+0x304>)
 800123a:	68da      	ldr	r2, [r3, #12]
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	43db      	mvns	r3, r3
 8001240:	4909      	ldr	r1, [pc, #36]	; (8001268 <HAL_GPIO_Init+0x304>)
 8001242:	4013      	ands	r3, r2
 8001244:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	3301      	adds	r3, #1
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	fa22 f303 	lsr.w	r3, r2, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	f47f ae8e 	bne.w	8000f78 <HAL_GPIO_Init+0x14>
  }
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	372c      	adds	r7, #44	; 0x2c
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	40010400 	.word	0x40010400

0800126c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	887b      	ldrh	r3, [r7, #2]
 800127e:	4013      	ands	r3, r2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d002      	beq.n	800128a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001284:	2301      	movs	r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
 8001288:	e001      	b.n	800128e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800128e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	460b      	mov	r3, r1
 80012a4:	807b      	strh	r3, [r7, #2]
 80012a6:	4613      	mov	r3, r2
 80012a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012aa:	787b      	ldrb	r3, [r7, #1]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b0:	887a      	ldrh	r2, [r7, #2]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012b6:	e003      	b.n	80012c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012b8:	887b      	ldrh	r3, [r7, #2]
 80012ba:	041a      	lsls	r2, r3, #16
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	611a      	str	r2, [r3, #16]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr

080012ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012cc:	b08b      	sub	sp, #44	; 0x2c
 80012ce:	af06      	add	r7, sp, #24
 80012d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d101      	bne.n	80012dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e0fd      	b.n	80014d8 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d106      	bne.n	80012f6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f007 ff0d 	bl	8009110 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2203      	movs	r2, #3
 80012fa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f002 ff88 	bl	8004218 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	687e      	ldr	r6, [r7, #4]
 8001310:	466d      	mov	r5, sp
 8001312:	f106 0410 	add.w	r4, r6, #16
 8001316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001318:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800131a:	6823      	ldr	r3, [r4, #0]
 800131c:	602b      	str	r3, [r5, #0]
 800131e:	1d33      	adds	r3, r6, #4
 8001320:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001322:	6838      	ldr	r0, [r7, #0]
 8001324:	f002 ff52 	bl	80041cc <USB_CoreInit>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d005      	beq.n	800133a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2202      	movs	r2, #2
 8001332:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e0ce      	b.n	80014d8 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f002 ff83 	bl	800424c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001346:	2300      	movs	r3, #0
 8001348:	73fb      	strb	r3, [r7, #15]
 800134a:	e04c      	b.n	80013e6 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	4613      	mov	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	440b      	add	r3, r1
 800135c:	3301      	adds	r3, #1
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	4613      	mov	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	440b      	add	r3, r1
 8001372:	7bfa      	ldrb	r2, [r7, #15]
 8001374:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001376:	7bfa      	ldrb	r2, [r7, #15]
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	b298      	uxth	r0, r3
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	440b      	add	r3, r1
 8001388:	3336      	adds	r3, #54	; 0x36
 800138a:	4602      	mov	r2, r0
 800138c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	1c5a      	adds	r2, r3, #1
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	440b      	add	r3, r1
 800139e:	3303      	adds	r3, #3
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	440b      	add	r3, r1
 80013b2:	3338      	adds	r3, #56	; 0x38
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013b8:	7bfa      	ldrb	r2, [r7, #15]
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	440b      	add	r3, r1
 80013c6:	333c      	adds	r3, #60	; 0x3c
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	440b      	add	r3, r1
 80013da:	3340      	adds	r3, #64	; 0x40
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	3301      	adds	r3, #1
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	7bfa      	ldrb	r2, [r7, #15]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d3ad      	bcc.n	800134c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	73fb      	strb	r3, [r7, #15]
 80013f4:	e044      	b.n	8001480 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013f6:	7bfa      	ldrb	r2, [r7, #15]
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	440b      	add	r3, r1
 8001404:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800140c:	7bfa      	ldrb	r2, [r7, #15]
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	440b      	add	r3, r1
 800141a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800141e:	7bfa      	ldrb	r2, [r7, #15]
 8001420:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001422:	7bfa      	ldrb	r2, [r7, #15]
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	440b      	add	r3, r1
 8001430:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001438:	7bfa      	ldrb	r2, [r7, #15]
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	440b      	add	r3, r1
 8001446:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800144e:	7bfa      	ldrb	r2, [r7, #15]
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	440b      	add	r3, r1
 800145c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	440b      	add	r3, r1
 8001472:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	3301      	adds	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	429a      	cmp	r2, r3
 8001488:	d3b5      	bcc.n	80013f6 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	687e      	ldr	r6, [r7, #4]
 8001492:	466d      	mov	r5, sp
 8001494:	f106 0410 	add.w	r4, r6, #16
 8001498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800149a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800149c:	6823      	ldr	r3, [r4, #0]
 800149e:	602b      	str	r3, [r5, #0]
 80014a0:	1d33      	adds	r3, r6, #4
 80014a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014a4:	6838      	ldr	r0, [r7, #0]
 80014a6:	f002 fedd 	bl	8004264 <USB_DevInit>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2202      	movs	r2, #2
 80014b4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e00d      	b.n	80014d8 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f005 f864 	bl	800659e <USB_DevDisconnect>

  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d101      	bne.n	80014f6 <HAL_PCD_Start+0x16>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e016      	b.n	8001524 <HAL_PCD_Start+0x44>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f002 fe72 	bl	80041ec <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001508:	2101      	movs	r1, #1
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f008 f889 	bl	8009622 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f005 f838 	bl	800658a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f005 f83a 	bl	80065b2 <USB_ReadInterrupts>
 800153e:	4603      	mov	r3, r0
 8001540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001548:	d102      	bne.n	8001550 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 fb8e 	bl	8001c6c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f005 f82c 	bl	80065b2 <USB_ReadInterrupts>
 800155a:	4603      	mov	r3, r0
 800155c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001564:	d112      	bne.n	800158c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800156e:	b29a      	uxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001578:	b292      	uxth	r2, r2
 800157a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f007 fe41 	bl	8009206 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001584:	2100      	movs	r1, #0
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f925 	bl	80017d6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f005 f80e 	bl	80065b2 <USB_ReadInterrupts>
 8001596:	4603      	mov	r3, r0
 8001598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015a0:	d10b      	bne.n	80015ba <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80015b4:	b292      	uxth	r2, r2
 80015b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f004 fff7 	bl	80065b2 <USB_ReadInterrupts>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015ce:	d10b      	bne.n	80015e8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015d8:	b29a      	uxth	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015e2:	b292      	uxth	r2, r2
 80015e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f004 ffe0 	bl	80065b2 <USB_ReadInterrupts>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015fc:	d126      	bne.n	800164c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001606:	b29a      	uxth	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0204 	bic.w	r2, r2, #4
 8001610:	b292      	uxth	r2, r2
 8001612:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800161e:	b29a      	uxth	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0208 	bic.w	r2, r2, #8
 8001628:	b292      	uxth	r2, r2
 800162a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f007 fe22 	bl	8009278 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800163c:	b29a      	uxth	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001646:	b292      	uxth	r2, r2
 8001648:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f004 ffae 	bl	80065b2 <USB_ReadInterrupts>
 8001656:	4603      	mov	r3, r0
 8001658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800165c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001660:	f040 8084 	bne.w	800176c <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001664:	2300      	movs	r3, #0
 8001666:	77fb      	strb	r3, [r7, #31]
 8001668:	e011      	b.n	800168e <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	7ffb      	ldrb	r3, [r7, #31]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	441a      	add	r2, r3
 8001676:	7ffb      	ldrb	r3, [r7, #31]
 8001678:	8812      	ldrh	r2, [r2, #0]
 800167a:	b292      	uxth	r2, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	f107 0120 	add.w	r1, r7, #32
 8001682:	440b      	add	r3, r1
 8001684:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001688:	7ffb      	ldrb	r3, [r7, #31]
 800168a:	3301      	adds	r3, #1
 800168c:	77fb      	strb	r3, [r7, #31]
 800168e:	7ffb      	ldrb	r3, [r7, #31]
 8001690:	2b07      	cmp	r3, #7
 8001692:	d9ea      	bls.n	800166a <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800169c:	b29a      	uxth	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0201 	orr.w	r2, r2, #1
 80016a6:	b292      	uxth	r2, r2
 80016a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0201 	bic.w	r2, r2, #1
 80016be:	b292      	uxth	r2, r2
 80016c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80016c4:	bf00      	nop
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f6      	beq.n	80016c6 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016ea:	b292      	uxth	r2, r2
 80016ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80016f0:	2300      	movs	r3, #0
 80016f2:	77fb      	strb	r3, [r7, #31]
 80016f4:	e010      	b.n	8001718 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80016f6:	7ffb      	ldrb	r3, [r7, #31]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	4611      	mov	r1, r2
 80016fe:	7ffa      	ldrb	r2, [r7, #31]
 8001700:	0092      	lsls	r2, r2, #2
 8001702:	440a      	add	r2, r1
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	f107 0120 	add.w	r1, r7, #32
 800170a:	440b      	add	r3, r1
 800170c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001710:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001712:	7ffb      	ldrb	r3, [r7, #31]
 8001714:	3301      	adds	r3, #1
 8001716:	77fb      	strb	r3, [r7, #31]
 8001718:	7ffb      	ldrb	r3, [r7, #31]
 800171a:	2b07      	cmp	r3, #7
 800171c:	d9eb      	bls.n	80016f6 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001726:	b29a      	uxth	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f042 0208 	orr.w	r2, r2, #8
 8001730:	b292      	uxth	r2, r2
 8001732:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800173e:	b29a      	uxth	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001748:	b292      	uxth	r2, r2
 800174a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001756:	b29a      	uxth	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f042 0204 	orr.w	r2, r2, #4
 8001760:	b292      	uxth	r2, r2
 8001762:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f007 fd6c 	bl	8009244 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f004 ff1e 	bl	80065b2 <USB_ReadInterrupts>
 8001776:	4603      	mov	r3, r0
 8001778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800177c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001780:	d10e      	bne.n	80017a0 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800178a:	b29a      	uxth	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001794:	b292      	uxth	r2, r2
 8001796:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f007 fd25 	bl	80091ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f004 ff04 	bl	80065b2 <USB_ReadInterrupts>
 80017aa:	4603      	mov	r3, r0
 80017ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017b4:	d10b      	bne.n	80017ce <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017be:	b29a      	uxth	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017c8:	b292      	uxth	r2, r2
 80017ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80017ce:	bf00      	nop
 80017d0:	3720      	adds	r7, #32
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	460b      	mov	r3, r1
 80017e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d101      	bne.n	80017f0 <HAL_PCD_SetAddress+0x1a>
 80017ec:	2302      	movs	r3, #2
 80017ee:	e013      	b.n	8001818 <HAL_PCD_SetAddress+0x42>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	78fa      	ldrb	r2, [r7, #3]
 80017fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	78fa      	ldrb	r2, [r7, #3]
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f004 feab 	bl	8006564 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	4608      	mov	r0, r1
 800182a:	4611      	mov	r1, r2
 800182c:	461a      	mov	r2, r3
 800182e:	4603      	mov	r3, r0
 8001830:	70fb      	strb	r3, [r7, #3]
 8001832:	460b      	mov	r3, r1
 8001834:	803b      	strh	r3, [r7, #0]
 8001836:	4613      	mov	r3, r2
 8001838:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800183a:	2300      	movs	r3, #0
 800183c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800183e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001842:	2b00      	cmp	r3, #0
 8001844:	da0e      	bge.n	8001864 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001846:	78fb      	ldrb	r3, [r7, #3]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	1c5a      	adds	r2, r3, #1
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2201      	movs	r2, #1
 8001860:	705a      	strb	r2, [r3, #1]
 8001862:	e00e      	b.n	8001882 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	f003 0207 	and.w	r2, r3, #7
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2200      	movs	r2, #0
 8001880:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	b2da      	uxtb	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800188e:	883a      	ldrh	r2, [r7, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	78ba      	ldrb	r2, [r7, #2]
 8001898:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	785b      	ldrb	r3, [r3, #1]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d004      	beq.n	80018ac <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80018ac:	78bb      	ldrb	r3, [r7, #2]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d102      	bne.n	80018b8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d101      	bne.n	80018c6 <HAL_PCD_EP_Open+0xa6>
 80018c2:	2302      	movs	r3, #2
 80018c4:	e00e      	b.n	80018e4 <HAL_PCD_EP_Open+0xc4>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68f9      	ldr	r1, [r7, #12]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f002 fcfb 	bl	80042d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80018e2:	7afb      	ldrb	r3, [r7, #11]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	da0e      	bge.n	800191e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	4413      	add	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2201      	movs	r2, #1
 800191a:	705a      	strb	r2, [r3, #1]
 800191c:	e00e      	b.n	800193c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800191e:	78fb      	ldrb	r3, [r7, #3]
 8001920:	f003 0207 	and.w	r2, r3, #7
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	4413      	add	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	b2da      	uxtb	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800194e:	2b01      	cmp	r3, #1
 8001950:	d101      	bne.n	8001956 <HAL_PCD_EP_Close+0x6a>
 8001952:	2302      	movs	r3, #2
 8001954:	e00e      	b.n	8001974 <HAL_PCD_EP_Close+0x88>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68f9      	ldr	r1, [r7, #12]
 8001964:	4618      	mov	r0, r3
 8001966:	f003 f81d 	bl	80049a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	460b      	mov	r3, r1
 800198a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800198c:	7afb      	ldrb	r3, [r7, #11]
 800198e:	f003 0207 	and.w	r2, r3, #7
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	4413      	add	r3, r2
 80019a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	2200      	movs	r2, #0
 80019b4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	2200      	movs	r2, #0
 80019ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019bc:	7afb      	ldrb	r3, [r7, #11]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019c8:	7afb      	ldrb	r3, [r7, #11]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d106      	bne.n	80019e0 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6979      	ldr	r1, [r7, #20]
 80019d8:	4618      	mov	r0, r3
 80019da:	f003 f9cf 	bl	8004d7c <USB_EPStartXfer>
 80019de:	e005      	b.n	80019ec <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6979      	ldr	r1, [r7, #20]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 f9c8 	bl	8004d7c <USB_EPStartXfer>
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	460b      	mov	r3, r1
 8001a00:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a02:	78fb      	ldrb	r3, [r7, #3]
 8001a04:	f003 0207 	and.w	r2, r3, #7
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	440b      	add	r3, r1
 8001a14:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001a18:	681b      	ldr	r3, [r3, #0]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	607a      	str	r2, [r7, #4]
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	460b      	mov	r3, r1
 8001a32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a34:	7afb      	ldrb	r3, [r7, #11]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	4413      	add	r3, r2
 8001a48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a70:	7afb      	ldrb	r3, [r7, #11]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a7c:	7afb      	ldrb	r3, [r7, #11]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d106      	bne.n	8001a94 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6979      	ldr	r1, [r7, #20]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f003 f975 	bl	8004d7c <USB_EPStartXfer>
 8001a92:	e005      	b.n	8001aa0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6979      	ldr	r1, [r7, #20]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f003 f96e 	bl	8004d7c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b084      	sub	sp, #16
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ab6:	78fb      	ldrb	r3, [r7, #3]
 8001ab8:	f003 0207 	and.w	r2, r3, #7
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d901      	bls.n	8001ac8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e04c      	b.n	8001b62 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ac8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	da0e      	bge.n	8001aee <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	705a      	strb	r2, [r3, #1]
 8001aec:	e00c      	b.n	8001b08 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001aee:	78fa      	ldrb	r2, [r7, #3]
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	4413      	add	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b0e:	78fb      	ldrb	r3, [r7, #3]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_PCD_EP_SetStall+0x7e>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e01c      	b.n	8001b62 <HAL_PCD_EP_SetStall+0xb8>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68f9      	ldr	r1, [r7, #12]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f004 fc17 	bl	800636a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d108      	bne.n	8001b58 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001b50:	4619      	mov	r1, r3
 8001b52:	4610      	mov	r0, r2
 8001b54:	f004 fd3c 	bl	80065d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b084      	sub	sp, #16
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	460b      	mov	r3, r1
 8001b74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b76:	78fb      	ldrb	r3, [r7, #3]
 8001b78:	f003 020f 	and.w	r2, r3, #15
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d901      	bls.n	8001b88 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e040      	b.n	8001c0a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	da0e      	bge.n	8001bae <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	705a      	strb	r2, [r3, #1]
 8001bac:	e00e      	b.n	8001bcc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	f003 0207 	and.w	r2, r3, #7
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d101      	bne.n	8001bec <HAL_PCD_EP_ClrStall+0x82>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e00e      	b.n	8001c0a <HAL_PCD_EP_ClrStall+0xa0>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68f9      	ldr	r1, [r7, #12]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f004 fc05 	bl	800640a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_PCD_EP_Flush+0x1a>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e01b      	b.n	8001c64 <HAL_PCD_EP_Flush+0x52>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 8001c34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	da09      	bge.n	8001c50 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	4619      	mov	r1, r3
 8001c48:	4610      	mov	r0, r2
 8001c4a:	f002 fb2b 	bl	80042a4 <USB_FlushTxFifo>
 8001c4e:	e004      	b.n	8001c5a <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f002 fb30 	bl	80042ba <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08e      	sub	sp, #56	; 0x38
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c74:	e2ec      	b.n	8002250 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c7e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001c80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001c8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f040 8161 	bne.w	8001f58 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001c96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c98:	f003 0310 	and.w	r3, r3, #16
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d152      	bne.n	8001d46 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cb0:	81fb      	strh	r3, [r7, #14]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	89fb      	ldrh	r3, [r7, #14]
 8001cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3328      	adds	r3, #40	; 0x28
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4413      	add	r3, r2
 8001cde:	3302      	adds	r3, #2
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	695a      	ldr	r2, [r3, #20]
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	441a      	add	r2, r3
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001d04:	2100      	movs	r1, #0
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f007 fa55 	bl	80091b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 829b 	beq.w	8002250 <PCD_EP_ISR_Handler+0x5e4>
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f040 8296 	bne.w	8002250 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	b292      	uxth	r2, r2
 8001d38:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001d44:	e284      	b.n	8002250 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d034      	beq.n	8001dca <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4413      	add	r3, r2
 8001d74:	3306      	adds	r3, #6
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6812      	ldr	r2, [r2, #0]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	f004 fc66 	bl	8006670 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001db0:	4013      	ands	r3, r2
 8001db2:	823b      	strh	r3, [r7, #16]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	8a3a      	ldrh	r2, [r7, #16]
 8001dba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dbe:	b292      	uxth	r2, r2
 8001dc0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f007 f9ca 	bl	800915c <HAL_PCD_SetupStageCallback>
 8001dc8:	e242      	b.n	8002250 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001dca:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f280 823e 	bge.w	8002250 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001de0:	4013      	ands	r3, r2
 8001de2:	83bb      	strh	r3, [r7, #28]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	8bba      	ldrh	r2, [r7, #28]
 8001dea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dee:	b292      	uxth	r2, r2
 8001df0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4413      	add	r3, r2
 8001e06:	3306      	adds	r3, #6
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d019      	beq.n	8001e5a <PCD_EP_ISR_Handler+0x1ee>
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d015      	beq.n	8001e5a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	6959      	ldr	r1, [r3, #20]
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	f004 fc16 	bl	8006670 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	441a      	add	r2, r3
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e52:	2100      	movs	r1, #0
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f007 f993 	bl	8009180 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f040 81f2 	bne.w	8002250 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	4413      	add	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d112      	bne.n	8001eba <PCD_EP_ISR_Handler+0x24e>
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	801a      	strh	r2, [r3, #0]
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	801a      	strh	r2, [r3, #0]
 8001eb8:	e02f      	b.n	8001f1a <PCD_EP_ISR_Handler+0x2ae>
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	2b3e      	cmp	r3, #62	; 0x3e
 8001ec0:	d813      	bhi.n	8001eea <PCD_EP_ISR_Handler+0x27e>
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	085b      	lsrs	r3, r3, #1
 8001ec8:	633b      	str	r3, [r7, #48]	; 0x30
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <PCD_EP_ISR_Handler+0x270>
 8001ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed8:	3301      	adds	r3, #1
 8001eda:	633b      	str	r3, [r7, #48]	; 0x30
 8001edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	029b      	lsls	r3, r3, #10
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	801a      	strh	r2, [r3, #0]
 8001ee8:	e017      	b.n	8001f1a <PCD_EP_ISR_Handler+0x2ae>
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f003 031f 	and.w	r3, r3, #31
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d102      	bne.n	8001f04 <PCD_EP_ISR_Handler+0x298>
 8001efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f00:	3b01      	subs	r3, #1
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30
 8001f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	029b      	lsls	r3, r3, #10
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f2a:	827b      	strh	r3, [r7, #18]
 8001f2c:	8a7b      	ldrh	r3, [r7, #18]
 8001f2e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001f32:	827b      	strh	r3, [r7, #18]
 8001f34:	8a7b      	ldrh	r3, [r7, #18]
 8001f36:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f3a:	827b      	strh	r3, [r7, #18]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	8a7b      	ldrh	r3, [r7, #18]
 8001f42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	8013      	strh	r3, [r2, #0]
 8001f56:	e17b      	b.n	8002250 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f6a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f280 80ea 	bge.w	8002148 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	853b      	strh	r3, [r7, #40]	; 0x28
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fa2:	b292      	uxth	r2, r2
 8001fa4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001fa6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	7b1b      	ldrb	r3, [r3, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d122      	bne.n	800200a <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	461a      	mov	r2, r3
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3306      	adds	r3, #6
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fec:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001fee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 8087 	beq.w	8002104 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6818      	ldr	r0, [r3, #0]
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	6959      	ldr	r1, [r3, #20]
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	88da      	ldrh	r2, [r3, #6]
 8002002:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002004:	f004 fb34 	bl	8006670 <USB_ReadPMA>
 8002008:	e07c      	b.n	8002104 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	78db      	ldrb	r3, [r3, #3]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d108      	bne.n	8002024 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002012:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002014:	461a      	mov	r2, r3
 8002016:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f927 	bl	800226c <HAL_PCD_EP_DB_Receive>
 800201e:	4603      	mov	r3, r0
 8002020:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002022:	e06f      	b.n	8002104 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	461a      	mov	r2, r3
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	b29b      	uxth	r3, r3
 8002036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800203a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800203e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	441a      	add	r2, r3
 800204e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002054:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800205c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002060:	b29b      	uxth	r3, r3
 8002062:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	b29b      	uxth	r3, r3
 8002076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d021      	beq.n	80020c2 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002086:	b29b      	uxth	r3, r3
 8002088:	461a      	mov	r2, r3
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4413      	add	r3, r2
 8002092:	3302      	adds	r3, #2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6812      	ldr	r2, [r2, #0]
 800209a:	4413      	add	r3, r2
 800209c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020a6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80020a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d02a      	beq.n	8002104 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	6959      	ldr	r1, [r3, #20]
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	891a      	ldrh	r2, [r3, #8]
 80020ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020bc:	f004 fad8 	bl	8006670 <USB_ReadPMA>
 80020c0:	e020      	b.n	8002104 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4413      	add	r3, r2
 80020d6:	3306      	adds	r3, #6
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ea:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80020ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d008      	beq.n	8002104 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	6959      	ldr	r1, [r3, #20]
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	895a      	ldrh	r2, [r3, #10]
 80020fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002100:	f004 fab6 	bl	8006670 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	69da      	ldr	r2, [r3, #28]
 8002108:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800210a:	441a      	add	r2, r3
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	695a      	ldr	r2, [r3, #20]
 8002114:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002116:	441a      	add	r2, r3
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d004      	beq.n	800212e <PCD_EP_ISR_Handler+0x4c2>
 8002124:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	429a      	cmp	r2, r3
 800212c:	d206      	bcs.n	800213c <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	4619      	mov	r1, r3
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f007 f823 	bl	8009180 <HAL_PCD_DataOutStageCallback>
 800213a:	e005      	b.n	8002148 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002142:	4618      	mov	r0, r3
 8002144:	f002 fe1a 	bl	8004d7c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002148:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800214a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214e:	2b00      	cmp	r3, #0
 8002150:	d07e      	beq.n	8002250 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002152:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	4413      	add	r3, r2
 8002164:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	b29b      	uxth	r3, r3
 8002178:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800217c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002180:	843b      	strh	r3, [r7, #32]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	441a      	add	r2, r3
 8002190:	8c3b      	ldrh	r3, [r7, #32]
 8002192:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002196:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800219a:	b29b      	uxth	r3, r3
 800219c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	78db      	ldrb	r3, [r3, #3]
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d00c      	beq.n	80021c0 <PCD_EP_ISR_Handler+0x554>
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	78db      	ldrb	r3, [r3, #3]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d008      	beq.n	80021c0 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d146      	bne.n	8002244 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80021b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d141      	bne.n	8002244 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	461a      	mov	r2, r3
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4413      	add	r3, r2
 80021d4:	3302      	adds	r3, #2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021e8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	699a      	ldr	r2, [r3, #24]
 80021ee:	8bfb      	ldrh	r3, [r7, #30]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d906      	bls.n	8002202 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	699a      	ldr	r2, [r3, #24]
 80021f8:	8bfb      	ldrh	r3, [r7, #30]
 80021fa:	1ad2      	subs	r2, r2, r3
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	619a      	str	r2, [r3, #24]
 8002200:	e002      	b.n	8002208 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d106      	bne.n	800221e <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	4619      	mov	r1, r3
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f006 ffcd 	bl	80091b6 <HAL_PCD_DataInStageCallback>
 800221c:	e018      	b.n	8002250 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	8bfb      	ldrh	r3, [r7, #30]
 8002224:	441a      	add	r2, r3
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	69da      	ldr	r2, [r3, #28]
 800222e:	8bfb      	ldrh	r3, [r7, #30]
 8002230:	441a      	add	r2, r3
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800223c:	4618      	mov	r0, r3
 800223e:	f002 fd9d 	bl	8004d7c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002242:	e005      	b.n	8002250 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002244:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002246:	461a      	mov	r2, r3
 8002248:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f91b 	bl	8002486 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002258:	b29b      	uxth	r3, r3
 800225a:	b21b      	sxth	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	f6ff ad0a 	blt.w	8001c76 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3738      	adds	r7, #56	; 0x38
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	4613      	mov	r3, r2
 8002278:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800227a:	88fb      	ldrh	r3, [r7, #6]
 800227c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d07e      	beq.n	8002382 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800228c:	b29b      	uxth	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	3302      	adds	r3, #2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	699a      	ldr	r2, [r3, #24]
 80022b2:	8b7b      	ldrh	r3, [r7, #26]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d306      	bcc.n	80022c6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	699a      	ldr	r2, [r3, #24]
 80022bc:	8b7b      	ldrh	r3, [r7, #26]
 80022be:	1ad2      	subs	r2, r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	619a      	str	r2, [r3, #24]
 80022c4:	e002      	b.n	80022cc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2200      	movs	r2, #0
 80022ca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d123      	bne.n	800231c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ee:	833b      	strh	r3, [r7, #24]
 80022f0:	8b3b      	ldrh	r3, [r7, #24]
 80022f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022f6:	833b      	strh	r3, [r7, #24]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	441a      	add	r2, r3
 8002306:	8b3b      	ldrh	r3, [r7, #24]
 8002308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800230c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002318:	b29b      	uxth	r3, r3
 800231a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002322:	2b00      	cmp	r3, #0
 8002324:	d01f      	beq.n	8002366 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	b29b      	uxth	r3, r3
 8002338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800233c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002340:	82fb      	strh	r3, [r7, #22]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	441a      	add	r2, r3
 8002350:	8afb      	ldrh	r3, [r7, #22]
 8002352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800235a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800235e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002362:	b29b      	uxth	r3, r3
 8002364:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002366:	8b7b      	ldrh	r3, [r7, #26]
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 8087 	beq.w	800247c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6818      	ldr	r0, [r3, #0]
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	6959      	ldr	r1, [r3, #20]
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	891a      	ldrh	r2, [r3, #8]
 800237a:	8b7b      	ldrh	r3, [r7, #26]
 800237c:	f004 f978 	bl	8006670 <USB_ReadPMA>
 8002380:	e07c      	b.n	800247c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800238a:	b29b      	uxth	r3, r3
 800238c:	461a      	mov	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4413      	add	r3, r2
 8002396:	3306      	adds	r3, #6
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023aa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	699a      	ldr	r2, [r3, #24]
 80023b0:	8b7b      	ldrh	r3, [r7, #26]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d306      	bcc.n	80023c4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	699a      	ldr	r2, [r3, #24]
 80023ba:	8b7b      	ldrh	r3, [r7, #26]
 80023bc:	1ad2      	subs	r2, r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	619a      	str	r2, [r3, #24]
 80023c2:	e002      	b.n	80023ca <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2200      	movs	r2, #0
 80023c8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d123      	bne.n	800241a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ec:	83fb      	strh	r3, [r7, #30]
 80023ee:	8bfb      	ldrh	r3, [r7, #30]
 80023f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023f4:	83fb      	strh	r3, [r7, #30]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	441a      	add	r2, r3
 8002404:	8bfb      	ldrh	r3, [r7, #30]
 8002406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800240a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800240e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002416:	b29b      	uxth	r3, r3
 8002418:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002420:	2b00      	cmp	r3, #0
 8002422:	d11f      	bne.n	8002464 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	b29b      	uxth	r3, r3
 8002436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800243a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800243e:	83bb      	strh	r3, [r7, #28]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	441a      	add	r2, r3
 800244e:	8bbb      	ldrh	r3, [r7, #28]
 8002450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800245c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002460:	b29b      	uxth	r3, r3
 8002462:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002464:	8b7b      	ldrh	r3, [r7, #26]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d008      	beq.n	800247c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	6959      	ldr	r1, [r3, #20]
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	895a      	ldrh	r2, [r3, #10]
 8002476:	8b7b      	ldrh	r3, [r7, #26]
 8002478:	f004 f8fa 	bl	8006670 <USB_ReadPMA>
    }
  }

  return count;
 800247c:	8b7b      	ldrh	r3, [r7, #26]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3720      	adds	r7, #32
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b0a2      	sub	sp, #136	; 0x88
 800248a:	af00      	add	r7, sp, #0
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	4613      	mov	r3, r2
 8002492:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002494:	88fb      	ldrh	r3, [r7, #6]
 8002496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 81c7 	beq.w	800282e <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4413      	add	r3, r2
 80024b4:	3302      	adds	r3, #2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	699a      	ldr	r2, [r3, #24]
 80024d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d907      	bls.n	80024e8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	699a      	ldr	r2, [r3, #24]
 80024dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024e0:	1ad2      	subs	r2, r2, r3
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	619a      	str	r2, [r3, #24]
 80024e6:	e002      	b.n	80024ee <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2200      	movs	r2, #0
 80024ec:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f040 80b9 	bne.w	800266a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	785b      	ldrb	r3, [r3, #1]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d126      	bne.n	800254e <HAL_PCD_EP_DB_Transmit+0xc8>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800250e:	b29b      	uxth	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002514:	4413      	add	r3, r2
 8002516:	62bb      	str	r3, [r7, #40]	; 0x28
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	011a      	lsls	r2, r3, #4
 800251e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002520:	4413      	add	r3, r2
 8002522:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	b29b      	uxth	r3, r3
 800252e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002532:	b29a      	uxth	r2, r3
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	801a      	strh	r2, [r3, #0]
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	b29b      	uxth	r3, r3
 800253e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002546:	b29a      	uxth	r2, r3
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	801a      	strh	r2, [r3, #0]
 800254c:	e01a      	b.n	8002584 <HAL_PCD_EP_DB_Transmit+0xfe>
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	785b      	ldrb	r3, [r3, #1]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d116      	bne.n	8002584 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	633b      	str	r3, [r7, #48]	; 0x30
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002564:	b29b      	uxth	r3, r3
 8002566:	461a      	mov	r2, r3
 8002568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256a:	4413      	add	r3, r2
 800256c:	633b      	str	r3, [r7, #48]	; 0x30
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	011a      	lsls	r2, r3, #4
 8002574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002576:	4413      	add	r3, r2
 8002578:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800257c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800257e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002580:	2200      	movs	r2, #0
 8002582:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	623b      	str	r3, [r7, #32]
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	785b      	ldrb	r3, [r3, #1]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d126      	bne.n	80025e0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	61bb      	str	r3, [r7, #24]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	4413      	add	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	011a      	lsls	r2, r3, #4
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	4413      	add	r3, r2
 80025b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	801a      	strh	r2, [r3, #0]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025d8:	b29a      	uxth	r2, r3
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	801a      	strh	r2, [r3, #0]
 80025de:	e017      	b.n	8002610 <HAL_PCD_EP_DB_Transmit+0x18a>
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	785b      	ldrb	r3, [r3, #1]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d113      	bne.n	8002610 <HAL_PCD_EP_DB_Transmit+0x18a>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	4413      	add	r3, r2
 80025f8:	623b      	str	r3, [r7, #32]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	011a      	lsls	r2, r3, #4
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	4413      	add	r3, r2
 8002604:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002608:	61fb      	str	r3, [r7, #28]
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	2200      	movs	r2, #0
 800260e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	4619      	mov	r1, r3
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f006 fdcd 	bl	80091b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800261c:	88fb      	ldrh	r3, [r7, #6]
 800261e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 82d4 	beq.w	8002bd0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	b29b      	uxth	r3, r3
 800263a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800263e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002642:	827b      	strh	r3, [r7, #18]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	461a      	mov	r2, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	441a      	add	r2, r3
 8002652:	8a7b      	ldrh	r3, [r7, #18]
 8002654:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002658:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800265c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002664:	b29b      	uxth	r3, r3
 8002666:	8013      	strh	r3, [r2, #0]
 8002668:	e2b2      	b.n	8002bd0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800266a:	88fb      	ldrh	r3, [r7, #6]
 800266c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d021      	beq.n	80026b8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	b29b      	uxth	r3, r3
 8002686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800268a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	441a      	add	r2, r3
 80026a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80026a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026be:	2b01      	cmp	r3, #1
 80026c0:	f040 8286 	bne.w	8002bd0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	695a      	ldr	r2, [r3, #20]
 80026c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026cc:	441a      	add	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	69da      	ldr	r2, [r3, #28]
 80026d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026da:	441a      	add	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	6a1a      	ldr	r2, [r3, #32]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d309      	bcc.n	8002700 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	6a1a      	ldr	r2, [r3, #32]
 80026f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026f8:	1ad2      	subs	r2, r2, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	621a      	str	r2, [r3, #32]
 80026fe:	e015      	b.n	800272c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d107      	bne.n	8002718 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002708:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800270c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002716:	e009      	b.n	800272c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2200      	movs	r2, #0
 800272a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	785b      	ldrb	r3, [r3, #1]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d155      	bne.n	80027e0 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	63bb      	str	r3, [r7, #56]	; 0x38
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002742:	b29b      	uxth	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002748:	4413      	add	r3, r2
 800274a:	63bb      	str	r3, [r7, #56]	; 0x38
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	011a      	lsls	r2, r3, #4
 8002752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002754:	4413      	add	r3, r2
 8002756:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800275a:	637b      	str	r3, [r7, #52]	; 0x34
 800275c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800275e:	2b00      	cmp	r3, #0
 8002760:	d112      	bne.n	8002788 <HAL_PCD_EP_DB_Transmit+0x302>
 8002762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	b29b      	uxth	r3, r3
 8002768:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800276c:	b29a      	uxth	r2, r3
 800276e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002770:	801a      	strh	r2, [r3, #0]
 8002772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	b29b      	uxth	r3, r3
 8002778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800277c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002780:	b29a      	uxth	r2, r3
 8002782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002784:	801a      	strh	r2, [r3, #0]
 8002786:	e047      	b.n	8002818 <HAL_PCD_EP_DB_Transmit+0x392>
 8002788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800278a:	2b3e      	cmp	r3, #62	; 0x3e
 800278c:	d811      	bhi.n	80027b2 <HAL_PCD_EP_DB_Transmit+0x32c>
 800278e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002790:	085b      	lsrs	r3, r3, #1
 8002792:	64bb      	str	r3, [r7, #72]	; 0x48
 8002794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <HAL_PCD_EP_DB_Transmit+0x31e>
 800279e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027a0:	3301      	adds	r3, #1
 80027a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80027a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	029b      	lsls	r3, r3, #10
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ae:	801a      	strh	r2, [r3, #0]
 80027b0:	e032      	b.n	8002818 <HAL_PCD_EP_DB_Transmit+0x392>
 80027b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027b4:	095b      	lsrs	r3, r3, #5
 80027b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80027b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ba:	f003 031f 	and.w	r3, r3, #31
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d102      	bne.n	80027c8 <HAL_PCD_EP_DB_Transmit+0x342>
 80027c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027c4:	3b01      	subs	r3, #1
 80027c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80027c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	029b      	lsls	r3, r3, #10
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027d8:	b29a      	uxth	r2, r3
 80027da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027dc:	801a      	strh	r2, [r3, #0]
 80027de:	e01b      	b.n	8002818 <HAL_PCD_EP_DB_Transmit+0x392>
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	785b      	ldrb	r3, [r3, #1]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d117      	bne.n	8002818 <HAL_PCD_EP_DB_Transmit+0x392>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	643b      	str	r3, [r7, #64]	; 0x40
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027fc:	4413      	add	r3, r2
 80027fe:	643b      	str	r3, [r7, #64]	; 0x40
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	011a      	lsls	r2, r3, #4
 8002806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002808:	4413      	add	r3, r2
 800280a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800280e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002812:	b29a      	uxth	r2, r3
 8002814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002816:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	6959      	ldr	r1, [r3, #20]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	891a      	ldrh	r2, [r3, #8]
 8002824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002826:	b29b      	uxth	r3, r3
 8002828:	f003 fedd 	bl	80065e6 <USB_WritePMA>
 800282c:	e1d0      	b.n	8002bd0 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002836:	b29b      	uxth	r3, r3
 8002838:	461a      	mov	r2, r3
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4413      	add	r3, r2
 8002842:	3306      	adds	r3, #6
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	6812      	ldr	r2, [r2, #0]
 800284a:	4413      	add	r3, r2
 800284c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002856:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	699a      	ldr	r2, [r3, #24]
 800285e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002862:	429a      	cmp	r2, r3
 8002864:	d307      	bcc.n	8002876 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	699a      	ldr	r2, [r3, #24]
 800286a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800286e:	1ad2      	subs	r2, r2, r3
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	619a      	str	r2, [r3, #24]
 8002874:	e002      	b.n	800287c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	2b00      	cmp	r3, #0
 8002882:	f040 80c4 	bne.w	8002a0e <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	785b      	ldrb	r3, [r3, #1]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d126      	bne.n	80028dc <HAL_PCD_EP_DB_Transmit+0x456>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800289c:	b29b      	uxth	r3, r3
 800289e:	461a      	mov	r2, r3
 80028a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a2:	4413      	add	r3, r2
 80028a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	011a      	lsls	r2, r3, #4
 80028ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ae:	4413      	add	r3, r2
 80028b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80028b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028c4:	801a      	strh	r2, [r3, #0]
 80028c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028d8:	801a      	strh	r2, [r3, #0]
 80028da:	e01a      	b.n	8002912 <HAL_PCD_EP_DB_Transmit+0x48c>
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	785b      	ldrb	r3, [r3, #1]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d116      	bne.n	8002912 <HAL_PCD_EP_DB_Transmit+0x48c>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	677b      	str	r3, [r7, #116]	; 0x74
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	461a      	mov	r2, r3
 80028f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028f8:	4413      	add	r3, r2
 80028fa:	677b      	str	r3, [r7, #116]	; 0x74
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	011a      	lsls	r2, r3, #4
 8002902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002904:	4413      	add	r3, r2
 8002906:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800290a:	673b      	str	r3, [r7, #112]	; 0x70
 800290c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800290e:	2200      	movs	r2, #0
 8002910:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	67bb      	str	r3, [r7, #120]	; 0x78
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	785b      	ldrb	r3, [r3, #1]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d12f      	bne.n	8002980 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002930:	b29b      	uxth	r3, r3
 8002932:	461a      	mov	r2, r3
 8002934:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002938:	4413      	add	r3, r2
 800293a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	011a      	lsls	r2, r3, #4
 8002944:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002948:	4413      	add	r3, r2
 800294a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800294e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002952:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	b29b      	uxth	r3, r3
 800295a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800295e:	b29a      	uxth	r2, r3
 8002960:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002964:	801a      	strh	r2, [r3, #0]
 8002966:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	b29b      	uxth	r3, r3
 800296e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002976:	b29a      	uxth	r2, r3
 8002978:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800297c:	801a      	strh	r2, [r3, #0]
 800297e:	e017      	b.n	80029b0 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	785b      	ldrb	r3, [r3, #1]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d113      	bne.n	80029b0 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002990:	b29b      	uxth	r3, r3
 8002992:	461a      	mov	r2, r3
 8002994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002996:	4413      	add	r3, r2
 8002998:	67bb      	str	r3, [r7, #120]	; 0x78
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	011a      	lsls	r2, r3, #4
 80029a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029a2:	4413      	add	r3, r2
 80029a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80029aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029ac:	2200      	movs	r2, #0
 80029ae:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	4619      	mov	r1, r3
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f006 fbfd 	bl	80091b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029bc:	88fb      	ldrh	r3, [r7, #6]
 80029be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f040 8104 	bne.w	8002bd0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	441a      	add	r2, r3
 80029f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80029f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	8013      	strh	r3, [r2, #0]
 8002a0c:	e0e0      	b.n	8002bd0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a0e:	88fb      	ldrh	r3, [r7, #6]
 8002a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d121      	bne.n	8002a5c <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a32:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	441a      	add	r2, r3
 8002a44:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	f040 80b4 	bne.w	8002bd0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	695a      	ldr	r2, [r3, #20]
 8002a6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a70:	441a      	add	r2, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	69da      	ldr	r2, [r3, #28]
 8002a7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a7e:	441a      	add	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	6a1a      	ldr	r2, [r3, #32]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d309      	bcc.n	8002aa4 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	6a1a      	ldr	r2, [r3, #32]
 8002a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a9c:	1ad2      	subs	r2, r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	621a      	str	r2, [r3, #32]
 8002aa2:	e015      	b.n	8002ad0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d107      	bne.n	8002abc <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002aac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ab0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002aba:	e009      	b.n	8002ad0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	667b      	str	r3, [r7, #100]	; 0x64
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	785b      	ldrb	r3, [r3, #1]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d155      	bne.n	8002b8a <HAL_PCD_EP_DB_Transmit+0x704>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af2:	4413      	add	r3, r2
 8002af4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	011a      	lsls	r2, r3, #4
 8002afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002afe:	4413      	add	r3, r2
 8002b00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b04:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d112      	bne.n	8002b32 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002b0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b1a:	801a      	strh	r2, [r3, #0]
 8002b1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b2e:	801a      	strh	r2, [r3, #0]
 8002b30:	e044      	b.n	8002bbc <HAL_PCD_EP_DB_Transmit+0x736>
 8002b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b34:	2b3e      	cmp	r3, #62	; 0x3e
 8002b36:	d811      	bhi.n	8002b5c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b3a:	085b      	lsrs	r3, r3, #1
 8002b3c:	657b      	str	r3, [r7, #84]	; 0x54
 8002b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	657b      	str	r3, [r7, #84]	; 0x54
 8002b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	029b      	lsls	r3, r3, #10
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b58:	801a      	strh	r2, [r3, #0]
 8002b5a:	e02f      	b.n	8002bbc <HAL_PCD_EP_DB_Transmit+0x736>
 8002b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	657b      	str	r3, [r7, #84]	; 0x54
 8002b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d102      	bne.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	657b      	str	r3, [r7, #84]	; 0x54
 8002b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	029b      	lsls	r3, r3, #10
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b86:	801a      	strh	r2, [r3, #0]
 8002b88:	e018      	b.n	8002bbc <HAL_PCD_EP_DB_Transmit+0x736>
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	785b      	ldrb	r3, [r3, #1]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d114      	bne.n	8002bbc <HAL_PCD_EP_DB_Transmit+0x736>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ba0:	4413      	add	r3, r2
 8002ba2:	667b      	str	r3, [r7, #100]	; 0x64
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	011a      	lsls	r2, r3, #4
 8002baa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bac:	4413      	add	r3, r2
 8002bae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bb2:	663b      	str	r3, [r7, #96]	; 0x60
 8002bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bba:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	6959      	ldr	r1, [r3, #20]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	895a      	ldrh	r2, [r3, #10]
 8002bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	f003 fd0b 	bl	80065e6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bea:	823b      	strh	r3, [r7, #16]
 8002bec:	8a3b      	ldrh	r3, [r7, #16]
 8002bee:	f083 0310 	eor.w	r3, r3, #16
 8002bf2:	823b      	strh	r3, [r7, #16]
 8002bf4:	8a3b      	ldrh	r3, [r7, #16]
 8002bf6:	f083 0320 	eor.w	r3, r3, #32
 8002bfa:	823b      	strh	r3, [r7, #16]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	441a      	add	r2, r3
 8002c0a:	8a3b      	ldrh	r3, [r7, #16]
 8002c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3788      	adds	r7, #136	; 0x88
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b087      	sub	sp, #28
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	607b      	str	r3, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	817b      	strh	r3, [r7, #10]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c3c:	897b      	ldrh	r3, [r7, #10]
 8002c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00b      	beq.n	8002c60 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c48:	897b      	ldrh	r3, [r7, #10]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]
 8002c5e:	e009      	b.n	8002c74 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c60:	897a      	ldrh	r2, [r7, #10]
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4413      	add	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c74:	893b      	ldrh	r3, [r7, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d107      	bne.n	8002c8a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	80da      	strh	r2, [r3, #6]
 8002c88:	e00b      	b.n	8002ca2 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	0c1b      	lsrs	r3, r3, #16
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	371c      	adds	r7, #28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr
	...

08002cb0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002cb4:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
}
 8002cba:	bf00      	nop
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	420e0020 	.word	0x420e0020

08002cc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e26c      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 8087 	beq.w	8002df6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ce8:	4b92      	ldr	r3, [pc, #584]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 030c 	and.w	r3, r3, #12
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d00c      	beq.n	8002d0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cf4:	4b8f      	ldr	r3, [pc, #572]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 030c 	and.w	r3, r3, #12
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d112      	bne.n	8002d26 <HAL_RCC_OscConfig+0x5e>
 8002d00:	4b8c      	ldr	r3, [pc, #560]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0c:	d10b      	bne.n	8002d26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0e:	4b89      	ldr	r3, [pc, #548]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d06c      	beq.n	8002df4 <HAL_RCC_OscConfig+0x12c>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d168      	bne.n	8002df4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e246      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d2e:	d106      	bne.n	8002d3e <HAL_RCC_OscConfig+0x76>
 8002d30:	4b80      	ldr	r3, [pc, #512]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a7f      	ldr	r2, [pc, #508]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3a:	6013      	str	r3, [r2, #0]
 8002d3c:	e02e      	b.n	8002d9c <HAL_RCC_OscConfig+0xd4>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x98>
 8002d46:	4b7b      	ldr	r3, [pc, #492]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a7a      	ldr	r2, [pc, #488]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	4b78      	ldr	r3, [pc, #480]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a77      	ldr	r2, [pc, #476]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	e01d      	b.n	8002d9c <HAL_RCC_OscConfig+0xd4>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCC_OscConfig+0xbc>
 8002d6a:	4b72      	ldr	r3, [pc, #456]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a71      	ldr	r2, [pc, #452]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	4b6f      	ldr	r3, [pc, #444]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a6e      	ldr	r2, [pc, #440]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	e00b      	b.n	8002d9c <HAL_RCC_OscConfig+0xd4>
 8002d84:	4b6b      	ldr	r3, [pc, #428]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a6a      	ldr	r2, [pc, #424]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	4b68      	ldr	r3, [pc, #416]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a67      	ldr	r2, [pc, #412]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d013      	beq.n	8002dcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7fd fdb4 	bl	8000910 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dac:	f7fd fdb0 	bl	8000910 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	; 0x64
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e1fa      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dbe:	4b5d      	ldr	r3, [pc, #372]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0xe4>
 8002dca:	e014      	b.n	8002df6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dcc:	f7fd fda0 	bl	8000910 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd4:	f7fd fd9c 	bl	8000910 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b64      	cmp	r3, #100	; 0x64
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e1e6      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de6:	4b53      	ldr	r3, [pc, #332]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x10c>
 8002df2:	e000      	b.n	8002df6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d063      	beq.n	8002eca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e02:	4b4c      	ldr	r3, [pc, #304]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00b      	beq.n	8002e26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e0e:	4b49      	ldr	r3, [pc, #292]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 030c 	and.w	r3, r3, #12
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d11c      	bne.n	8002e54 <HAL_RCC_OscConfig+0x18c>
 8002e1a:	4b46      	ldr	r3, [pc, #280]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d116      	bne.n	8002e54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e26:	4b43      	ldr	r3, [pc, #268]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d005      	beq.n	8002e3e <HAL_RCC_OscConfig+0x176>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d001      	beq.n	8002e3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e1ba      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3e:	4b3d      	ldr	r3, [pc, #244]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4939      	ldr	r1, [pc, #228]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e52:	e03a      	b.n	8002eca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d020      	beq.n	8002e9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e5c:	4b36      	ldr	r3, [pc, #216]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e62:	f7fd fd55 	bl	8000910 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6a:	f7fd fd51 	bl	8000910 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e19b      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7c:	4b2d      	ldr	r3, [pc, #180]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e88:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4927      	ldr	r1, [pc, #156]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	600b      	str	r3, [r1, #0]
 8002e9c:	e015      	b.n	8002eca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e9e:	4b26      	ldr	r3, [pc, #152]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea4:	f7fd fd34 	bl	8000910 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eac:	f7fd fd30 	bl	8000910 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e17a      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ebe:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d03a      	beq.n	8002f4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d019      	beq.n	8002f12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ede:	4b17      	ldr	r3, [pc, #92]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee4:	f7fd fd14 	bl	8000910 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eec:	f7fd fd10 	bl	8000910 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e15a      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efe:	4b0d      	ldr	r3, [pc, #52]	; (8002f34 <HAL_RCC_OscConfig+0x26c>)
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f0      	beq.n	8002eec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f0a:	2001      	movs	r0, #1
 8002f0c:	f000 fad8 	bl	80034c0 <RCC_Delay>
 8002f10:	e01c      	b.n	8002f4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f12:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f18:	f7fd fcfa 	bl	8000910 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f1e:	e00f      	b.n	8002f40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f20:	f7fd fcf6 	bl	8000910 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d908      	bls.n	8002f40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e140      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
 8002f32:	bf00      	nop
 8002f34:	40021000 	.word	0x40021000
 8002f38:	42420000 	.word	0x42420000
 8002f3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f40:	4b9e      	ldr	r3, [pc, #632]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1e9      	bne.n	8002f20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 80a6 	beq.w	80030a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f5e:	4b97      	ldr	r3, [pc, #604]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10d      	bne.n	8002f86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f6a:	4b94      	ldr	r3, [pc, #592]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	4a93      	ldr	r2, [pc, #588]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8002f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f74:	61d3      	str	r3, [r2, #28]
 8002f76:	4b91      	ldr	r3, [pc, #580]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f82:	2301      	movs	r3, #1
 8002f84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f86:	4b8e      	ldr	r3, [pc, #568]	; (80031c0 <HAL_RCC_OscConfig+0x4f8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d118      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f92:	4b8b      	ldr	r3, [pc, #556]	; (80031c0 <HAL_RCC_OscConfig+0x4f8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a8a      	ldr	r2, [pc, #552]	; (80031c0 <HAL_RCC_OscConfig+0x4f8>)
 8002f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9e:	f7fd fcb7 	bl	8000910 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa6:	f7fd fcb3 	bl	8000910 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b64      	cmp	r3, #100	; 0x64
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e0fd      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb8:	4b81      	ldr	r3, [pc, #516]	; (80031c0 <HAL_RCC_OscConfig+0x4f8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d106      	bne.n	8002fda <HAL_RCC_OscConfig+0x312>
 8002fcc:	4b7b      	ldr	r3, [pc, #492]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	4a7a      	ldr	r2, [pc, #488]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6213      	str	r3, [r2, #32]
 8002fd8:	e02d      	b.n	8003036 <HAL_RCC_OscConfig+0x36e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x334>
 8002fe2:	4b76      	ldr	r3, [pc, #472]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	4a75      	ldr	r2, [pc, #468]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8002fe8:	f023 0301 	bic.w	r3, r3, #1
 8002fec:	6213      	str	r3, [r2, #32]
 8002fee:	4b73      	ldr	r3, [pc, #460]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	4a72      	ldr	r2, [pc, #456]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8002ff4:	f023 0304 	bic.w	r3, r3, #4
 8002ff8:	6213      	str	r3, [r2, #32]
 8002ffa:	e01c      	b.n	8003036 <HAL_RCC_OscConfig+0x36e>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	2b05      	cmp	r3, #5
 8003002:	d10c      	bne.n	800301e <HAL_RCC_OscConfig+0x356>
 8003004:	4b6d      	ldr	r3, [pc, #436]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	4a6c      	ldr	r2, [pc, #432]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 800300a:	f043 0304 	orr.w	r3, r3, #4
 800300e:	6213      	str	r3, [r2, #32]
 8003010:	4b6a      	ldr	r3, [pc, #424]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	4a69      	ldr	r2, [pc, #420]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	6213      	str	r3, [r2, #32]
 800301c:	e00b      	b.n	8003036 <HAL_RCC_OscConfig+0x36e>
 800301e:	4b67      	ldr	r3, [pc, #412]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	4a66      	ldr	r2, [pc, #408]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8003024:	f023 0301 	bic.w	r3, r3, #1
 8003028:	6213      	str	r3, [r2, #32]
 800302a:	4b64      	ldr	r3, [pc, #400]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	4a63      	ldr	r2, [pc, #396]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8003030:	f023 0304 	bic.w	r3, r3, #4
 8003034:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d015      	beq.n	800306a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800303e:	f7fd fc67 	bl	8000910 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003044:	e00a      	b.n	800305c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003046:	f7fd fc63 	bl	8000910 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	f241 3288 	movw	r2, #5000	; 0x1388
 8003054:	4293      	cmp	r3, r2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e0ab      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305c:	4b57      	ldr	r3, [pc, #348]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0ee      	beq.n	8003046 <HAL_RCC_OscConfig+0x37e>
 8003068:	e014      	b.n	8003094 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306a:	f7fd fc51 	bl	8000910 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003070:	e00a      	b.n	8003088 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003072:	f7fd fc4d 	bl	8000910 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003080:	4293      	cmp	r3, r2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e095      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003088:	4b4c      	ldr	r3, [pc, #304]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1ee      	bne.n	8003072 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003094:	7dfb      	ldrb	r3, [r7, #23]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d105      	bne.n	80030a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800309a:	4b48      	ldr	r3, [pc, #288]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	4a47      	ldr	r2, [pc, #284]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 80030a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 8081 	beq.w	80031b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030b0:	4b42      	ldr	r3, [pc, #264]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 030c 	and.w	r3, r3, #12
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d061      	beq.n	8003180 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d146      	bne.n	8003152 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c4:	4b3f      	ldr	r3, [pc, #252]	; (80031c4 <HAL_RCC_OscConfig+0x4fc>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ca:	f7fd fc21 	bl	8000910 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d2:	f7fd fc1d 	bl	8000910 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e067      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e4:	4b35      	ldr	r3, [pc, #212]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f0      	bne.n	80030d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f8:	d108      	bne.n	800310c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030fa:	4b30      	ldr	r3, [pc, #192]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	492d      	ldr	r1, [pc, #180]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8003108:	4313      	orrs	r3, r2
 800310a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800310c:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a19      	ldr	r1, [r3, #32]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	430b      	orrs	r3, r1
 800311e:	4927      	ldr	r1, [pc, #156]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8003120:	4313      	orrs	r3, r2
 8003122:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003124:	4b27      	ldr	r3, [pc, #156]	; (80031c4 <HAL_RCC_OscConfig+0x4fc>)
 8003126:	2201      	movs	r2, #1
 8003128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312a:	f7fd fbf1 	bl	8000910 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003132:	f7fd fbed 	bl	8000910 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e037      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003144:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x46a>
 8003150:	e02f      	b.n	80031b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003152:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <HAL_RCC_OscConfig+0x4fc>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003158:	f7fd fbda 	bl	8000910 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003160:	f7fd fbd6 	bl	8000910 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e020      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003172:	4b12      	ldr	r3, [pc, #72]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x498>
 800317e:	e018      	b.n	80031b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e013      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <HAL_RCC_OscConfig+0x4f4>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	429a      	cmp	r2, r3
 800319e:	d106      	bne.n	80031ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d001      	beq.n	80031b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40007000 	.word	0x40007000
 80031c4:	42420060 	.word	0x42420060

080031c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0d0      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031dc:	4b6a      	ldr	r3, [pc, #424]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d910      	bls.n	800320c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	4b67      	ldr	r3, [pc, #412]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 0207 	bic.w	r2, r3, #7
 80031f2:	4965      	ldr	r1, [pc, #404]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fa:	4b63      	ldr	r3, [pc, #396]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0b8      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d020      	beq.n	800325a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003224:	4b59      	ldr	r3, [pc, #356]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	4a58      	ldr	r2, [pc, #352]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 800322a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800322e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0308 	and.w	r3, r3, #8
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800323c:	4b53      	ldr	r3, [pc, #332]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	4a52      	ldr	r2, [pc, #328]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003246:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003248:	4b50      	ldr	r3, [pc, #320]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	494d      	ldr	r1, [pc, #308]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003256:	4313      	orrs	r3, r2
 8003258:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d040      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d107      	bne.n	800327e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326e:	4b47      	ldr	r3, [pc, #284]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d115      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e07f      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d107      	bne.n	8003296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003286:	4b41      	ldr	r3, [pc, #260]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d109      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e073      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003296:	4b3d      	ldr	r3, [pc, #244]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e06b      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032a6:	4b39      	ldr	r3, [pc, #228]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f023 0203 	bic.w	r2, r3, #3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	4936      	ldr	r1, [pc, #216]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032b8:	f7fd fb2a 	bl	8000910 <HAL_GetTick>
 80032bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032be:	e00a      	b.n	80032d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c0:	f7fd fb26 	bl	8000910 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e053      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	4b2d      	ldr	r3, [pc, #180]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f003 020c 	and.w	r2, r3, #12
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d1eb      	bne.n	80032c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032e8:	4b27      	ldr	r3, [pc, #156]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d210      	bcs.n	8003318 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f6:	4b24      	ldr	r3, [pc, #144]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 0207 	bic.w	r2, r3, #7
 80032fe:	4922      	ldr	r1, [pc, #136]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	4313      	orrs	r3, r2
 8003304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003306:	4b20      	ldr	r3, [pc, #128]	; (8003388 <HAL_RCC_ClockConfig+0x1c0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d001      	beq.n	8003318 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e032      	b.n	800337e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003324:	4b19      	ldr	r3, [pc, #100]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	4916      	ldr	r1, [pc, #88]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003332:	4313      	orrs	r3, r2
 8003334:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d009      	beq.n	8003356 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003342:	4b12      	ldr	r3, [pc, #72]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	490e      	ldr	r1, [pc, #56]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	4313      	orrs	r3, r2
 8003354:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003356:	f000 f821 	bl	800339c <HAL_RCC_GetSysClockFreq>
 800335a:	4602      	mov	r2, r0
 800335c:	4b0b      	ldr	r3, [pc, #44]	; (800338c <HAL_RCC_ClockConfig+0x1c4>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	490a      	ldr	r1, [pc, #40]	; (8003390 <HAL_RCC_ClockConfig+0x1c8>)
 8003368:	5ccb      	ldrb	r3, [r1, r3]
 800336a:	fa22 f303 	lsr.w	r3, r2, r3
 800336e:	4a09      	ldr	r2, [pc, #36]	; (8003394 <HAL_RCC_ClockConfig+0x1cc>)
 8003370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003372:	4b09      	ldr	r3, [pc, #36]	; (8003398 <HAL_RCC_ClockConfig+0x1d0>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7fd fa88 	bl	800088c <HAL_InitTick>

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40022000 	.word	0x40022000
 800338c:	40021000 	.word	0x40021000
 8003390:	08009764 	.word	0x08009764
 8003394:	20000000 	.word	0x20000000
 8003398:	20000004 	.word	0x20000004

0800339c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800339c:	b490      	push	{r4, r7}
 800339e:	b08a      	sub	sp, #40	; 0x28
 80033a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033a2:	4b2a      	ldr	r3, [pc, #168]	; (800344c <HAL_RCC_GetSysClockFreq+0xb0>)
 80033a4:	1d3c      	adds	r4, r7, #4
 80033a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033ac:	f240 2301 	movw	r3, #513	; 0x201
 80033b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
 80033b6:	2300      	movs	r3, #0
 80033b8:	61bb      	str	r3, [r7, #24]
 80033ba:	2300      	movs	r3, #0
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033c6:	4b22      	ldr	r3, [pc, #136]	; (8003450 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d002      	beq.n	80033dc <HAL_RCC_GetSysClockFreq+0x40>
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_GetSysClockFreq+0x46>
 80033da:	e02d      	b.n	8003438 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033dc:	4b1d      	ldr	r3, [pc, #116]	; (8003454 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033de:	623b      	str	r3, [r7, #32]
      break;
 80033e0:	e02d      	b.n	800343e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	0c9b      	lsrs	r3, r3, #18
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033ee:	4413      	add	r3, r2
 80033f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d013      	beq.n	8003428 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003400:	4b13      	ldr	r3, [pc, #76]	; (8003450 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	0c5b      	lsrs	r3, r3, #17
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800340e:	4413      	add	r3, r2
 8003410:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003414:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	4a0e      	ldr	r2, [pc, #56]	; (8003454 <HAL_RCC_GetSysClockFreq+0xb8>)
 800341a:	fb02 f203 	mul.w	r2, r2, r3
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	fbb2 f3f3 	udiv	r3, r2, r3
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
 8003426:	e004      	b.n	8003432 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	4a0b      	ldr	r2, [pc, #44]	; (8003458 <HAL_RCC_GetSysClockFreq+0xbc>)
 800342c:	fb02 f303 	mul.w	r3, r2, r3
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	623b      	str	r3, [r7, #32]
      break;
 8003436:	e002      	b.n	800343e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003438:	4b06      	ldr	r3, [pc, #24]	; (8003454 <HAL_RCC_GetSysClockFreq+0xb8>)
 800343a:	623b      	str	r3, [r7, #32]
      break;
 800343c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800343e:	6a3b      	ldr	r3, [r7, #32]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3728      	adds	r7, #40	; 0x28
 8003444:	46bd      	mov	sp, r7
 8003446:	bc90      	pop	{r4, r7}
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	08009700 	.word	0x08009700
 8003450:	40021000 	.word	0x40021000
 8003454:	007a1200 	.word	0x007a1200
 8003458:	003d0900 	.word	0x003d0900

0800345c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003460:	4b02      	ldr	r3, [pc, #8]	; (800346c <HAL_RCC_GetHCLKFreq+0x10>)
 8003462:	681b      	ldr	r3, [r3, #0]
}
 8003464:	4618      	mov	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr
 800346c:	20000000 	.word	0x20000000

08003470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003474:	f7ff fff2 	bl	800345c <HAL_RCC_GetHCLKFreq>
 8003478:	4602      	mov	r2, r0
 800347a:	4b05      	ldr	r3, [pc, #20]	; (8003490 <HAL_RCC_GetPCLK1Freq+0x20>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	0a1b      	lsrs	r3, r3, #8
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	4903      	ldr	r1, [pc, #12]	; (8003494 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003486:	5ccb      	ldrb	r3, [r1, r3]
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800348c:	4618      	mov	r0, r3
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40021000 	.word	0x40021000
 8003494:	08009774 	.word	0x08009774

08003498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800349c:	f7ff ffde 	bl	800345c <HAL_RCC_GetHCLKFreq>
 80034a0:	4602      	mov	r2, r0
 80034a2:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	0adb      	lsrs	r3, r3, #11
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	4903      	ldr	r1, [pc, #12]	; (80034bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ae:	5ccb      	ldrb	r3, [r1, r3]
 80034b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40021000 	.word	0x40021000
 80034bc:	08009774 	.word	0x08009774

080034c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034c8:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <RCC_Delay+0x34>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a0a      	ldr	r2, [pc, #40]	; (80034f8 <RCC_Delay+0x38>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	0a5b      	lsrs	r3, r3, #9
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034dc:	bf00      	nop
  }
  while (Delay --);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1e5a      	subs	r2, r3, #1
 80034e2:	60fa      	str	r2, [r7, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1f9      	bne.n	80034dc <RCC_Delay+0x1c>
}
 80034e8:	bf00      	nop
 80034ea:	bf00      	nop
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr
 80034f4:	20000000 	.word	0x20000000
 80034f8:	10624dd3 	.word	0x10624dd3

080034fc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	2300      	movs	r3, #0
 800350a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d07d      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003518:	2300      	movs	r3, #0
 800351a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800351c:	4b4f      	ldr	r3, [pc, #316]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10d      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003528:	4b4c      	ldr	r3, [pc, #304]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	4a4b      	ldr	r2, [pc, #300]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003532:	61d3      	str	r3, [r2, #28]
 8003534:	4b49      	ldr	r3, [pc, #292]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003540:	2301      	movs	r3, #1
 8003542:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003544:	4b46      	ldr	r3, [pc, #280]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354c:	2b00      	cmp	r3, #0
 800354e:	d118      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003550:	4b43      	ldr	r3, [pc, #268]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a42      	ldr	r2, [pc, #264]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800355a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800355c:	f7fd f9d8 	bl	8000910 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003562:	e008      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003564:	f7fd f9d4 	bl	8000910 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	; 0x64
 8003570:	d901      	bls.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e06d      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003576:	4b3a      	ldr	r3, [pc, #232]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003582:	4b36      	ldr	r3, [pc, #216]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800358a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d02e      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	429a      	cmp	r2, r3
 800359e:	d027      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035a0:	4b2e      	ldr	r3, [pc, #184]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035aa:	4b2e      	ldr	r3, [pc, #184]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035b0:	4b2c      	ldr	r3, [pc, #176]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035b6:	4a29      	ldr	r2, [pc, #164]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d014      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c6:	f7fd f9a3 	bl	8000910 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035cc:	e00a      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ce:	f7fd f99f 	bl	8000910 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035dc:	4293      	cmp	r3, r2
 80035de:	d901      	bls.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e036      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e4:	4b1d      	ldr	r3, [pc, #116]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0ee      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035f0:	4b1a      	ldr	r3, [pc, #104]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	4917      	ldr	r1, [pc, #92]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003602:	7dfb      	ldrb	r3, [r7, #23]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d105      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003608:	4b14      	ldr	r3, [pc, #80]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	4a13      	ldr	r2, [pc, #76]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800360e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003612:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003620:	4b0e      	ldr	r3, [pc, #56]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	490b      	ldr	r1, [pc, #44]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362e:	4313      	orrs	r3, r2
 8003630:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0310 	and.w	r3, r3, #16
 800363a:	2b00      	cmp	r3, #0
 800363c:	d008      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800363e:	4b07      	ldr	r3, [pc, #28]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	4904      	ldr	r1, [pc, #16]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364c:	4313      	orrs	r3, r2
 800364e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000
 8003660:	40007000 	.word	0x40007000
 8003664:	42420440 	.word	0x42420440

08003668 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003668:	b590      	push	{r4, r7, lr}
 800366a:	b08d      	sub	sp, #52	; 0x34
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003670:	4b5a      	ldr	r3, [pc, #360]	; (80037dc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003672:	f107 040c 	add.w	r4, r7, #12
 8003676:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003678:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800367c:	f240 2301 	movw	r3, #513	; 0x201
 8003680:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003682:	2300      	movs	r3, #0
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
 8003686:	2300      	movs	r3, #0
 8003688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800368a:	2300      	movs	r3, #0
 800368c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	61fb      	str	r3, [r7, #28]
 8003692:	2300      	movs	r3, #0
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b10      	cmp	r3, #16
 800369a:	d00a      	beq.n	80036b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b10      	cmp	r3, #16
 80036a0:	f200 8091 	bhi.w	80037c6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d04c      	beq.n	8003744 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d07c      	beq.n	80037aa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80036b0:	e089      	b.n	80037c6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80036b2:	4b4b      	ldr	r3, [pc, #300]	; (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80036b8:	4b49      	ldr	r3, [pc, #292]	; (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 8082 	beq.w	80037ca <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	0c9b      	lsrs	r3, r3, #18
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80036d2:	4413      	add	r3, r2
 80036d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80036d8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d018      	beq.n	8003716 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036e4:	4b3e      	ldr	r3, [pc, #248]	; (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	0c5b      	lsrs	r3, r3, #17
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80036f2:	4413      	add	r3, r2
 80036f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00d      	beq.n	8003720 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003704:	4a37      	ldr	r2, [pc, #220]	; (80037e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	fbb2 f2f3 	udiv	r2, r2, r3
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003714:	e004      	b.n	8003720 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	4a33      	ldr	r2, [pc, #204]	; (80037e8 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003720:	4b2f      	ldr	r3, [pc, #188]	; (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003728:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800372c:	d102      	bne.n	8003734 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800372e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003730:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003732:	e04a      	b.n	80037ca <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8003734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	4a2c      	ldr	r2, [pc, #176]	; (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800373a:	fba2 2303 	umull	r2, r3, r2, r3
 800373e:	085b      	lsrs	r3, r3, #1
 8003740:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003742:	e042      	b.n	80037ca <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8003744:	4b26      	ldr	r3, [pc, #152]	; (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003754:	d108      	bne.n	8003768 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8003760:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003764:	62bb      	str	r3, [r7, #40]	; 0x28
 8003766:	e01f      	b.n	80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800376e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003772:	d109      	bne.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003774:	4b1a      	ldr	r3, [pc, #104]	; (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8003780:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003784:	62bb      	str	r3, [r7, #40]	; 0x28
 8003786:	e00f      	b.n	80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800378e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003792:	d11c      	bne.n	80037ce <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003794:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d016      	beq.n	80037ce <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80037a0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80037a4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80037a6:	e012      	b.n	80037ce <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80037a8:	e011      	b.n	80037ce <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80037aa:	f7ff fe75 	bl	8003498 <HAL_RCC_GetPCLK2Freq>
 80037ae:	4602      	mov	r2, r0
 80037b0:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	0b9b      	lsrs	r3, r3, #14
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	3301      	adds	r3, #1
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80037c4:	e004      	b.n	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80037c6:	bf00      	nop
 80037c8:	e002      	b.n	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80037ca:	bf00      	nop
 80037cc:	e000      	b.n	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80037ce:	bf00      	nop
    }
  }
  return (frequency);
 80037d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3734      	adds	r7, #52	; 0x34
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd90      	pop	{r4, r7, pc}
 80037da:	bf00      	nop
 80037dc:	08009710 	.word	0x08009710
 80037e0:	40021000 	.word	0x40021000
 80037e4:	007a1200 	.word	0x007a1200
 80037e8:	003d0900 	.word	0x003d0900
 80037ec:	aaaaaaab 	.word	0xaaaaaaab

080037f0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e084      	b.n	8003910 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	7c5b      	ldrb	r3, [r3, #17]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d105      	bne.n	800381c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7fc ff0a 	bl	8000630 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f9c8 	bl	8003bb8 <HAL_RTC_WaitForSynchro>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d004      	beq.n	8003838 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2204      	movs	r2, #4
 8003832:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e06b      	b.n	8003910 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 fa81 	bl	8003d40 <RTC_EnterInitMode>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d004      	beq.n	800384e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2204      	movs	r2, #4
 8003848:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e060      	b.n	8003910 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0207 	bic.w	r2, r2, #7
 800385c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003866:	4b2c      	ldr	r3, [pc, #176]	; (8003918 <HAL_RTC_Init+0x128>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	4a2b      	ldr	r2, [pc, #172]	; (8003918 <HAL_RTC_Init+0x128>)
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003872:	4b29      	ldr	r3, [pc, #164]	; (8003918 <HAL_RTC_Init+0x128>)
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	4926      	ldr	r1, [pc, #152]	; (8003918 <HAL_RTC_Init+0x128>)
 8003880:	4313      	orrs	r3, r2
 8003882:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388c:	d003      	beq.n	8003896 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	e00e      	b.n	80038b4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003896:	2001      	movs	r0, #1
 8003898:	f7ff fee6 	bl	8003668 <HAL_RCCEx_GetPeriphCLKFreq>
 800389c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d104      	bne.n	80038ae <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2204      	movs	r2, #4
 80038a8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e030      	b.n	8003910 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	3b01      	subs	r3, #1
 80038b2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f023 010f 	bic.w	r1, r3, #15
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	0c1a      	lsrs	r2, r3, #16
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	0c1b      	lsrs	r3, r3, #16
 80038d2:	041b      	lsls	r3, r3, #16
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	b291      	uxth	r1, r2
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6812      	ldr	r2, [r2, #0]
 80038dc:	430b      	orrs	r3, r1
 80038de:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 fa55 	bl	8003d90 <RTC_ExitInitMode>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d004      	beq.n	80038f6 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2204      	movs	r2, #4
 80038f0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e00c      	b.n	8003910 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800390e:	2300      	movs	r3, #0
  }
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40006c00 	.word	0x40006c00

0800391c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800391c:	b590      	push	{r4, r7, lr}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	2300      	movs	r3, #0
 800392e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <HAL_RTC_SetTime+0x20>
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e080      	b.n	8003a42 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	7c1b      	ldrb	r3, [r3, #16]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_RTC_SetTime+0x30>
 8003948:	2302      	movs	r3, #2
 800394a:	e07a      	b.n	8003a42 <HAL_RTC_SetTime+0x126>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2201      	movs	r2, #1
 8003950:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2202      	movs	r2, #2
 8003956:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d113      	bne.n	8003986 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003968:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	785b      	ldrb	r3, [r3, #1]
 8003970:	4619      	mov	r1, r3
 8003972:	460b      	mov	r3, r1
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	1a5b      	subs	r3, r3, r1
 8003978:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800397a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003980:	4413      	add	r3, r2
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	e01e      	b.n	80039c4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fa28 	bl	8003de0 <RTC_Bcd2ToByte>
 8003990:	4603      	mov	r3, r0
 8003992:	461a      	mov	r2, r3
 8003994:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003998:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	785b      	ldrb	r3, [r3, #1]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fa1d 	bl	8003de0 <RTC_Bcd2ToByte>
 80039a6:	4603      	mov	r3, r0
 80039a8:	461a      	mov	r2, r3
 80039aa:	4613      	mov	r3, r2
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	1a9b      	subs	r3, r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80039b2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	789b      	ldrb	r3, [r3, #2]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fa11 	bl	8003de0 <RTC_Bcd2ToByte>
 80039be:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80039c0:	4423      	add	r3, r4
 80039c2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80039c4:	6979      	ldr	r1, [r7, #20]
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f953 	bl	8003c72 <RTC_WriteTimeCounter>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d007      	beq.n	80039e2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2204      	movs	r2, #4
 80039d6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e02f      	b.n	8003a42 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0205 	bic.w	r2, r2, #5
 80039f0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 f964 	bl	8003cc0 <RTC_ReadAlarmCounter>
 80039f8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a00:	d018      	beq.n	8003a34 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d214      	bcs.n	8003a34 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003a10:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003a14:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003a16:	6939      	ldr	r1, [r7, #16]
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 f96a 	bl	8003cf2 <RTC_WriteAlarmCounter>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d007      	beq.n	8003a34 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2204      	movs	r2, #4
 8003a28:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e006      	b.n	8003a42 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003a40:	2300      	movs	r3, #0
  }
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	371c      	adds	r7, #28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd90      	pop	{r4, r7, pc}
	...

08003a4c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61fb      	str	r3, [r7, #28]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61bb      	str	r3, [r7, #24]
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <HAL_RTC_SetDate+0x24>
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e097      	b.n	8003ba4 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	7c1b      	ldrb	r3, [r3, #16]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_RTC_SetDate+0x34>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e091      	b.n	8003ba4 <HAL_RTC_SetDate+0x158>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2201      	movs	r2, #1
 8003a84:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10c      	bne.n	8003aac <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	78da      	ldrb	r2, [r3, #3]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	785a      	ldrb	r2, [r3, #1]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	789a      	ldrb	r2, [r3, #2]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	739a      	strb	r2, [r3, #14]
 8003aaa:	e01a      	b.n	8003ae2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	78db      	ldrb	r3, [r3, #3]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 f995 	bl	8003de0 <RTC_Bcd2ToByte>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	461a      	mov	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	785b      	ldrb	r3, [r3, #1]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 f98c 	bl	8003de0 <RTC_Bcd2ToByte>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	461a      	mov	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	789b      	ldrb	r3, [r3, #2]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 f983 	bl	8003de0 <RTC_Bcd2ToByte>
 8003ada:	4603      	mov	r3, r0
 8003adc:	461a      	mov	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	7bdb      	ldrb	r3, [r3, #15]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	7b59      	ldrb	r1, [r3, #13]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	7b9b      	ldrb	r3, [r3, #14]
 8003af0:	461a      	mov	r2, r3
 8003af2:	f000 f993 	bl	8003e1c <RTC_WeekDayNum>
 8003af6:	4603      	mov	r3, r0
 8003af8:	461a      	mov	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	7b1a      	ldrb	r2, [r3, #12]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 f883 	bl	8003c12 <RTC_ReadTimeCounter>
 8003b0c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	4a26      	ldr	r2, [pc, #152]	; (8003bac <HAL_RTC_SetDate+0x160>)
 8003b12:	fba2 2303 	umull	r2, r3, r2, r3
 8003b16:	0adb      	lsrs	r3, r3, #11
 8003b18:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2b18      	cmp	r3, #24
 8003b1e:	d93a      	bls.n	8003b96 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	4a23      	ldr	r2, [pc, #140]	; (8003bb0 <HAL_RTC_SetDate+0x164>)
 8003b24:	fba2 2303 	umull	r2, r3, r2, r3
 8003b28:	091b      	lsrs	r3, r3, #4
 8003b2a:	4a22      	ldr	r2, [pc, #136]	; (8003bb4 <HAL_RTC_SetDate+0x168>)
 8003b2c:	fb02 f303 	mul.w	r3, r2, r3
 8003b30:	69fa      	ldr	r2, [r7, #28]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003b36:	69f9      	ldr	r1, [r7, #28]
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 f89a 	bl	8003c72 <RTC_WriteTimeCounter>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d007      	beq.n	8003b54 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2204      	movs	r2, #4
 8003b48:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e027      	b.n	8003ba4 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 f8b3 	bl	8003cc0 <RTC_ReadAlarmCounter>
 8003b5a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b62:	d018      	beq.n	8003b96 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d214      	bcs.n	8003b96 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003b72:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003b76:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003b78:	69b9      	ldr	r1, [r7, #24]
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 f8b9 	bl	8003cf2 <RTC_WriteAlarmCounter>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d007      	beq.n	8003b96 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2204      	movs	r2, #4
 8003b8a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e006      	b.n	8003ba4 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3720      	adds	r7, #32
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	91a2b3c5 	.word	0x91a2b3c5
 8003bb0:	aaaaaaab 	.word	0xaaaaaaab
 8003bb4:	00015180 	.word	0x00015180

08003bb8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e01d      	b.n	8003c0a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0208 	bic.w	r2, r2, #8
 8003bdc:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003bde:	f7fc fe97 	bl	8000910 <HAL_GetTick>
 8003be2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003be4:	e009      	b.n	8003bfa <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003be6:	f7fc fe93 	bl	8000910 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bf4:	d901      	bls.n	8003bfa <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e007      	b.n	8003c0a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0ee      	beq.n	8003be6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b087      	sub	sp, #28
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	827b      	strh	r3, [r7, #18]
 8003c1e:	2300      	movs	r3, #0
 8003c20:	823b      	strh	r3, [r7, #16]
 8003c22:	2300      	movs	r3, #0
 8003c24:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003c42:	8a7a      	ldrh	r2, [r7, #18]
 8003c44:	8a3b      	ldrh	r3, [r7, #16]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d008      	beq.n	8003c5c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003c4a:	8a3b      	ldrh	r3, [r7, #16]
 8003c4c:	041a      	lsls	r2, r3, #16
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	e004      	b.n	8003c66 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003c5c:	8a7b      	ldrh	r3, [r7, #18]
 8003c5e:	041a      	lsls	r2, r3, #16
 8003c60:	89fb      	ldrh	r3, [r7, #14]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003c66:	697b      	ldr	r3, [r7, #20]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	371c      	adds	r7, #28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr

08003c72 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f85d 	bl	8003d40 <RTC_EnterInitMode>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
 8003c90:	e011      	b.n	8003cb6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	0c12      	lsrs	r2, r2, #16
 8003c9a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	b292      	uxth	r2, r2
 8003ca4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f872 	bl	8003d90 <RTC_ExitInitMode>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	81fb      	strh	r3, [r7, #14]
 8003ccc:	2300      	movs	r3, #0
 8003cce:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003ce0:	89fb      	ldrh	r3, [r7, #14]
 8003ce2:	041a      	lsls	r2, r3, #16
 8003ce4:	89bb      	ldrh	r3, [r7, #12]
 8003ce6:	4313      	orrs	r3, r2
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr

08003cf2 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f81d 	bl	8003d40 <RTC_EnterInitMode>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	73fb      	strb	r3, [r7, #15]
 8003d10:	e011      	b.n	8003d36 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	0c12      	lsrs	r2, r2, #16
 8003d1a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	b292      	uxth	r2, r2
 8003d24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f832 	bl	8003d90 <RTC_ExitInitMode>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003d4c:	f7fc fde0 	bl	8000910 <HAL_GetTick>
 8003d50:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003d52:	e009      	b.n	8003d68 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003d54:	f7fc fddc 	bl	8000910 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d62:	d901      	bls.n	8003d68 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e00f      	b.n	8003d88 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 0320 	and.w	r3, r3, #32
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0ee      	beq.n	8003d54 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 0210 	orr.w	r2, r2, #16
 8003d84:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0210 	bic.w	r2, r2, #16
 8003daa:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003dac:	f7fc fdb0 	bl	8000910 <HAL_GetTick>
 8003db0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003db2:	e009      	b.n	8003dc8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003db4:	f7fc fdac 	bl	8000910 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dc2:	d901      	bls.n	8003dc8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e007      	b.n	8003dd8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0ee      	beq.n	8003db4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	091b      	lsrs	r3, r3, #4
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	461a      	mov	r2, r3
 8003df6:	4613      	mov	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003e00:	79fb      	ldrb	r3, [r7, #7]
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	4413      	add	r3, r2
 8003e0e:	b2db      	uxtb	r3, r3
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr
	...

08003e1c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	70fb      	strb	r3, [r7, #3]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60bb      	str	r3, [r7, #8]
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003e3a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003e3c:	78fb      	ldrb	r3, [r7, #3]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d82d      	bhi.n	8003e9e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003e42:	78fa      	ldrb	r2, [r7, #3]
 8003e44:	4613      	mov	r3, r2
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	4413      	add	r3, r2
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	1a9b      	subs	r3, r3, r2
 8003e4e:	4a2c      	ldr	r2, [pc, #176]	; (8003f00 <RTC_WeekDayNum+0xe4>)
 8003e50:	fba2 2303 	umull	r2, r3, r2, r3
 8003e54:	085a      	lsrs	r2, r3, #1
 8003e56:	78bb      	ldrb	r3, [r7, #2]
 8003e58:	441a      	add	r2, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	441a      	add	r2, r3
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	3b01      	subs	r3, #1
 8003e62:	089b      	lsrs	r3, r3, #2
 8003e64:	441a      	add	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	4926      	ldr	r1, [pc, #152]	; (8003f04 <RTC_WeekDayNum+0xe8>)
 8003e6c:	fba1 1303 	umull	r1, r3, r1, r3
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	1ad2      	subs	r2, r2, r3
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	4922      	ldr	r1, [pc, #136]	; (8003f04 <RTC_WeekDayNum+0xe8>)
 8003e7a:	fba1 1303 	umull	r1, r3, r1, r3
 8003e7e:	09db      	lsrs	r3, r3, #7
 8003e80:	4413      	add	r3, r2
 8003e82:	1d1a      	adds	r2, r3, #4
 8003e84:	4b20      	ldr	r3, [pc, #128]	; (8003f08 <RTC_WeekDayNum+0xec>)
 8003e86:	fba3 1302 	umull	r1, r3, r3, r2
 8003e8a:	1ad1      	subs	r1, r2, r3
 8003e8c:	0849      	lsrs	r1, r1, #1
 8003e8e:	440b      	add	r3, r1
 8003e90:	0899      	lsrs	r1, r3, #2
 8003e92:	460b      	mov	r3, r1
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	1a5b      	subs	r3, r3, r1
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	e029      	b.n	8003ef2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003e9e:	78fa      	ldrb	r2, [r7, #3]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	4413      	add	r3, r2
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	1a9b      	subs	r3, r3, r2
 8003eaa:	4a15      	ldr	r2, [pc, #84]	; (8003f00 <RTC_WeekDayNum+0xe4>)
 8003eac:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb0:	085a      	lsrs	r2, r3, #1
 8003eb2:	78bb      	ldrb	r3, [r7, #2]
 8003eb4:	441a      	add	r2, r3
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	441a      	add	r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	089b      	lsrs	r3, r3, #2
 8003ebe:	441a      	add	r2, r3
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	4910      	ldr	r1, [pc, #64]	; (8003f04 <RTC_WeekDayNum+0xe8>)
 8003ec4:	fba1 1303 	umull	r1, r3, r1, r3
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	1ad2      	subs	r2, r2, r3
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	490d      	ldr	r1, [pc, #52]	; (8003f04 <RTC_WeekDayNum+0xe8>)
 8003ed0:	fba1 1303 	umull	r1, r3, r1, r3
 8003ed4:	09db      	lsrs	r3, r3, #7
 8003ed6:	4413      	add	r3, r2
 8003ed8:	1c9a      	adds	r2, r3, #2
 8003eda:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <RTC_WeekDayNum+0xec>)
 8003edc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ee0:	1ad1      	subs	r1, r2, r3
 8003ee2:	0849      	lsrs	r1, r1, #1
 8003ee4:	440b      	add	r3, r1
 8003ee6:	0899      	lsrs	r1, r3, #2
 8003ee8:	460b      	mov	r3, r1
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	1a5b      	subs	r3, r3, r1
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	b2db      	uxtb	r3, r3
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr
 8003f00:	38e38e39 	.word	0x38e38e39
 8003f04:	51eb851f 	.word	0x51eb851f
 8003f08:	24924925 	.word	0x24924925

08003f0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e076      	b.n	800400c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d108      	bne.n	8003f38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f2e:	d009      	beq.n	8003f44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	61da      	str	r2, [r3, #28]
 8003f36:	e005      	b.n	8003f44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d106      	bne.n	8003f64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7fc fb8a 	bl	8000678 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc8:	ea42 0103 	orr.w	r1, r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	0c1a      	lsrs	r2, r3, #16
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f002 0204 	and.w	r2, r2, #4
 8003fea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	69da      	ldr	r2, [r3, #28]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ffa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e03f      	b.n	80040a6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d106      	bne.n	8004040 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7fc fb68 	bl	8000710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2224      	movs	r2, #36	; 0x24
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004056:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f829 	bl	80040b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800406c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695a      	ldr	r2, [r3, #20]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800407c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800408c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689a      	ldr	r2, [r3, #8]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80040ea:	f023 030c 	bic.w	r3, r3, #12
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6812      	ldr	r2, [r2, #0]
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	430b      	orrs	r3, r1
 80040f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699a      	ldr	r2, [r3, #24]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a2c      	ldr	r2, [pc, #176]	; (80041c4 <UART_SetConfig+0x114>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d103      	bne.n	8004120 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004118:	f7ff f9be 	bl	8003498 <HAL_RCC_GetPCLK2Freq>
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	e002      	b.n	8004126 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004120:	f7ff f9a6 	bl	8003470 <HAL_RCC_GetPCLK1Freq>
 8004124:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4613      	mov	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	009a      	lsls	r2, r3, #2
 8004130:	441a      	add	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	fbb2 f3f3 	udiv	r3, r2, r3
 800413c:	4a22      	ldr	r2, [pc, #136]	; (80041c8 <UART_SetConfig+0x118>)
 800413e:	fba2 2303 	umull	r2, r3, r2, r3
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	0119      	lsls	r1, r3, #4
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	4613      	mov	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	009a      	lsls	r2, r3, #2
 8004150:	441a      	add	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	fbb2 f2f3 	udiv	r2, r2, r3
 800415c:	4b1a      	ldr	r3, [pc, #104]	; (80041c8 <UART_SetConfig+0x118>)
 800415e:	fba3 0302 	umull	r0, r3, r3, r2
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	2064      	movs	r0, #100	; 0x64
 8004166:	fb00 f303 	mul.w	r3, r0, r3
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	3332      	adds	r3, #50	; 0x32
 8004170:	4a15      	ldr	r2, [pc, #84]	; (80041c8 <UART_SetConfig+0x118>)
 8004172:	fba2 2303 	umull	r2, r3, r2, r3
 8004176:	095b      	lsrs	r3, r3, #5
 8004178:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800417c:	4419      	add	r1, r3
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	009a      	lsls	r2, r3, #2
 8004188:	441a      	add	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	fbb2 f2f3 	udiv	r2, r2, r3
 8004194:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <UART_SetConfig+0x118>)
 8004196:	fba3 0302 	umull	r0, r3, r3, r2
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	2064      	movs	r0, #100	; 0x64
 800419e:	fb00 f303 	mul.w	r3, r0, r3
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	3332      	adds	r3, #50	; 0x32
 80041a8:	4a07      	ldr	r2, [pc, #28]	; (80041c8 <UART_SetConfig+0x118>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	f003 020f 	and.w	r2, r3, #15
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	440a      	add	r2, r1
 80041ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041bc:	bf00      	nop
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40013800 	.word	0x40013800
 80041c8:	51eb851f 	.word	0x51eb851f

080041cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80041cc:	b084      	sub	sp, #16
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	f107 0014 	add.w	r0, r7, #20
 80041da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bc80      	pop	{r7}
 80041e8:	b004      	add	sp, #16
 80041ea:	4770      	bx	lr

080041ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80041fc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004200:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	b29a      	uxth	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr

08004218 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004220:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004224:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800422c:	b29a      	uxth	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	b29b      	uxth	r3, r3
 8004232:	43db      	mvns	r3, r3
 8004234:	b29b      	uxth	r3, r3
 8004236:	4013      	ands	r3, r2
 8004238:	b29a      	uxth	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr

0800424c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	460b      	mov	r3, r1
 8004256:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr

08004264 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004264:	b084      	sub	sp, #16
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	f107 0014 	add.w	r0, r7, #20
 8004272:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	bc80      	pop	{r7}
 80042a0:	b004      	add	sp, #16
 80042a2:	4770      	bx	lr

080042a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef *USBx, uint32_t num)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr

080042ba <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef *USBx)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bc80      	pop	{r7}
 80042cc:	4770      	bx	lr
	...

080042d0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b09b      	sub	sp, #108	; 0x6c
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80042f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	78db      	ldrb	r3, [r3, #3]
 80042fe:	2b03      	cmp	r3, #3
 8004300:	d81f      	bhi.n	8004342 <USB_ActivateEndpoint+0x72>
 8004302:	a201      	add	r2, pc, #4	; (adr r2, 8004308 <USB_ActivateEndpoint+0x38>)
 8004304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004308:	08004319 	.word	0x08004319
 800430c:	08004335 	.word	0x08004335
 8004310:	0800434b 	.word	0x0800434b
 8004314:	08004327 	.word	0x08004327
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004318:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800431c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004320:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004324:	e012      	b.n	800434c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004326:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800432a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800432e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004332:	e00b      	b.n	800434c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004334:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004338:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800433c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004340:	e004      	b.n	800434c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004348:	e000      	b.n	800434c <USB_ActivateEndpoint+0x7c>
      break;
 800434a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	441a      	add	r2, r3
 8004356:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800435a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800435e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800436a:	b29b      	uxth	r3, r3
 800436c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	b29b      	uxth	r3, r3
 800437c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004384:	b29a      	uxth	r2, r3
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	b29b      	uxth	r3, r3
 800438c:	4313      	orrs	r3, r2
 800438e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	441a      	add	r2, r3
 800439c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80043a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	7b1b      	ldrb	r3, [r3, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f040 8149 	bne.w	8004650 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	785b      	ldrb	r3, [r3, #1]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 8084 	beq.w	80044d0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	461a      	mov	r2, r3
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	4413      	add	r3, r2
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	011a      	lsls	r2, r3, #4
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043ea:	613b      	str	r3, [r7, #16]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	88db      	ldrh	r3, [r3, #6]
 80043f0:	085b      	lsrs	r3, r3, #1
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	881b      	ldrh	r3, [r3, #0]
 8004408:	81fb      	strh	r3, [r7, #14]
 800440a:	89fb      	ldrh	r3, [r7, #14]
 800440c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004410:	2b00      	cmp	r3, #0
 8004412:	d01b      	beq.n	800444c <USB_ActivateEndpoint+0x17c>
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	b29b      	uxth	r3, r3
 8004422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442a:	81bb      	strh	r3, [r7, #12]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	441a      	add	r2, r3
 8004436:	89bb      	ldrh	r3, [r7, #12]
 8004438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800443c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004444:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004448:	b29b      	uxth	r3, r3
 800444a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	78db      	ldrb	r3, [r3, #3]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d020      	beq.n	8004496 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	b29b      	uxth	r3, r3
 8004462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800446a:	813b      	strh	r3, [r7, #8]
 800446c:	893b      	ldrh	r3, [r7, #8]
 800446e:	f083 0320 	eor.w	r3, r3, #32
 8004472:	813b      	strh	r3, [r7, #8]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	441a      	add	r2, r3
 800447e:	893b      	ldrh	r3, [r7, #8]
 8004480:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004484:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800448c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004490:	b29b      	uxth	r3, r3
 8004492:	8013      	strh	r3, [r2, #0]
 8004494:	e27f      	b.n	8004996 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ac:	817b      	strh	r3, [r7, #10]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	441a      	add	r2, r3
 80044b8:	897b      	ldrh	r3, [r7, #10]
 80044ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	8013      	strh	r3, [r2, #0]
 80044ce:	e262      	b.n	8004996 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044da:	b29b      	uxth	r3, r3
 80044dc:	461a      	mov	r2, r3
 80044de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e0:	4413      	add	r3, r2
 80044e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	011a      	lsls	r2, r3, #4
 80044ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80044f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	88db      	ldrh	r3, [r3, #6]
 80044f8:	085b      	lsrs	r3, r3, #1
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	b29a      	uxth	r2, r3
 8004500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004502:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800450e:	b29b      	uxth	r3, r3
 8004510:	461a      	mov	r2, r3
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	4413      	add	r3, r2
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	011a      	lsls	r2, r3, #4
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	4413      	add	r3, r2
 8004522:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004526:	623b      	str	r3, [r7, #32]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d112      	bne.n	8004556 <USB_ActivateEndpoint+0x286>
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	b29b      	uxth	r3, r3
 8004536:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800453a:	b29a      	uxth	r2, r3
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	801a      	strh	r2, [r3, #0]
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	b29b      	uxth	r3, r3
 8004546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800454a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800454e:	b29a      	uxth	r2, r3
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	801a      	strh	r2, [r3, #0]
 8004554:	e02f      	b.n	80045b6 <USB_ActivateEndpoint+0x2e6>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	2b3e      	cmp	r3, #62	; 0x3e
 800455c:	d813      	bhi.n	8004586 <USB_ActivateEndpoint+0x2b6>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	085b      	lsrs	r3, r3, #1
 8004564:	663b      	str	r3, [r7, #96]	; 0x60
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <USB_ActivateEndpoint+0x2a8>
 8004572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004574:	3301      	adds	r3, #1
 8004576:	663b      	str	r3, [r7, #96]	; 0x60
 8004578:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800457a:	b29b      	uxth	r3, r3
 800457c:	029b      	lsls	r3, r3, #10
 800457e:	b29a      	uxth	r2, r3
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	801a      	strh	r2, [r3, #0]
 8004584:	e017      	b.n	80045b6 <USB_ActivateEndpoint+0x2e6>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	663b      	str	r3, [r7, #96]	; 0x60
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	f003 031f 	and.w	r3, r3, #31
 8004596:	2b00      	cmp	r3, #0
 8004598:	d102      	bne.n	80045a0 <USB_ActivateEndpoint+0x2d0>
 800459a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800459c:	3b01      	subs	r3, #1
 800459e:	663b      	str	r3, [r7, #96]	; 0x60
 80045a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	029b      	lsls	r3, r3, #10
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	881b      	ldrh	r3, [r3, #0]
 80045c2:	83fb      	strh	r3, [r7, #30]
 80045c4:	8bfb      	ldrh	r3, [r7, #30]
 80045c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d01b      	beq.n	8004606 <USB_ActivateEndpoint+0x336>
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e4:	83bb      	strh	r3, [r7, #28]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	441a      	add	r2, r3
 80045f0:	8bbb      	ldrh	r3, [r7, #28]
 80045f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004602:	b29b      	uxth	r3, r3
 8004604:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	b29b      	uxth	r3, r3
 8004614:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461c:	837b      	strh	r3, [r7, #26]
 800461e:	8b7b      	ldrh	r3, [r7, #26]
 8004620:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004624:	837b      	strh	r3, [r7, #26]
 8004626:	8b7b      	ldrh	r3, [r7, #26]
 8004628:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800462c:	837b      	strh	r3, [r7, #26]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	441a      	add	r2, r3
 8004638:	8b7b      	ldrh	r3, [r7, #26]
 800463a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800463e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800464a:	b29b      	uxth	r3, r3
 800464c:	8013      	strh	r3, [r2, #0]
 800464e:	e1a2      	b.n	8004996 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	b29b      	uxth	r3, r3
 800465e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004666:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	441a      	add	r2, r3
 8004674:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800467c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004680:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004688:	b29b      	uxth	r3, r3
 800468a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004696:	b29b      	uxth	r3, r3
 8004698:	461a      	mov	r2, r3
 800469a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800469c:	4413      	add	r3, r2
 800469e:	65bb      	str	r3, [r7, #88]	; 0x58
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	011a      	lsls	r2, r3, #4
 80046a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046ae:	657b      	str	r3, [r7, #84]	; 0x54
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	891b      	ldrh	r3, [r3, #8]
 80046b4:	085b      	lsrs	r3, r3, #1
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046be:	801a      	strh	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	653b      	str	r3, [r7, #80]	; 0x50
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	461a      	mov	r2, r3
 80046ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046d0:	4413      	add	r3, r2
 80046d2:	653b      	str	r3, [r7, #80]	; 0x50
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	011a      	lsls	r2, r3, #4
 80046da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80046e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	895b      	ldrh	r3, [r3, #10]
 80046e8:	085b      	lsrs	r3, r3, #1
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046f2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	785b      	ldrb	r3, [r3, #1]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f040 8091 	bne.w	8004820 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800470c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800470e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d01b      	beq.n	800474e <USB_ActivateEndpoint+0x47e>
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	b29b      	uxth	r3, r3
 8004724:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	441a      	add	r2, r3
 8004738:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800473a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800473e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004742:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800474a:	b29b      	uxth	r3, r3
 800474c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	873b      	strh	r3, [r7, #56]	; 0x38
 800475c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800475e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	d01b      	beq.n	800479e <USB_ActivateEndpoint+0x4ce>
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	b29b      	uxth	r3, r3
 8004774:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	441a      	add	r2, r3
 8004788:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800478a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800478e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004796:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800479a:	b29b      	uxth	r3, r3
 800479c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80047b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80047b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80047bc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80047be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80047c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80047c4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	441a      	add	r2, r3
 80047d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80047d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047fc:	867b      	strh	r3, [r7, #50]	; 0x32
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	441a      	add	r2, r3
 8004808:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800480a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800480e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800481a:	b29b      	uxth	r3, r3
 800481c:	8013      	strh	r3, [r2, #0]
 800481e:	e0ba      	b.n	8004996 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004830:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d01d      	beq.n	8004878 <USB_ActivateEndpoint+0x5a8>
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	b29b      	uxth	r3, r3
 800484a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800484e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004852:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	441a      	add	r2, r3
 8004860:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004864:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004868:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800486c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004874:	b29b      	uxth	r3, r3
 8004876:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004888:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800488c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004890:	2b00      	cmp	r3, #0
 8004892:	d01d      	beq.n	80048d0 <USB_ActivateEndpoint+0x600>
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	441a      	add	r2, r3
 80048b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80048bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	78db      	ldrb	r3, [r3, #3]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d024      	beq.n	8004922 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80048f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80048f6:	f083 0320 	eor.w	r3, r3, #32
 80048fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	441a      	add	r2, r3
 8004908:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800490c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004910:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800491c:	b29b      	uxth	r3, r3
 800491e:	8013      	strh	r3, [r2, #0]
 8004920:	e01d      	b.n	800495e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	b29b      	uxth	r3, r3
 8004930:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004938:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	441a      	add	r2, r3
 8004946:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800494a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800494e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800495a:	b29b      	uxth	r3, r3
 800495c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	b29b      	uxth	r3, r3
 800496c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004974:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	441a      	add	r2, r3
 8004980:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800498a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800498e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004992:	b29b      	uxth	r3, r3
 8004994:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004996:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800499a:	4618      	mov	r0, r3
 800499c:	376c      	adds	r7, #108	; 0x6c
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr

080049a4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b08d      	sub	sp, #52	; 0x34
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	7b1b      	ldrb	r3, [r3, #12]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f040 808e 	bne.w	8004ad4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	785b      	ldrb	r3, [r3, #1]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d044      	beq.n	8004a4a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	81bb      	strh	r3, [r7, #12]
 80049ce:	89bb      	ldrh	r3, [r7, #12]
 80049d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d01b      	beq.n	8004a10 <USB_DeactivateEndpoint+0x6c>
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ee:	817b      	strh	r3, [r7, #10]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	441a      	add	r2, r3
 80049fa:	897b      	ldrh	r3, [r7, #10]
 80049fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a26:	813b      	strh	r3, [r7, #8]
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	441a      	add	r2, r3
 8004a32:	893b      	ldrh	r3, [r7, #8]
 8004a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	8013      	strh	r3, [r2, #0]
 8004a48:	e192      	b.n	8004d70 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	827b      	strh	r3, [r7, #18]
 8004a58:	8a7b      	ldrh	r3, [r7, #18]
 8004a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d01b      	beq.n	8004a9a <USB_DeactivateEndpoint+0xf6>
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a78:	823b      	strh	r3, [r7, #16]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	441a      	add	r2, r3
 8004a84:	8a3b      	ldrh	r3, [r7, #16]
 8004a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab0:	81fb      	strh	r3, [r7, #14]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	441a      	add	r2, r3
 8004abc:	89fb      	ldrh	r3, [r7, #14]
 8004abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	8013      	strh	r3, [r2, #0]
 8004ad2:	e14d      	b.n	8004d70 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	785b      	ldrb	r3, [r3, #1]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f040 80a5 	bne.w	8004c28 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	843b      	strh	r3, [r7, #32]
 8004aec:	8c3b      	ldrh	r3, [r7, #32]
 8004aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d01b      	beq.n	8004b2e <USB_DeactivateEndpoint+0x18a>
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0c:	83fb      	strh	r3, [r7, #30]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	441a      	add	r2, r3
 8004b18:	8bfb      	ldrh	r3, [r7, #30]
 8004b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	83bb      	strh	r3, [r7, #28]
 8004b3c:	8bbb      	ldrh	r3, [r7, #28]
 8004b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d01b      	beq.n	8004b7e <USB_DeactivateEndpoint+0x1da>
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5c:	837b      	strh	r3, [r7, #26]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	441a      	add	r2, r3
 8004b68:	8b7b      	ldrh	r3, [r7, #26]
 8004b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b94:	833b      	strh	r3, [r7, #24]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	441a      	add	r2, r3
 8004ba0:	8b3b      	ldrh	r3, [r7, #24]
 8004ba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bcc:	82fb      	strh	r3, [r7, #22]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	441a      	add	r2, r3
 8004bd8:	8afb      	ldrh	r3, [r7, #22]
 8004bda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c04:	82bb      	strh	r3, [r7, #20]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	441a      	add	r2, r3
 8004c10:	8abb      	ldrh	r3, [r7, #20]
 8004c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	8013      	strh	r3, [r2, #0]
 8004c26:	e0a3      	b.n	8004d70 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01b      	beq.n	8004c78 <USB_DeactivateEndpoint+0x2d4>
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c56:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	441a      	add	r2, r3
 8004c62:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004c64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004c86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d01b      	beq.n	8004cc8 <USB_DeactivateEndpoint+0x324>
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca6:	853b      	strh	r3, [r7, #40]	; 0x28
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	441a      	add	r2, r3
 8004cb2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004cb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cde:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	441a      	add	r2, r3
 8004cea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004cec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d16:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	441a      	add	r2, r3
 8004d22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	441a      	add	r2, r3
 8004d5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3734      	adds	r7, #52	; 0x34
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bc80      	pop	{r7}
 8004d7a:	4770      	bx	lr

08004d7c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b0cc      	sub	sp, #304	; 0x130
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	1d3b      	adds	r3, r7, #4
 8004d84:	6018      	str	r0, [r3, #0]
 8004d86:	463b      	mov	r3, r7
 8004d88:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d8a:	463b      	mov	r3, r7
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	785b      	ldrb	r3, [r3, #1]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	f040 872e 	bne.w	8005bf2 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004d96:	463b      	mov	r3, r7
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699a      	ldr	r2, [r3, #24]
 8004d9c:	463b      	mov	r3, r7
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d905      	bls.n	8004db2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004da6:	463b      	mov	r3, r7
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004db0:	e004      	b.n	8004dbc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004db2:	463b      	mov	r3, r7
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004dbc:	463b      	mov	r3, r7
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	7b1b      	ldrb	r3, [r3, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d134      	bne.n	8004e30 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004dc6:	463b      	mov	r3, r7
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6959      	ldr	r1, [r3, #20]
 8004dcc:	463b      	mov	r3, r7
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	88da      	ldrh	r2, [r3, #6]
 8004dd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	1d38      	adds	r0, r7, #4
 8004dda:	6800      	ldr	r0, [r0, #0]
 8004ddc:	f001 fc03 	bl	80065e6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004de0:	f107 0310 	add.w	r3, r7, #16
 8004de4:	1d3a      	adds	r2, r7, #4
 8004de6:	6812      	ldr	r2, [r2, #0]
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	1d3b      	adds	r3, r7, #4
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	4619      	mov	r1, r3
 8004df6:	f107 0310 	add.w	r3, r7, #16
 8004dfa:	f107 0210 	add.w	r2, r7, #16
 8004dfe:	6812      	ldr	r2, [r2, #0]
 8004e00:	440a      	add	r2, r1
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	463b      	mov	r3, r7
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	011a      	lsls	r2, r3, #4
 8004e0c:	f107 0310 	add.w	r3, r7, #16
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4413      	add	r3, r2
 8004e14:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004e18:	f107 030c 	add.w	r3, r7, #12
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	f107 030c 	add.w	r3, r7, #12
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	801a      	strh	r2, [r3, #0]
 8004e2c:	f000 beac 	b.w	8005b88 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004e30:	463b      	mov	r3, r7
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	78db      	ldrb	r3, [r3, #3]
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	f040 838c 	bne.w	8005554 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004e3c:	463b      	mov	r3, r7
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6a1a      	ldr	r2, [r3, #32]
 8004e42:	463b      	mov	r3, r7
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	f240 8330 	bls.w	80054ae <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004e4e:	1d3b      	adds	r3, r7, #4
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	463b      	mov	r3, r7
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e68:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004e6c:	1d3b      	adds	r3, r7, #4
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	463b      	mov	r3, r7
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	441a      	add	r2, r3
 8004e7a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e86:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004e92:	463b      	mov	r3, r7
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6a1a      	ldr	r2, [r3, #32]
 8004e98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e9c:	1ad2      	subs	r2, r2, r3
 8004e9e:	463b      	mov	r3, r7
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ea4:	1d3b      	adds	r3, r7, #4
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	463b      	mov	r3, r7
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	881b      	ldrh	r3, [r3, #0]
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 819e 	beq.w	80051fc <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ec0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ec4:	1d3a      	adds	r2, r7, #4
 8004ec6:	6812      	ldr	r2, [r2, #0]
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	463b      	mov	r3, r7
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	785b      	ldrb	r3, [r3, #1]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d17a      	bne.n	8004fca <USB_EPStartXfer+0x24e>
 8004ed4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ed8:	1d3a      	adds	r2, r7, #4
 8004eda:	6812      	ldr	r2, [r2, #0]
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	1d3b      	adds	r3, r7, #4
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	4619      	mov	r1, r3
 8004eea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004eee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ef2:	6812      	ldr	r2, [r2, #0]
 8004ef4:	440a      	add	r2, r1
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	463b      	mov	r3, r7
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	011a      	lsls	r2, r3, #4
 8004f00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4413      	add	r3, r2
 8004f08:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d11a      	bne.n	8004f50 <USB_EPStartXfer+0x1d4>
 8004f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	801a      	strh	r2, [r3, #0]
 8004f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	801a      	strh	r2, [r3, #0]
 8004f4e:	e062      	b.n	8005016 <USB_EPStartXfer+0x29a>
 8004f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f54:	2b3e      	cmp	r3, #62	; 0x3e
 8004f56:	d819      	bhi.n	8004f8c <USB_EPStartXfer+0x210>
 8004f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f5c:	085b      	lsrs	r3, r3, #1
 8004f5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d004      	beq.n	8004f78 <USB_EPStartXfer+0x1fc>
 8004f6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f72:	3301      	adds	r3, #1
 8004f74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	029b      	lsls	r3, r3, #10
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	801a      	strh	r2, [r3, #0]
 8004f8a:	e044      	b.n	8005016 <USB_EPStartXfer+0x29a>
 8004f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f90:	095b      	lsrs	r3, r3, #5
 8004f92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f9a:	f003 031f 	and.w	r3, r3, #31
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d104      	bne.n	8004fac <USB_EPStartXfer+0x230>
 8004fa2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004fac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	029b      	lsls	r3, r3, #10
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	801a      	strh	r2, [r3, #0]
 8004fc8:	e025      	b.n	8005016 <USB_EPStartXfer+0x29a>
 8004fca:	463b      	mov	r3, r7
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	785b      	ldrb	r3, [r3, #1]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d120      	bne.n	8005016 <USB_EPStartXfer+0x29a>
 8004fd4:	1d3b      	adds	r3, r7, #4
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	4619      	mov	r1, r3
 8004fe0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004fe4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004fe8:	6812      	ldr	r2, [r2, #0]
 8004fea:	440a      	add	r2, r1
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	463b      	mov	r3, r7
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	011a      	lsls	r2, r3, #4
 8004ff6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005002:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800500c:	b29a      	uxth	r2, r3
 800500e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005016:	463b      	mov	r3, r7
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	895b      	ldrh	r3, [r3, #10]
 800501c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005020:	463b      	mov	r3, r7
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6959      	ldr	r1, [r3, #20]
 8005026:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800502a:	b29b      	uxth	r3, r3
 800502c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005030:	1d38      	adds	r0, r7, #4
 8005032:	6800      	ldr	r0, [r0, #0]
 8005034:	f001 fad7 	bl	80065e6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005038:	463b      	mov	r3, r7
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	695a      	ldr	r2, [r3, #20]
 800503e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005042:	441a      	add	r2, r3
 8005044:	463b      	mov	r3, r7
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800504a:	463b      	mov	r3, r7
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6a1a      	ldr	r2, [r3, #32]
 8005050:	463b      	mov	r3, r7
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	429a      	cmp	r2, r3
 8005058:	d909      	bls.n	800506e <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800505a:	463b      	mov	r3, r7
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6a1a      	ldr	r2, [r3, #32]
 8005060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005064:	1ad2      	subs	r2, r2, r3
 8005066:	463b      	mov	r3, r7
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	621a      	str	r2, [r3, #32]
 800506c:	e008      	b.n	8005080 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800506e:	463b      	mov	r3, r7
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005078:	463b      	mov	r3, r7
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2200      	movs	r2, #0
 800507e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005080:	463b      	mov	r3, r7
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	785b      	ldrb	r3, [r3, #1]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d17a      	bne.n	8005180 <USB_EPStartXfer+0x404>
 800508a:	f107 0318 	add.w	r3, r7, #24
 800508e:	1d3a      	adds	r2, r7, #4
 8005090:	6812      	ldr	r2, [r2, #0]
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	1d3b      	adds	r3, r7, #4
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800509c:	b29b      	uxth	r3, r3
 800509e:	4619      	mov	r1, r3
 80050a0:	f107 0318 	add.w	r3, r7, #24
 80050a4:	f107 0218 	add.w	r2, r7, #24
 80050a8:	6812      	ldr	r2, [r2, #0]
 80050aa:	440a      	add	r2, r1
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	463b      	mov	r3, r7
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	011a      	lsls	r2, r3, #4
 80050b6:	f107 0318 	add.w	r3, r7, #24
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4413      	add	r3, r2
 80050be:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80050c2:	f107 0314 	add.w	r3, r7, #20
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d11a      	bne.n	8005106 <USB_EPStartXfer+0x38a>
 80050d0:	f107 0314 	add.w	r3, r7, #20
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050de:	b29a      	uxth	r2, r3
 80050e0:	f107 0314 	add.w	r3, r7, #20
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	801a      	strh	r2, [r3, #0]
 80050e8:	f107 0314 	add.w	r3, r7, #20
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	f107 0314 	add.w	r3, r7, #20
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	801a      	strh	r2, [r3, #0]
 8005104:	e067      	b.n	80051d6 <USB_EPStartXfer+0x45a>
 8005106:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800510a:	2b3e      	cmp	r3, #62	; 0x3e
 800510c:	d819      	bhi.n	8005142 <USB_EPStartXfer+0x3c6>
 800510e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005112:	085b      	lsrs	r3, r3, #1
 8005114:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005118:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b00      	cmp	r3, #0
 8005122:	d004      	beq.n	800512e <USB_EPStartXfer+0x3b2>
 8005124:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005128:	3301      	adds	r3, #1
 800512a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800512e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005132:	b29b      	uxth	r3, r3
 8005134:	029b      	lsls	r3, r3, #10
 8005136:	b29a      	uxth	r2, r3
 8005138:	f107 0314 	add.w	r3, r7, #20
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	801a      	strh	r2, [r3, #0]
 8005140:	e049      	b.n	80051d6 <USB_EPStartXfer+0x45a>
 8005142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005146:	095b      	lsrs	r3, r3, #5
 8005148:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800514c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005150:	f003 031f 	and.w	r3, r3, #31
 8005154:	2b00      	cmp	r3, #0
 8005156:	d104      	bne.n	8005162 <USB_EPStartXfer+0x3e6>
 8005158:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800515c:	3b01      	subs	r3, #1
 800515e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005162:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005166:	b29b      	uxth	r3, r3
 8005168:	029b      	lsls	r3, r3, #10
 800516a:	b29b      	uxth	r3, r3
 800516c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005174:	b29a      	uxth	r2, r3
 8005176:	f107 0314 	add.w	r3, r7, #20
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	801a      	strh	r2, [r3, #0]
 800517e:	e02a      	b.n	80051d6 <USB_EPStartXfer+0x45a>
 8005180:	463b      	mov	r3, r7
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	785b      	ldrb	r3, [r3, #1]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d125      	bne.n	80051d6 <USB_EPStartXfer+0x45a>
 800518a:	f107 0320 	add.w	r3, r7, #32
 800518e:	1d3a      	adds	r2, r7, #4
 8005190:	6812      	ldr	r2, [r2, #0]
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	1d3b      	adds	r3, r7, #4
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800519c:	b29b      	uxth	r3, r3
 800519e:	4619      	mov	r1, r3
 80051a0:	f107 0320 	add.w	r3, r7, #32
 80051a4:	f107 0220 	add.w	r2, r7, #32
 80051a8:	6812      	ldr	r2, [r2, #0]
 80051aa:	440a      	add	r2, r1
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	463b      	mov	r3, r7
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	011a      	lsls	r2, r3, #4
 80051b6:	f107 0320 	add.w	r3, r7, #32
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4413      	add	r3, r2
 80051be:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80051c2:	f107 031c 	add.w	r3, r7, #28
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	f107 031c 	add.w	r3, r7, #28
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80051d6:	463b      	mov	r3, r7
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	891b      	ldrh	r3, [r3, #8]
 80051dc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051e0:	463b      	mov	r3, r7
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6959      	ldr	r1, [r3, #20]
 80051e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80051f0:	1d38      	adds	r0, r7, #4
 80051f2:	6800      	ldr	r0, [r0, #0]
 80051f4:	f001 f9f7 	bl	80065e6 <USB_WritePMA>
 80051f8:	f000 bcc6 	b.w	8005b88 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051fc:	463b      	mov	r3, r7
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	785b      	ldrb	r3, [r3, #1]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d164      	bne.n	80052d0 <USB_EPStartXfer+0x554>
 8005206:	1d3b      	adds	r3, r7, #4
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	64bb      	str	r3, [r7, #72]	; 0x48
 800520c:	1d3b      	adds	r3, r7, #4
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005214:	b29b      	uxth	r3, r3
 8005216:	461a      	mov	r2, r3
 8005218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800521a:	4413      	add	r3, r2
 800521c:	64bb      	str	r3, [r7, #72]	; 0x48
 800521e:	463b      	mov	r3, r7
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	011a      	lsls	r2, r3, #4
 8005226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005228:	4413      	add	r3, r2
 800522a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800522e:	647b      	str	r3, [r7, #68]	; 0x44
 8005230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005234:	2b00      	cmp	r3, #0
 8005236:	d112      	bne.n	800525e <USB_EPStartXfer+0x4e2>
 8005238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	b29b      	uxth	r3, r3
 800523e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005242:	b29a      	uxth	r2, r3
 8005244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005246:	801a      	strh	r2, [r3, #0]
 8005248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	b29b      	uxth	r3, r3
 800524e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005252:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005256:	b29a      	uxth	r2, r3
 8005258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800525a:	801a      	strh	r2, [r3, #0]
 800525c:	e057      	b.n	800530e <USB_EPStartXfer+0x592>
 800525e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005262:	2b3e      	cmp	r3, #62	; 0x3e
 8005264:	d817      	bhi.n	8005296 <USB_EPStartXfer+0x51a>
 8005266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800526a:	085b      	lsrs	r3, r3, #1
 800526c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005270:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b00      	cmp	r3, #0
 800527a:	d004      	beq.n	8005286 <USB_EPStartXfer+0x50a>
 800527c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005280:	3301      	adds	r3, #1
 8005282:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005286:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800528a:	b29b      	uxth	r3, r3
 800528c:	029b      	lsls	r3, r3, #10
 800528e:	b29a      	uxth	r2, r3
 8005290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005292:	801a      	strh	r2, [r3, #0]
 8005294:	e03b      	b.n	800530e <USB_EPStartXfer+0x592>
 8005296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800529a:	095b      	lsrs	r3, r3, #5
 800529c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80052a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a4:	f003 031f 	and.w	r3, r3, #31
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d104      	bne.n	80052b6 <USB_EPStartXfer+0x53a>
 80052ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80052b0:	3b01      	subs	r3, #1
 80052b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80052b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	029b      	lsls	r3, r3, #10
 80052be:	b29b      	uxth	r3, r3
 80052c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052cc:	801a      	strh	r2, [r3, #0]
 80052ce:	e01e      	b.n	800530e <USB_EPStartXfer+0x592>
 80052d0:	463b      	mov	r3, r7
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	785b      	ldrb	r3, [r3, #1]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d119      	bne.n	800530e <USB_EPStartXfer+0x592>
 80052da:	1d3b      	adds	r3, r7, #4
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	653b      	str	r3, [r7, #80]	; 0x50
 80052e0:	1d3b      	adds	r3, r7, #4
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	461a      	mov	r2, r3
 80052ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052ee:	4413      	add	r3, r2
 80052f0:	653b      	str	r3, [r7, #80]	; 0x50
 80052f2:	463b      	mov	r3, r7
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	011a      	lsls	r2, r3, #4
 80052fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052fc:	4413      	add	r3, r2
 80052fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005302:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005308:	b29a      	uxth	r2, r3
 800530a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800530c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800530e:	463b      	mov	r3, r7
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	891b      	ldrh	r3, [r3, #8]
 8005314:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005318:	463b      	mov	r3, r7
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6959      	ldr	r1, [r3, #20]
 800531e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005322:	b29b      	uxth	r3, r3
 8005324:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005328:	1d38      	adds	r0, r7, #4
 800532a:	6800      	ldr	r0, [r0, #0]
 800532c:	f001 f95b 	bl	80065e6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005330:	463b      	mov	r3, r7
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	695a      	ldr	r2, [r3, #20]
 8005336:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800533a:	441a      	add	r2, r3
 800533c:	463b      	mov	r3, r7
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005342:	463b      	mov	r3, r7
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6a1a      	ldr	r2, [r3, #32]
 8005348:	463b      	mov	r3, r7
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	429a      	cmp	r2, r3
 8005350:	d909      	bls.n	8005366 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8005352:	463b      	mov	r3, r7
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6a1a      	ldr	r2, [r3, #32]
 8005358:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800535c:	1ad2      	subs	r2, r2, r3
 800535e:	463b      	mov	r3, r7
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	621a      	str	r2, [r3, #32]
 8005364:	e008      	b.n	8005378 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005366:	463b      	mov	r3, r7
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005370:	463b      	mov	r3, r7
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2200      	movs	r2, #0
 8005376:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005378:	1d3b      	adds	r3, r7, #4
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	643b      	str	r3, [r7, #64]	; 0x40
 800537e:	463b      	mov	r3, r7
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	785b      	ldrb	r3, [r3, #1]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d164      	bne.n	8005452 <USB_EPStartXfer+0x6d6>
 8005388:	1d3b      	adds	r3, r7, #4
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	63bb      	str	r3, [r7, #56]	; 0x38
 800538e:	1d3b      	adds	r3, r7, #4
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005396:	b29b      	uxth	r3, r3
 8005398:	461a      	mov	r2, r3
 800539a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539c:	4413      	add	r3, r2
 800539e:	63bb      	str	r3, [r7, #56]	; 0x38
 80053a0:	463b      	mov	r3, r7
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	011a      	lsls	r2, r3, #4
 80053a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053aa:	4413      	add	r3, r2
 80053ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053b0:	637b      	str	r3, [r7, #52]	; 0x34
 80053b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d112      	bne.n	80053e0 <USB_EPStartXfer+0x664>
 80053ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	b29b      	uxth	r3, r3
 80053c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c8:	801a      	strh	r2, [r3, #0]
 80053ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053d8:	b29a      	uxth	r2, r3
 80053da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053dc:	801a      	strh	r2, [r3, #0]
 80053de:	e054      	b.n	800548a <USB_EPStartXfer+0x70e>
 80053e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053e4:	2b3e      	cmp	r3, #62	; 0x3e
 80053e6:	d817      	bhi.n	8005418 <USB_EPStartXfer+0x69c>
 80053e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ec:	085b      	lsrs	r3, r3, #1
 80053ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80053f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d004      	beq.n	8005408 <USB_EPStartXfer+0x68c>
 80053fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005402:	3301      	adds	r3, #1
 8005404:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005408:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800540c:	b29b      	uxth	r3, r3
 800540e:	029b      	lsls	r3, r3, #10
 8005410:	b29a      	uxth	r2, r3
 8005412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005414:	801a      	strh	r2, [r3, #0]
 8005416:	e038      	b.n	800548a <USB_EPStartXfer+0x70e>
 8005418:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800541c:	095b      	lsrs	r3, r3, #5
 800541e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005422:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005426:	f003 031f 	and.w	r3, r3, #31
 800542a:	2b00      	cmp	r3, #0
 800542c:	d104      	bne.n	8005438 <USB_EPStartXfer+0x6bc>
 800542e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005432:	3b01      	subs	r3, #1
 8005434:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005438:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800543c:	b29b      	uxth	r3, r3
 800543e:	029b      	lsls	r3, r3, #10
 8005440:	b29b      	uxth	r3, r3
 8005442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800544a:	b29a      	uxth	r2, r3
 800544c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800544e:	801a      	strh	r2, [r3, #0]
 8005450:	e01b      	b.n	800548a <USB_EPStartXfer+0x70e>
 8005452:	463b      	mov	r3, r7
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	785b      	ldrb	r3, [r3, #1]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d116      	bne.n	800548a <USB_EPStartXfer+0x70e>
 800545c:	1d3b      	adds	r3, r7, #4
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005464:	b29b      	uxth	r3, r3
 8005466:	461a      	mov	r2, r3
 8005468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800546a:	4413      	add	r3, r2
 800546c:	643b      	str	r3, [r7, #64]	; 0x40
 800546e:	463b      	mov	r3, r7
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	011a      	lsls	r2, r3, #4
 8005476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005478:	4413      	add	r3, r2
 800547a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800547e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005484:	b29a      	uxth	r2, r3
 8005486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005488:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800548a:	463b      	mov	r3, r7
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	895b      	ldrh	r3, [r3, #10]
 8005490:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005494:	463b      	mov	r3, r7
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6959      	ldr	r1, [r3, #20]
 800549a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800549e:	b29b      	uxth	r3, r3
 80054a0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80054a4:	1d38      	adds	r0, r7, #4
 80054a6:	6800      	ldr	r0, [r0, #0]
 80054a8:	f001 f89d 	bl	80065e6 <USB_WritePMA>
 80054ac:	e36c      	b.n	8005b88 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80054ae:	463b      	mov	r3, r7
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80054b8:	1d3b      	adds	r3, r7, #4
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	463b      	mov	r3, r7
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80054ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80054d6:	1d3b      	adds	r3, r7, #4
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	463b      	mov	r3, r7
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	441a      	add	r2, r3
 80054e4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80054e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80054fc:	1d3b      	adds	r3, r7, #4
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005502:	1d3b      	adds	r3, r7, #4
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800550a:	b29b      	uxth	r3, r3
 800550c:	461a      	mov	r2, r3
 800550e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005510:	4413      	add	r3, r2
 8005512:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005514:	463b      	mov	r3, r7
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	011a      	lsls	r2, r3, #4
 800551c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800551e:	4413      	add	r3, r2
 8005520:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005524:	65bb      	str	r3, [r7, #88]	; 0x58
 8005526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800552a:	b29a      	uxth	r2, r3
 800552c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800552e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005530:	463b      	mov	r3, r7
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	891b      	ldrh	r3, [r3, #8]
 8005536:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800553a:	463b      	mov	r3, r7
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6959      	ldr	r1, [r3, #20]
 8005540:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005544:	b29b      	uxth	r3, r3
 8005546:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800554a:	1d38      	adds	r0, r7, #4
 800554c:	6800      	ldr	r0, [r0, #0]
 800554e:	f001 f84a 	bl	80065e6 <USB_WritePMA>
 8005552:	e319      	b.n	8005b88 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005554:	1d3b      	adds	r3, r7, #4
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	463b      	mov	r3, r7
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	b29b      	uxth	r3, r3
 8005566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005572:	1d3b      	adds	r3, r7, #4
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	463b      	mov	r3, r7
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	441a      	add	r2, r3
 8005580:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005584:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005588:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800558c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005594:	b29b      	uxth	r3, r3
 8005596:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005598:	463b      	mov	r3, r7
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6a1a      	ldr	r2, [r3, #32]
 800559e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055a2:	1ad2      	subs	r2, r2, r3
 80055a4:	463b      	mov	r3, r7
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80055aa:	1d3b      	adds	r3, r7, #4
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	463b      	mov	r3, r7
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 8162 	beq.w	800588a <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055c6:	1d3b      	adds	r3, r7, #4
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055ce:	463b      	mov	r3, r7
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	785b      	ldrb	r3, [r3, #1]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d164      	bne.n	80056a2 <USB_EPStartXfer+0x926>
 80055d8:	1d3b      	adds	r3, r7, #4
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80055de:	1d3b      	adds	r3, r7, #4
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	461a      	mov	r2, r3
 80055ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055ec:	4413      	add	r3, r2
 80055ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80055f0:	463b      	mov	r3, r7
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	011a      	lsls	r2, r3, #4
 80055f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055fa:	4413      	add	r3, r2
 80055fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005600:	677b      	str	r3, [r7, #116]	; 0x74
 8005602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005606:	2b00      	cmp	r3, #0
 8005608:	d112      	bne.n	8005630 <USB_EPStartXfer+0x8b4>
 800560a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	b29b      	uxth	r3, r3
 8005610:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005614:	b29a      	uxth	r2, r3
 8005616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005618:	801a      	strh	r2, [r3, #0]
 800561a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	b29b      	uxth	r3, r3
 8005620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005628:	b29a      	uxth	r2, r3
 800562a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800562c:	801a      	strh	r2, [r3, #0]
 800562e:	e057      	b.n	80056e0 <USB_EPStartXfer+0x964>
 8005630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005634:	2b3e      	cmp	r3, #62	; 0x3e
 8005636:	d817      	bhi.n	8005668 <USB_EPStartXfer+0x8ec>
 8005638:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800563c:	085b      	lsrs	r3, r3, #1
 800563e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005642:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d004      	beq.n	8005658 <USB_EPStartXfer+0x8dc>
 800564e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005652:	3301      	adds	r3, #1
 8005654:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005658:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800565c:	b29b      	uxth	r3, r3
 800565e:	029b      	lsls	r3, r3, #10
 8005660:	b29a      	uxth	r2, r3
 8005662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005664:	801a      	strh	r2, [r3, #0]
 8005666:	e03b      	b.n	80056e0 <USB_EPStartXfer+0x964>
 8005668:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800566c:	095b      	lsrs	r3, r3, #5
 800566e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005672:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005676:	f003 031f 	and.w	r3, r3, #31
 800567a:	2b00      	cmp	r3, #0
 800567c:	d104      	bne.n	8005688 <USB_EPStartXfer+0x90c>
 800567e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005682:	3b01      	subs	r3, #1
 8005684:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005688:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800568c:	b29b      	uxth	r3, r3
 800568e:	029b      	lsls	r3, r3, #10
 8005690:	b29b      	uxth	r3, r3
 8005692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800569a:	b29a      	uxth	r2, r3
 800569c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800569e:	801a      	strh	r2, [r3, #0]
 80056a0:	e01e      	b.n	80056e0 <USB_EPStartXfer+0x964>
 80056a2:	463b      	mov	r3, r7
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	785b      	ldrb	r3, [r3, #1]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d119      	bne.n	80056e0 <USB_EPStartXfer+0x964>
 80056ac:	1d3b      	adds	r3, r7, #4
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	461a      	mov	r2, r3
 80056b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80056bc:	4413      	add	r3, r2
 80056be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056c2:	463b      	mov	r3, r7
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	011a      	lsls	r2, r3, #4
 80056ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80056ce:	4413      	add	r3, r2
 80056d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056da:	b29a      	uxth	r2, r3
 80056dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80056e0:	463b      	mov	r3, r7
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	895b      	ldrh	r3, [r3, #10]
 80056e6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056ea:	463b      	mov	r3, r7
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6959      	ldr	r1, [r3, #20]
 80056f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80056fa:	1d38      	adds	r0, r7, #4
 80056fc:	6800      	ldr	r0, [r0, #0]
 80056fe:	f000 ff72 	bl	80065e6 <USB_WritePMA>
          ep->xfer_buff += len;
 8005702:	463b      	mov	r3, r7
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	695a      	ldr	r2, [r3, #20]
 8005708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800570c:	441a      	add	r2, r3
 800570e:	463b      	mov	r3, r7
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005714:	463b      	mov	r3, r7
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6a1a      	ldr	r2, [r3, #32]
 800571a:	463b      	mov	r3, r7
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	429a      	cmp	r2, r3
 8005722:	d909      	bls.n	8005738 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8005724:	463b      	mov	r3, r7
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6a1a      	ldr	r2, [r3, #32]
 800572a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800572e:	1ad2      	subs	r2, r2, r3
 8005730:	463b      	mov	r3, r7
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	621a      	str	r2, [r3, #32]
 8005736:	e008      	b.n	800574a <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005738:	463b      	mov	r3, r7
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005742:	463b      	mov	r3, r7
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2200      	movs	r2, #0
 8005748:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800574a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 821a 	beq.w	8005b88 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005754:	463b      	mov	r3, r7
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	785b      	ldrb	r3, [r3, #1]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d164      	bne.n	8005828 <USB_EPStartXfer+0xaac>
 800575e:	1d3b      	adds	r3, r7, #4
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	66bb      	str	r3, [r7, #104]	; 0x68
 8005764:	1d3b      	adds	r3, r7, #4
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800576c:	b29b      	uxth	r3, r3
 800576e:	461a      	mov	r2, r3
 8005770:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005772:	4413      	add	r3, r2
 8005774:	66bb      	str	r3, [r7, #104]	; 0x68
 8005776:	463b      	mov	r3, r7
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	011a      	lsls	r2, r3, #4
 800577e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005780:	4413      	add	r3, r2
 8005782:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005786:	667b      	str	r3, [r7, #100]	; 0x64
 8005788:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800578c:	2b00      	cmp	r3, #0
 800578e:	d112      	bne.n	80057b6 <USB_EPStartXfer+0xa3a>
 8005790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	b29b      	uxth	r3, r3
 8005796:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800579a:	b29a      	uxth	r2, r3
 800579c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800579e:	801a      	strh	r2, [r3, #0]
 80057a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057b2:	801a      	strh	r2, [r3, #0]
 80057b4:	e057      	b.n	8005866 <USB_EPStartXfer+0xaea>
 80057b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ba:	2b3e      	cmp	r3, #62	; 0x3e
 80057bc:	d817      	bhi.n	80057ee <USB_EPStartXfer+0xa72>
 80057be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057c2:	085b      	lsrs	r3, r3, #1
 80057c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80057c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d004      	beq.n	80057de <USB_EPStartXfer+0xa62>
 80057d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057d8:	3301      	adds	r3, #1
 80057da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80057de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	029b      	lsls	r3, r3, #10
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057ea:	801a      	strh	r2, [r3, #0]
 80057ec:	e03b      	b.n	8005866 <USB_EPStartXfer+0xaea>
 80057ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057f2:	095b      	lsrs	r3, r3, #5
 80057f4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80057f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057fc:	f003 031f 	and.w	r3, r3, #31
 8005800:	2b00      	cmp	r3, #0
 8005802:	d104      	bne.n	800580e <USB_EPStartXfer+0xa92>
 8005804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005808:	3b01      	subs	r3, #1
 800580a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800580e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005812:	b29b      	uxth	r3, r3
 8005814:	029b      	lsls	r3, r3, #10
 8005816:	b29b      	uxth	r3, r3
 8005818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800581c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005820:	b29a      	uxth	r2, r3
 8005822:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005824:	801a      	strh	r2, [r3, #0]
 8005826:	e01e      	b.n	8005866 <USB_EPStartXfer+0xaea>
 8005828:	463b      	mov	r3, r7
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	785b      	ldrb	r3, [r3, #1]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d119      	bne.n	8005866 <USB_EPStartXfer+0xaea>
 8005832:	1d3b      	adds	r3, r7, #4
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	673b      	str	r3, [r7, #112]	; 0x70
 8005838:	1d3b      	adds	r3, r7, #4
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005840:	b29b      	uxth	r3, r3
 8005842:	461a      	mov	r2, r3
 8005844:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005846:	4413      	add	r3, r2
 8005848:	673b      	str	r3, [r7, #112]	; 0x70
 800584a:	463b      	mov	r3, r7
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	011a      	lsls	r2, r3, #4
 8005852:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005854:	4413      	add	r3, r2
 8005856:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800585a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800585c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005860:	b29a      	uxth	r2, r3
 8005862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005864:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005866:	463b      	mov	r3, r7
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	891b      	ldrh	r3, [r3, #8]
 800586c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005870:	463b      	mov	r3, r7
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6959      	ldr	r1, [r3, #20]
 8005876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800587a:	b29b      	uxth	r3, r3
 800587c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005880:	1d38      	adds	r0, r7, #4
 8005882:	6800      	ldr	r0, [r0, #0]
 8005884:	f000 feaf 	bl	80065e6 <USB_WritePMA>
 8005888:	e17e      	b.n	8005b88 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800588a:	463b      	mov	r3, r7
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	785b      	ldrb	r3, [r3, #1]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d16f      	bne.n	8005974 <USB_EPStartXfer+0xbf8>
 8005894:	1d3b      	adds	r3, r7, #4
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800589c:	1d3b      	adds	r3, r7, #4
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	461a      	mov	r2, r3
 80058a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058ac:	4413      	add	r3, r2
 80058ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058b2:	463b      	mov	r3, r7
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	011a      	lsls	r2, r3, #4
 80058ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058be:	4413      	add	r3, r2
 80058c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d116      	bne.n	80058fe <USB_EPStartXfer+0xb82>
 80058d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058dc:	b29a      	uxth	r2, r3
 80058de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058e2:	801a      	strh	r2, [r3, #0]
 80058e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058fa:	801a      	strh	r2, [r3, #0]
 80058fc:	e05f      	b.n	80059be <USB_EPStartXfer+0xc42>
 80058fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005902:	2b3e      	cmp	r3, #62	; 0x3e
 8005904:	d818      	bhi.n	8005938 <USB_EPStartXfer+0xbbc>
 8005906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800590a:	085b      	lsrs	r3, r3, #1
 800590c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d004      	beq.n	8005926 <USB_EPStartXfer+0xbaa>
 800591c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005920:	3301      	adds	r3, #1
 8005922:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005926:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800592a:	b29b      	uxth	r3, r3
 800592c:	029b      	lsls	r3, r3, #10
 800592e:	b29a      	uxth	r2, r3
 8005930:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005934:	801a      	strh	r2, [r3, #0]
 8005936:	e042      	b.n	80059be <USB_EPStartXfer+0xc42>
 8005938:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800593c:	095b      	lsrs	r3, r3, #5
 800593e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005946:	f003 031f 	and.w	r3, r3, #31
 800594a:	2b00      	cmp	r3, #0
 800594c:	d104      	bne.n	8005958 <USB_EPStartXfer+0xbdc>
 800594e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005952:	3b01      	subs	r3, #1
 8005954:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005958:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800595c:	b29b      	uxth	r3, r3
 800595e:	029b      	lsls	r3, r3, #10
 8005960:	b29b      	uxth	r3, r3
 8005962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800596a:	b29a      	uxth	r2, r3
 800596c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005970:	801a      	strh	r2, [r3, #0]
 8005972:	e024      	b.n	80059be <USB_EPStartXfer+0xc42>
 8005974:	463b      	mov	r3, r7
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	785b      	ldrb	r3, [r3, #1]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d11f      	bne.n	80059be <USB_EPStartXfer+0xc42>
 800597e:	1d3b      	adds	r3, r7, #4
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005986:	1d3b      	adds	r3, r7, #4
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800598e:	b29b      	uxth	r3, r3
 8005990:	461a      	mov	r2, r3
 8005992:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005996:	4413      	add	r3, r2
 8005998:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800599c:	463b      	mov	r3, r7
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	011a      	lsls	r2, r3, #4
 80059a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80059a8:	4413      	add	r3, r2
 80059aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80059b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059bc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80059be:	463b      	mov	r3, r7
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	891b      	ldrh	r3, [r3, #8]
 80059c4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059c8:	463b      	mov	r3, r7
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6959      	ldr	r1, [r3, #20]
 80059ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80059d8:	1d38      	adds	r0, r7, #4
 80059da:	6800      	ldr	r0, [r0, #0]
 80059dc:	f000 fe03 	bl	80065e6 <USB_WritePMA>
          ep->xfer_buff += len;
 80059e0:	463b      	mov	r3, r7
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	695a      	ldr	r2, [r3, #20]
 80059e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ea:	441a      	add	r2, r3
 80059ec:	463b      	mov	r3, r7
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80059f2:	463b      	mov	r3, r7
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6a1a      	ldr	r2, [r3, #32]
 80059f8:	463b      	mov	r3, r7
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d909      	bls.n	8005a16 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8005a02:	463b      	mov	r3, r7
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6a1a      	ldr	r2, [r3, #32]
 8005a08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a0c:	1ad2      	subs	r2, r2, r3
 8005a0e:	463b      	mov	r3, r7
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	621a      	str	r2, [r3, #32]
 8005a14:	e008      	b.n	8005a28 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8005a16:	463b      	mov	r3, r7
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005a20:	463b      	mov	r3, r7
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2200      	movs	r2, #0
 8005a26:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005a28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 80ab 	beq.w	8005b88 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a32:	1d3b      	adds	r3, r7, #4
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a3a:	463b      	mov	r3, r7
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	785b      	ldrb	r3, [r3, #1]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d16f      	bne.n	8005b24 <USB_EPStartXfer+0xda8>
 8005a44:	1d3b      	adds	r3, r7, #4
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a4c:	1d3b      	adds	r3, r7, #4
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a62:	463b      	mov	r3, r7
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	011a      	lsls	r2, r3, #4
 8005a6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a6e:	4413      	add	r3, r2
 8005a70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d116      	bne.n	8005aae <USB_EPStartXfer+0xd32>
 8005a80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a92:	801a      	strh	r2, [r3, #0]
 8005a94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005aaa:	801a      	strh	r2, [r3, #0]
 8005aac:	e05b      	b.n	8005b66 <USB_EPStartXfer+0xdea>
 8005aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab2:	2b3e      	cmp	r3, #62	; 0x3e
 8005ab4:	d818      	bhi.n	8005ae8 <USB_EPStartXfer+0xd6c>
 8005ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aba:	085b      	lsrs	r3, r3, #1
 8005abc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d004      	beq.n	8005ad6 <USB_EPStartXfer+0xd5a>
 8005acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	029b      	lsls	r3, r3, #10
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ae4:	801a      	strh	r2, [r3, #0]
 8005ae6:	e03e      	b.n	8005b66 <USB_EPStartXfer+0xdea>
 8005ae8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aec:	095b      	lsrs	r3, r3, #5
 8005aee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af6:	f003 031f 	and.w	r3, r3, #31
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d104      	bne.n	8005b08 <USB_EPStartXfer+0xd8c>
 8005afe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b02:	3b01      	subs	r3, #1
 8005b04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	029b      	lsls	r3, r3, #10
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b20:	801a      	strh	r2, [r3, #0]
 8005b22:	e020      	b.n	8005b66 <USB_EPStartXfer+0xdea>
 8005b24:	463b      	mov	r3, r7
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	785b      	ldrb	r3, [r3, #1]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d11b      	bne.n	8005b66 <USB_EPStartXfer+0xdea>
 8005b2e:	1d3b      	adds	r3, r7, #4
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	461a      	mov	r2, r3
 8005b3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b3e:	4413      	add	r3, r2
 8005b40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b44:	463b      	mov	r3, r7
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	011a      	lsls	r2, r3, #4
 8005b4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b50:	4413      	add	r3, r2
 8005b52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005b5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b66:	463b      	mov	r3, r7
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	895b      	ldrh	r3, [r3, #10]
 8005b6c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b70:	463b      	mov	r3, r7
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6959      	ldr	r1, [r3, #20]
 8005b76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b80:	1d38      	adds	r0, r7, #4
 8005b82:	6800      	ldr	r0, [r0, #0]
 8005b84:	f000 fd2f 	bl	80065e6 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005b88:	1d3b      	adds	r3, r7, #4
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	463b      	mov	r3, r7
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	881b      	ldrh	r3, [r3, #0]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	f107 020a 	add.w	r2, r7, #10
 8005b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ba6:	8013      	strh	r3, [r2, #0]
 8005ba8:	f107 030a 	add.w	r3, r7, #10
 8005bac:	f107 020a 	add.w	r2, r7, #10
 8005bb0:	8812      	ldrh	r2, [r2, #0]
 8005bb2:	f082 0210 	eor.w	r2, r2, #16
 8005bb6:	801a      	strh	r2, [r3, #0]
 8005bb8:	f107 030a 	add.w	r3, r7, #10
 8005bbc:	f107 020a 	add.w	r2, r7, #10
 8005bc0:	8812      	ldrh	r2, [r2, #0]
 8005bc2:	f082 0220 	eor.w	r2, r2, #32
 8005bc6:	801a      	strh	r2, [r3, #0]
 8005bc8:	1d3b      	adds	r3, r7, #4
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	463b      	mov	r3, r7
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	441a      	add	r2, r3
 8005bd6:	f107 030a 	add.w	r3, r7, #10
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005be0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	8013      	strh	r3, [r2, #0]
 8005bf0:	e3b5      	b.n	800635e <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005bf2:	463b      	mov	r3, r7
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	7b1b      	ldrb	r3, [r3, #12]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f040 8090 	bne.w	8005d1e <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005bfe:	463b      	mov	r3, r7
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	699a      	ldr	r2, [r3, #24]
 8005c04:	463b      	mov	r3, r7
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d90e      	bls.n	8005c2c <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8005c0e:	463b      	mov	r3, r7
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005c18:	463b      	mov	r3, r7
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699a      	ldr	r2, [r3, #24]
 8005c1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c22:	1ad2      	subs	r2, r2, r3
 8005c24:	463b      	mov	r3, r7
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	619a      	str	r2, [r3, #24]
 8005c2a:	e008      	b.n	8005c3e <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8005c2c:	463b      	mov	r3, r7
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005c36:	463b      	mov	r3, r7
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005c3e:	1d3b      	adds	r3, r7, #4
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c46:	1d3b      	adds	r3, r7, #4
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	461a      	mov	r2, r3
 8005c52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005c56:	4413      	add	r3, r2
 8005c58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c5c:	463b      	mov	r3, r7
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	011a      	lsls	r2, r3, #4
 8005c64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005c68:	4413      	add	r3, r2
 8005c6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d116      	bne.n	8005ca8 <USB_EPStartXfer+0xf2c>
 8005c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c8c:	801a      	strh	r2, [r3, #0]
 8005c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ca4:	801a      	strh	r2, [r3, #0]
 8005ca6:	e32c      	b.n	8006302 <USB_EPStartXfer+0x1586>
 8005ca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cac:	2b3e      	cmp	r3, #62	; 0x3e
 8005cae:	d818      	bhi.n	8005ce2 <USB_EPStartXfer+0xf66>
 8005cb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cb4:	085b      	lsrs	r3, r3, #1
 8005cb6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d004      	beq.n	8005cd0 <USB_EPStartXfer+0xf54>
 8005cc6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cca:	3301      	adds	r3, #1
 8005ccc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005cd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	029b      	lsls	r3, r3, #10
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cde:	801a      	strh	r2, [r3, #0]
 8005ce0:	e30f      	b.n	8006302 <USB_EPStartXfer+0x1586>
 8005ce2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005cec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cf0:	f003 031f 	and.w	r3, r3, #31
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d104      	bne.n	8005d02 <USB_EPStartXfer+0xf86>
 8005cf8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005d02:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	029b      	lsls	r3, r3, #10
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d1a:	801a      	strh	r2, [r3, #0]
 8005d1c:	e2f1      	b.n	8006302 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005d1e:	463b      	mov	r3, r7
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	78db      	ldrb	r3, [r3, #3]
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	f040 818f 	bne.w	8006048 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005d2a:	463b      	mov	r3, r7
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	785b      	ldrb	r3, [r3, #1]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d175      	bne.n	8005e20 <USB_EPStartXfer+0x10a4>
 8005d34:	1d3b      	adds	r3, r7, #4
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d3c:	1d3b      	adds	r3, r7, #4
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	461a      	mov	r2, r3
 8005d48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d52:	463b      	mov	r3, r7
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	011a      	lsls	r2, r3, #4
 8005d5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d5e:	4413      	add	r3, r2
 8005d60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d68:	463b      	mov	r3, r7
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d116      	bne.n	8005da0 <USB_EPStartXfer+0x1024>
 8005d72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d84:	801a      	strh	r2, [r3, #0]
 8005d86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d9c:	801a      	strh	r2, [r3, #0]
 8005d9e:	e065      	b.n	8005e6c <USB_EPStartXfer+0x10f0>
 8005da0:	463b      	mov	r3, r7
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	2b3e      	cmp	r3, #62	; 0x3e
 8005da8:	d81a      	bhi.n	8005de0 <USB_EPStartXfer+0x1064>
 8005daa:	463b      	mov	r3, r7
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	085b      	lsrs	r3, r3, #1
 8005db2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005db6:	463b      	mov	r3, r7
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d004      	beq.n	8005dce <USB_EPStartXfer+0x1052>
 8005dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dc8:	3301      	adds	r3, #1
 8005dca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	029b      	lsls	r3, r3, #10
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ddc:	801a      	strh	r2, [r3, #0]
 8005dde:	e045      	b.n	8005e6c <USB_EPStartXfer+0x10f0>
 8005de0:	463b      	mov	r3, r7
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	095b      	lsrs	r3, r3, #5
 8005de8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005dec:	463b      	mov	r3, r7
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f003 031f 	and.w	r3, r3, #31
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d104      	bne.n	8005e04 <USB_EPStartXfer+0x1088>
 8005dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	029b      	lsls	r3, r3, #10
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e1c:	801a      	strh	r2, [r3, #0]
 8005e1e:	e025      	b.n	8005e6c <USB_EPStartXfer+0x10f0>
 8005e20:	463b      	mov	r3, r7
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	785b      	ldrb	r3, [r3, #1]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d120      	bne.n	8005e6c <USB_EPStartXfer+0x10f0>
 8005e2a:	1d3b      	adds	r3, r7, #4
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005e32:	1d3b      	adds	r3, r7, #4
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e42:	4413      	add	r3, r2
 8005e44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005e48:	463b      	mov	r3, r7
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	011a      	lsls	r2, r3, #4
 8005e50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e54:	4413      	add	r3, r2
 8005e56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e5e:	463b      	mov	r3, r7
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005e6a:	801a      	strh	r2, [r3, #0]
 8005e6c:	1d3b      	adds	r3, r7, #4
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e74:	463b      	mov	r3, r7
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	785b      	ldrb	r3, [r3, #1]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d175      	bne.n	8005f6a <USB_EPStartXfer+0x11ee>
 8005e7e:	1d3b      	adds	r3, r7, #4
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e86:	1d3b      	adds	r3, r7, #4
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	461a      	mov	r2, r3
 8005e92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e96:	4413      	add	r3, r2
 8005e98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e9c:	463b      	mov	r3, r7
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	011a      	lsls	r2, r3, #4
 8005ea4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005eae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005eb2:	463b      	mov	r3, r7
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d116      	bne.n	8005eea <USB_EPStartXfer+0x116e>
 8005ebc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ec0:	881b      	ldrh	r3, [r3, #0]
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ece:	801a      	strh	r2, [r3, #0]
 8005ed0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ee6:	801a      	strh	r2, [r3, #0]
 8005ee8:	e061      	b.n	8005fae <USB_EPStartXfer+0x1232>
 8005eea:	463b      	mov	r3, r7
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ef2:	d81a      	bhi.n	8005f2a <USB_EPStartXfer+0x11ae>
 8005ef4:	463b      	mov	r3, r7
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	085b      	lsrs	r3, r3, #1
 8005efc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f00:	463b      	mov	r3, r7
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d004      	beq.n	8005f18 <USB_EPStartXfer+0x119c>
 8005f0e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f12:	3301      	adds	r3, #1
 8005f14:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f18:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	029b      	lsls	r3, r3, #10
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f26:	801a      	strh	r2, [r3, #0]
 8005f28:	e041      	b.n	8005fae <USB_EPStartXfer+0x1232>
 8005f2a:	463b      	mov	r3, r7
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	095b      	lsrs	r3, r3, #5
 8005f32:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f36:	463b      	mov	r3, r7
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	f003 031f 	and.w	r3, r3, #31
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d104      	bne.n	8005f4e <USB_EPStartXfer+0x11d2>
 8005f44:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f4e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	029b      	lsls	r3, r3, #10
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f66:	801a      	strh	r2, [r3, #0]
 8005f68:	e021      	b.n	8005fae <USB_EPStartXfer+0x1232>
 8005f6a:	463b      	mov	r3, r7
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	785b      	ldrb	r3, [r3, #1]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d11c      	bne.n	8005fae <USB_EPStartXfer+0x1232>
 8005f74:	1d3b      	adds	r3, r7, #4
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	461a      	mov	r2, r3
 8005f80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f84:	4413      	add	r3, r2
 8005f86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f8a:	463b      	mov	r3, r7
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	011a      	lsls	r2, r3, #4
 8005f92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f96:	4413      	add	r3, r2
 8005f98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fa0:	463b      	mov	r3, r7
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fac:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005fae:	463b      	mov	r3, r7
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	69db      	ldr	r3, [r3, #28]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 81a4 	beq.w	8006302 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005fba:	1d3b      	adds	r3, r7, #4
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	463b      	mov	r3, r7
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005fce:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d005      	beq.n	8005fe6 <USB_EPStartXfer+0x126a>
 8005fda:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10d      	bne.n	8006002 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005fe6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f040 8187 	bne.w	8006302 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ff4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f040 8180 	bne.w	8006302 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006002:	1d3b      	adds	r3, r7, #4
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	463b      	mov	r3, r7
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	b29b      	uxth	r3, r3
 8006014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006020:	1d3b      	adds	r3, r7, #4
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	463b      	mov	r3, r7
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	441a      	add	r2, r3
 800602e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800603a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800603e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006042:	b29b      	uxth	r3, r3
 8006044:	8013      	strh	r3, [r2, #0]
 8006046:	e15c      	b.n	8006302 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006048:	463b      	mov	r3, r7
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	78db      	ldrb	r3, [r3, #3]
 800604e:	2b01      	cmp	r3, #1
 8006050:	f040 8155 	bne.w	80062fe <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006054:	463b      	mov	r3, r7
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699a      	ldr	r2, [r3, #24]
 800605a:	463b      	mov	r3, r7
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	429a      	cmp	r2, r3
 8006062:	d90e      	bls.n	8006082 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006064:	463b      	mov	r3, r7
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800606e:	463b      	mov	r3, r7
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	699a      	ldr	r2, [r3, #24]
 8006074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006078:	1ad2      	subs	r2, r2, r3
 800607a:	463b      	mov	r3, r7
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	619a      	str	r2, [r3, #24]
 8006080:	e008      	b.n	8006094 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8006082:	463b      	mov	r3, r7
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800608c:	463b      	mov	r3, r7
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2200      	movs	r2, #0
 8006092:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006094:	463b      	mov	r3, r7
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	785b      	ldrb	r3, [r3, #1]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d16f      	bne.n	800617e <USB_EPStartXfer+0x1402>
 800609e:	1d3b      	adds	r3, r7, #4
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80060a6:	1d3b      	adds	r3, r7, #4
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	461a      	mov	r2, r3
 80060b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80060b6:	4413      	add	r3, r2
 80060b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80060bc:	463b      	mov	r3, r7
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	011a      	lsls	r2, r3, #4
 80060c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80060c8:	4413      	add	r3, r2
 80060ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d116      	bne.n	8006108 <USB_EPStartXfer+0x138c>
 80060da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060ec:	801a      	strh	r2, [r3, #0]
 80060ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060fe:	b29a      	uxth	r2, r3
 8006100:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006104:	801a      	strh	r2, [r3, #0]
 8006106:	e05f      	b.n	80061c8 <USB_EPStartXfer+0x144c>
 8006108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800610c:	2b3e      	cmp	r3, #62	; 0x3e
 800610e:	d818      	bhi.n	8006142 <USB_EPStartXfer+0x13c6>
 8006110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006114:	085b      	lsrs	r3, r3, #1
 8006116:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800611a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d004      	beq.n	8006130 <USB_EPStartXfer+0x13b4>
 8006126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800612a:	3301      	adds	r3, #1
 800612c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006130:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006134:	b29b      	uxth	r3, r3
 8006136:	029b      	lsls	r3, r3, #10
 8006138:	b29a      	uxth	r2, r3
 800613a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800613e:	801a      	strh	r2, [r3, #0]
 8006140:	e042      	b.n	80061c8 <USB_EPStartXfer+0x144c>
 8006142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006146:	095b      	lsrs	r3, r3, #5
 8006148:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800614c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006150:	f003 031f 	and.w	r3, r3, #31
 8006154:	2b00      	cmp	r3, #0
 8006156:	d104      	bne.n	8006162 <USB_EPStartXfer+0x13e6>
 8006158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800615c:	3b01      	subs	r3, #1
 800615e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006166:	b29b      	uxth	r3, r3
 8006168:	029b      	lsls	r3, r3, #10
 800616a:	b29b      	uxth	r3, r3
 800616c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006174:	b29a      	uxth	r2, r3
 8006176:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800617a:	801a      	strh	r2, [r3, #0]
 800617c:	e024      	b.n	80061c8 <USB_EPStartXfer+0x144c>
 800617e:	463b      	mov	r3, r7
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	785b      	ldrb	r3, [r3, #1]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d11f      	bne.n	80061c8 <USB_EPStartXfer+0x144c>
 8006188:	1d3b      	adds	r3, r7, #4
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006190:	1d3b      	adds	r3, r7, #4
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006198:	b29b      	uxth	r3, r3
 800619a:	461a      	mov	r2, r3
 800619c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a0:	4413      	add	r3, r2
 80061a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80061a6:	463b      	mov	r3, r7
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	011a      	lsls	r2, r3, #4
 80061ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b2:	4413      	add	r3, r2
 80061b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80061bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80061c6:	801a      	strh	r2, [r3, #0]
 80061c8:	1d3b      	adds	r3, r7, #4
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061d0:	463b      	mov	r3, r7
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	785b      	ldrb	r3, [r3, #1]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d16f      	bne.n	80062ba <USB_EPStartXfer+0x153e>
 80061da:	1d3b      	adds	r3, r7, #4
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80061e2:	1d3b      	adds	r3, r7, #4
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	461a      	mov	r2, r3
 80061ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061f2:	4413      	add	r3, r2
 80061f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80061f8:	463b      	mov	r3, r7
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	011a      	lsls	r2, r3, #4
 8006200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006204:	4413      	add	r3, r2
 8006206:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800620a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800620e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006212:	2b00      	cmp	r3, #0
 8006214:	d116      	bne.n	8006244 <USB_EPStartXfer+0x14c8>
 8006216:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800621a:	881b      	ldrh	r3, [r3, #0]
 800621c:	b29b      	uxth	r3, r3
 800621e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006222:	b29a      	uxth	r2, r3
 8006224:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006228:	801a      	strh	r2, [r3, #0]
 800622a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	b29b      	uxth	r3, r3
 8006232:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800623a:	b29a      	uxth	r2, r3
 800623c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006240:	801a      	strh	r2, [r3, #0]
 8006242:	e05e      	b.n	8006302 <USB_EPStartXfer+0x1586>
 8006244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006248:	2b3e      	cmp	r3, #62	; 0x3e
 800624a:	d818      	bhi.n	800627e <USB_EPStartXfer+0x1502>
 800624c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006250:	085b      	lsrs	r3, r3, #1
 8006252:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d004      	beq.n	800626c <USB_EPStartXfer+0x14f0>
 8006262:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006266:	3301      	adds	r3, #1
 8006268:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800626c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006270:	b29b      	uxth	r3, r3
 8006272:	029b      	lsls	r3, r3, #10
 8006274:	b29a      	uxth	r2, r3
 8006276:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800627a:	801a      	strh	r2, [r3, #0]
 800627c:	e041      	b.n	8006302 <USB_EPStartXfer+0x1586>
 800627e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006282:	095b      	lsrs	r3, r3, #5
 8006284:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006288:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800628c:	f003 031f 	and.w	r3, r3, #31
 8006290:	2b00      	cmp	r3, #0
 8006292:	d104      	bne.n	800629e <USB_EPStartXfer+0x1522>
 8006294:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006298:	3b01      	subs	r3, #1
 800629a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800629e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	029b      	lsls	r3, r3, #10
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062b6:	801a      	strh	r2, [r3, #0]
 80062b8:	e023      	b.n	8006302 <USB_EPStartXfer+0x1586>
 80062ba:	463b      	mov	r3, r7
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	785b      	ldrb	r3, [r3, #1]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d11e      	bne.n	8006302 <USB_EPStartXfer+0x1586>
 80062c4:	1d3b      	adds	r3, r7, #4
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	461a      	mov	r2, r3
 80062d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062d4:	4413      	add	r3, r2
 80062d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80062da:	463b      	mov	r3, r7
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	011a      	lsls	r2, r3, #4
 80062e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e6:	4413      	add	r3, r2
 80062e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062fa:	801a      	strh	r2, [r3, #0]
 80062fc:	e001      	b.n	8006302 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e02e      	b.n	8006360 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006302:	1d3b      	adds	r3, r7, #4
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	463b      	mov	r3, r7
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	b29b      	uxth	r3, r3
 8006314:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006320:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006324:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006328:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800632c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006330:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006334:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006338:	1d3b      	adds	r3, r7, #4
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	463b      	mov	r3, r7
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	441a      	add	r2, r3
 8006346:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800634a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800634e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800635a:	b29b      	uxth	r3, r3
 800635c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800636a:	b480      	push	{r7}
 800636c:	b085      	sub	sp, #20
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	785b      	ldrb	r3, [r3, #1]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d020      	beq.n	80063be <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	b29b      	uxth	r3, r3
 800638a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800638e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006392:	81bb      	strh	r3, [r7, #12]
 8006394:	89bb      	ldrh	r3, [r7, #12]
 8006396:	f083 0310 	eor.w	r3, r3, #16
 800639a:	81bb      	strh	r3, [r7, #12]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	441a      	add	r2, r3
 80063a6:	89bb      	ldrh	r3, [r7, #12]
 80063a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	8013      	strh	r3, [r2, #0]
 80063bc:	e01f      	b.n	80063fe <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	881b      	ldrh	r3, [r3, #0]
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d4:	81fb      	strh	r3, [r7, #14]
 80063d6:	89fb      	ldrh	r3, [r7, #14]
 80063d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063dc:	81fb      	strh	r3, [r7, #14]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	441a      	add	r2, r3
 80063e8:	89fb      	ldrh	r3, [r7, #14]
 80063ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	bc80      	pop	{r7}
 8006408:	4770      	bx	lr

0800640a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800640a:	b480      	push	{r7}
 800640c:	b087      	sub	sp, #28
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	7b1b      	ldrb	r3, [r3, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	f040 809d 	bne.w	8006558 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	785b      	ldrb	r3, [r3, #1]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d04c      	beq.n	80064c0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	881b      	ldrh	r3, [r3, #0]
 8006432:	823b      	strh	r3, [r7, #16]
 8006434:	8a3b      	ldrh	r3, [r7, #16]
 8006436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643a:	2b00      	cmp	r3, #0
 800643c:	d01b      	beq.n	8006476 <USB_EPClearStall+0x6c>
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	b29b      	uxth	r3, r3
 800644c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006454:	81fb      	strh	r3, [r7, #14]
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	441a      	add	r2, r3
 8006460:	89fb      	ldrh	r3, [r7, #14]
 8006462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800646a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800646e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006472:	b29b      	uxth	r3, r3
 8006474:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	78db      	ldrb	r3, [r3, #3]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d06c      	beq.n	8006558 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	881b      	ldrh	r3, [r3, #0]
 800648a:	b29b      	uxth	r3, r3
 800648c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006494:	81bb      	strh	r3, [r7, #12]
 8006496:	89bb      	ldrh	r3, [r7, #12]
 8006498:	f083 0320 	eor.w	r3, r3, #32
 800649c:	81bb      	strh	r3, [r7, #12]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	441a      	add	r2, r3
 80064a8:	89bb      	ldrh	r3, [r7, #12]
 80064aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	8013      	strh	r3, [r2, #0]
 80064be:	e04b      	b.n	8006558 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	881b      	ldrh	r3, [r3, #0]
 80064cc:	82fb      	strh	r3, [r7, #22]
 80064ce:	8afb      	ldrh	r3, [r7, #22]
 80064d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d01b      	beq.n	8006510 <USB_EPClearStall+0x106>
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ee:	82bb      	strh	r3, [r7, #20]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	441a      	add	r2, r3
 80064fa:	8abb      	ldrh	r3, [r7, #20]
 80064fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006504:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800650c:	b29b      	uxth	r3, r3
 800650e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	b29b      	uxth	r3, r3
 800651e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006526:	827b      	strh	r3, [r7, #18]
 8006528:	8a7b      	ldrh	r3, [r7, #18]
 800652a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800652e:	827b      	strh	r3, [r7, #18]
 8006530:	8a7b      	ldrh	r3, [r7, #18]
 8006532:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006536:	827b      	strh	r3, [r7, #18]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	441a      	add	r2, r3
 8006542:	8a7b      	ldrh	r3, [r7, #18]
 8006544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800654c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006554:	b29b      	uxth	r3, r3
 8006556:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	371c      	adds	r7, #28
 800655e:	46bd      	mov	sp, r7
 8006560:	bc80      	pop	{r7}
 8006562:	4770      	bx	lr

08006564 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	460b      	mov	r3, r1
 800656e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006570:	78fb      	ldrb	r3, [r7, #3]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d103      	bne.n	800657e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2280      	movs	r2, #128	; 0x80
 800657a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	bc80      	pop	{r7}
 8006588:	4770      	bx	lr

0800658a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	bc80      	pop	{r7}
 800659c:	4770      	bx	lr

0800659e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bc80      	pop	{r7}
 80065b0:	4770      	bx	lr

080065b2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b085      	sub	sp, #20
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80065c4:	68fb      	ldr	r3, [r7, #12]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bc80      	pop	{r7}
 80065ce:	4770      	bx	lr

080065d0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bc80      	pop	{r7}
 80065e4:	4770      	bx	lr

080065e6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b08d      	sub	sp, #52	; 0x34
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	60f8      	str	r0, [r7, #12]
 80065ee:	60b9      	str	r1, [r7, #8]
 80065f0:	4611      	mov	r1, r2
 80065f2:	461a      	mov	r2, r3
 80065f4:	460b      	mov	r3, r1
 80065f6:	80fb      	strh	r3, [r7, #6]
 80065f8:	4613      	mov	r3, r2
 80065fa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80065fc:	88bb      	ldrh	r3, [r7, #4]
 80065fe:	3301      	adds	r3, #1
 8006600:	085b      	lsrs	r3, r3, #1
 8006602:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800660c:	88fb      	ldrh	r3, [r7, #6]
 800660e:	005a      	lsls	r2, r3, #1
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	4413      	add	r3, r2
 8006614:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006618:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800661a:	6a3b      	ldr	r3, [r7, #32]
 800661c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800661e:	e01e      	b.n	800665e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	3301      	adds	r3, #1
 800662a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	b29b      	uxth	r3, r3
 8006632:	021b      	lsls	r3, r3, #8
 8006634:	b29b      	uxth	r3, r3
 8006636:	461a      	mov	r2, r3
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	4313      	orrs	r3, r2
 800663c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	b29a      	uxth	r2, r3
 8006642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006644:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	3302      	adds	r3, #2
 800664a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800664c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664e:	3302      	adds	r3, #2
 8006650:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	3301      	adds	r3, #1
 8006656:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665a:	3b01      	subs	r3, #1
 800665c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800665e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1dd      	bne.n	8006620 <USB_WritePMA+0x3a>
  }
}
 8006664:	bf00      	nop
 8006666:	bf00      	nop
 8006668:	3734      	adds	r7, #52	; 0x34
 800666a:	46bd      	mov	sp, r7
 800666c:	bc80      	pop	{r7}
 800666e:	4770      	bx	lr

08006670 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006670:	b480      	push	{r7}
 8006672:	b08b      	sub	sp, #44	; 0x2c
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	4611      	mov	r1, r2
 800667c:	461a      	mov	r2, r3
 800667e:	460b      	mov	r3, r1
 8006680:	80fb      	strh	r3, [r7, #6]
 8006682:	4613      	mov	r3, r2
 8006684:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006686:	88bb      	ldrh	r3, [r7, #4]
 8006688:	085b      	lsrs	r3, r3, #1
 800668a:	b29b      	uxth	r3, r3
 800668c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006696:	88fb      	ldrh	r3, [r7, #6]
 8006698:	005a      	lsls	r2, r3, #1
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	4413      	add	r3, r2
 800669e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066a2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	627b      	str	r3, [r7, #36]	; 0x24
 80066a8:	e01b      	b.n	80066e2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	881b      	ldrh	r3, [r3, #0]
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80066b2:	6a3b      	ldr	r3, [r7, #32]
 80066b4:	3302      	adds	r3, #2
 80066b6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	3301      	adds	r3, #1
 80066c4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	0a1b      	lsrs	r3, r3, #8
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	3301      	adds	r3, #1
 80066d4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80066d6:	6a3b      	ldr	r3, [r7, #32]
 80066d8:	3302      	adds	r3, #2
 80066da:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	3b01      	subs	r3, #1
 80066e0:	627b      	str	r3, [r7, #36]	; 0x24
 80066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1e0      	bne.n	80066aa <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80066e8:	88bb      	ldrh	r3, [r7, #4]
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d007      	beq.n	8006704 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	701a      	strb	r2, [r3, #0]
  }
}
 8006704:	bf00      	nop
 8006706:	372c      	adds	r7, #44	; 0x2c
 8006708:	46bd      	mov	sp, r7
 800670a:	bc80      	pop	{r7}
 800670c:	4770      	bx	lr
	...

08006710 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006714:	4904      	ldr	r1, [pc, #16]	; (8006728 <MX_FATFS_Init+0x18>)
 8006716:	4805      	ldr	r0, [pc, #20]	; (800672c <MX_FATFS_Init+0x1c>)
 8006718:	f002 fb4e 	bl	8008db8 <FATFS_LinkDriver>
 800671c:	4603      	mov	r3, r0
 800671e:	461a      	mov	r2, r3
 8006720:	4b03      	ldr	r3, [pc, #12]	; (8006730 <MX_FATFS_Init+0x20>)
 8006722:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006724:	bf00      	nop
 8006726:	bd80      	pop	{r7, pc}
 8006728:	200004b4 	.word	0x200004b4
 800672c:	2000000c 	.word	0x2000000c
 8006730:	200004b8 	.word	0x200004b8

08006734 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	4603      	mov	r3, r0
 800673c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800673e:	4b05      	ldr	r3, [pc, #20]	; (8006754 <USER_initialize+0x20>)
 8006740:	2201      	movs	r2, #1
 8006742:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006744:	4b03      	ldr	r3, [pc, #12]	; (8006754 <USER_initialize+0x20>)
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800674a:	4618      	mov	r0, r3
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	bc80      	pop	{r7}
 8006752:	4770      	bx	lr
 8006754:	20000009 	.word	0x20000009

08006758 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	4603      	mov	r3, r0
 8006760:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8006762:	4b05      	ldr	r3, [pc, #20]	; (8006778 <USER_status+0x20>)
 8006764:	2201      	movs	r2, #1
 8006766:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006768:	4b03      	ldr	r3, [pc, #12]	; (8006778 <USER_status+0x20>)
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800676e:	4618      	mov	r0, r3
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	bc80      	pop	{r7}
 8006776:	4770      	bx	lr
 8006778:	20000009 	.word	0x20000009

0800677c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	60b9      	str	r1, [r7, #8]
 8006784:	607a      	str	r2, [r7, #4]
 8006786:	603b      	str	r3, [r7, #0]
 8006788:	4603      	mov	r3, r0
 800678a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800678c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800678e:	4618      	mov	r0, r3
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	bc80      	pop	{r7}
 8006796:	4770      	bx	lr

08006798 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	60b9      	str	r1, [r7, #8]
 80067a0:	607a      	str	r2, [r7, #4]
 80067a2:	603b      	str	r3, [r7, #0]
 80067a4:	4603      	mov	r3, r0
 80067a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80067a8:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bc80      	pop	{r7}
 80067b2:	4770      	bx	lr

080067b4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	4603      	mov	r3, r0
 80067bc:	603a      	str	r2, [r7, #0]
 80067be:	71fb      	strb	r3, [r7, #7]
 80067c0:	460b      	mov	r3, r1
 80067c2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	73fb      	strb	r3, [r7, #15]
    return res;
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bc80      	pop	{r7}
 80067d2:	4770      	bx	lr

080067d4 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	7c1b      	ldrb	r3, [r3, #16]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d115      	bne.n	8006814 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80067e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067ec:	2202      	movs	r2, #2
 80067ee:	2101      	movs	r1, #1
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f002 fdba 	bl	800936a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80067fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006802:	2202      	movs	r2, #2
 8006804:	2181      	movs	r1, #129	; 0x81
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f002 fdaf 	bl	800936a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	62da      	str	r2, [r3, #44]	; 0x2c
 8006812:	e012      	b.n	800683a <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006814:	2340      	movs	r3, #64	; 0x40
 8006816:	2202      	movs	r2, #2
 8006818:	2101      	movs	r1, #1
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f002 fda5 	bl	800936a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006828:	2340      	movs	r3, #64	; 0x40
 800682a:	2202      	movs	r2, #2
 800682c:	2181      	movs	r1, #129	; 0x81
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f002 fd9b 	bl	800936a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800683a:	f44f 701b 	mov.w	r0, #620	; 0x26c
 800683e:	f002 fedb 	bl	80095f8 <USBD_static_malloc>
 8006842:	4602      	mov	r2, r0
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 8006854:	2302      	movs	r3, #2
 8006856:	e003      	b.n	8006860 <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f9d9 	bl	8006c10 <MSC_BOT_Init>

  return USBD_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	460b      	mov	r3, r1
 8006872:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8006874:	2101      	movs	r1, #1
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f002 fd9d 	bl	80093b6 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8006884:	2181      	movs	r1, #129	; 0x81
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f002 fd95 	bl	80093b6 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fa06 	bl	8006ca4 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d009      	beq.n	80068b6 <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a8:	4618      	mov	r0, r3
 80068aa:	f002 feb1 	bl	8009610 <USBD_static_free>
    pdev->pClassData  = NULL;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d0:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d04d      	beq.n	8006982 <USBD_MSC_Setup+0xc2>
 80068e6:	2b20      	cmp	r3, #32
 80068e8:	f040 8113 	bne.w	8006b12 <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	785b      	ldrb	r3, [r3, #1]
 80068f0:	2bfe      	cmp	r3, #254	; 0xfe
 80068f2:	d002      	beq.n	80068fa <USBD_MSC_Setup+0x3a>
 80068f4:	2bff      	cmp	r3, #255	; 0xff
 80068f6:	d024      	beq.n	8006942 <USBD_MSC_Setup+0x82>
 80068f8:	e03b      	b.n	8006972 <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	885b      	ldrh	r3, [r3, #2]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d118      	bne.n	8006934 <USBD_MSC_Setup+0x74>
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	88db      	ldrh	r3, [r3, #6]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d114      	bne.n	8006934 <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006910:	2b00      	cmp	r3, #0
 8006912:	da0f      	bge.n	8006934 <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	4798      	blx	r3
 800691e:	4603      	mov	r3, r0
 8006920:	461a      	mov	r2, r3
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	2201      	movs	r2, #1
 800692a:	4619      	mov	r1, r3
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f002 f992 	bl	8008c56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006932:	e025      	b.n	8006980 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8006934:	6839      	ldr	r1, [r7, #0]
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f002 f923 	bl	8008b82 <USBD_CtlError>
            ret = USBD_FAIL;
 800693c:	2302      	movs	r3, #2
 800693e:	75fb      	strb	r3, [r7, #23]
          break;
 8006940:	e01e      	b.n	8006980 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	885b      	ldrh	r3, [r3, #2]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10c      	bne.n	8006964 <USBD_MSC_Setup+0xa4>
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	88db      	ldrh	r3, [r3, #6]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d108      	bne.n	8006964 <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006958:	2b00      	cmp	r3, #0
 800695a:	db03      	blt.n	8006964 <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f987 	bl	8006c70 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006962:	e00d      	b.n	8006980 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8006964:	6839      	ldr	r1, [r7, #0]
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f002 f90b 	bl	8008b82 <USBD_CtlError>
            ret = USBD_FAIL;
 800696c:	2302      	movs	r3, #2
 800696e:	75fb      	strb	r3, [r7, #23]
          break;
 8006970:	e006      	b.n	8006980 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006972:	6839      	ldr	r1, [r7, #0]
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f002 f904 	bl	8008b82 <USBD_CtlError>
          ret = USBD_FAIL;
 800697a:	2302      	movs	r3, #2
 800697c:	75fb      	strb	r3, [r7, #23]
          break;
 800697e:	bf00      	nop
      }
      break;
 8006980:	e0ce      	b.n	8006b20 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	785b      	ldrb	r3, [r3, #1]
 8006986:	2b0b      	cmp	r3, #11
 8006988:	f200 80bb 	bhi.w	8006b02 <USBD_MSC_Setup+0x242>
 800698c:	a201      	add	r2, pc, #4	; (adr r2, 8006994 <USBD_MSC_Setup+0xd4>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	080069c5 	.word	0x080069c5
 8006998:	08006a3b 	.word	0x08006a3b
 800699c:	08006b03 	.word	0x08006b03
 80069a0:	08006b03 	.word	0x08006b03
 80069a4:	08006b03 	.word	0x08006b03
 80069a8:	08006b03 	.word	0x08006b03
 80069ac:	08006b03 	.word	0x08006b03
 80069b0:	08006b03 	.word	0x08006b03
 80069b4:	08006b03 	.word	0x08006b03
 80069b8:	08006b03 	.word	0x08006b03
 80069bc:	080069ed 	.word	0x080069ed
 80069c0:	08006a15 	.word	0x08006a15
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ca:	2b03      	cmp	r3, #3
 80069cc:	d107      	bne.n	80069de <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80069ce:	f107 030e 	add.w	r3, r7, #14
 80069d2:	2202      	movs	r2, #2
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f002 f93d 	bl	8008c56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069dc:	e098      	b.n	8006b10 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 80069de:	6839      	ldr	r1, [r7, #0]
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f002 f8ce 	bl	8008b82 <USBD_CtlError>
            ret = USBD_FAIL;
 80069e6:	2302      	movs	r3, #2
 80069e8:	75fb      	strb	r3, [r7, #23]
          break;
 80069ea:	e091      	b.n	8006b10 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069f2:	2b03      	cmp	r3, #3
 80069f4:	d107      	bne.n	8006a06 <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	3304      	adds	r3, #4
 80069fa:	2201      	movs	r2, #1
 80069fc:	4619      	mov	r1, r3
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f002 f929 	bl	8008c56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a04:	e084      	b.n	8006b10 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006a06:	6839      	ldr	r1, [r7, #0]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f002 f8ba 	bl	8008b82 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a0e:	2302      	movs	r3, #2
 8006a10:	75fb      	strb	r3, [r7, #23]
          break;
 8006a12:	e07d      	b.n	8006b10 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a1a:	2b03      	cmp	r3, #3
 8006a1c:	d106      	bne.n	8006a2c <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	885b      	ldrh	r3, [r3, #2]
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	461a      	mov	r2, r3
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a2a:	e071      	b.n	8006b10 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f002 f8a7 	bl	8008b82 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a34:	2302      	movs	r3, #2
 8006a36:	75fb      	strb	r3, [r7, #23]
          break;
 8006a38:	e06a      	b.n	8006b10 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	889b      	ldrh	r3, [r3, #4]
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	4619      	mov	r1, r3
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f002 fcd6 	bl	80093f4 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	889b      	ldrh	r3, [r3, #4]
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	4619      	mov	r1, r3
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f002 fcb0 	bl	80093b6 <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	889b      	ldrh	r3, [r3, #4]
 8006a5a:	b25b      	sxtb	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	da23      	bge.n	8006aa8 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	889b      	ldrh	r3, [r3, #4]
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	f003 020f 	and.w	r2, r3, #15
 8006a6a:	6879      	ldr	r1, [r7, #4]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	440b      	add	r3, r1
 8006a76:	3318      	adds	r3, #24
 8006a78:	2200      	movs	r2, #0
 8006a7a:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	7c1b      	ldrb	r3, [r3, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d107      	bne.n	8006a94 <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006a84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a88:	2202      	movs	r2, #2
 8006a8a:	2181      	movs	r1, #129	; 0x81
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f002 fc6c 	bl	800936a <USBD_LL_OpenEP>
 8006a92:	e005      	b.n	8006aa0 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006a94:	2340      	movs	r3, #64	; 0x40
 8006a96:	2202      	movs	r2, #2
 8006a98:	2181      	movs	r1, #129	; 0x81
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f002 fc65 	bl	800936a <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8006aa6:	e024      	b.n	8006af2 <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	889b      	ldrh	r3, [r3, #4]
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	f003 020f 	and.w	r2, r3, #15
 8006ab2:	6879      	ldr	r1, [r7, #4]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	440b      	add	r3, r1
 8006abe:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	7c1b      	ldrb	r3, [r3, #16]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d107      	bne.n	8006ade <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006ace:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	2101      	movs	r1, #1
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f002 fc47 	bl	800936a <USBD_LL_OpenEP>
 8006adc:	e005      	b.n	8006aea <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006ade:	2340      	movs	r3, #64	; 0x40
 8006ae0:	2202      	movs	r2, #2
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f002 fc40 	bl	800936a <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	889b      	ldrh	r3, [r3, #4]
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fa52 	bl	8006fa4 <MSC_BOT_CplClrFeature>
          break;
 8006b00:	e006      	b.n	8006b10 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f002 f83c 	bl	8008b82 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b0e:	bf00      	nop
      }
      break;
 8006b10:	e006      	b.n	8006b20 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f002 f834 	bl	8008b82 <USBD_CtlError>
      ret = USBD_FAIL;
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b1e:	bf00      	nop
  }

  return ret;
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop

08006b2c <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	460b      	mov	r3, r1
 8006b36:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8006b38:	78fb      	ldrb	r3, [r7, #3]
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 f8c1 	bl	8006cc4 <MSC_BOT_DataIn>

  return USBD_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	460b      	mov	r3, r1
 8006b56:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8006b58:	78fb      	ldrb	r3, [r7, #3]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f8e3 	bl	8006d28 <MSC_BOT_DataOut>

  return USBD_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2220      	movs	r2, #32
 8006b78:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8006b7a:	4b03      	ldr	r3, [pc, #12]	; (8006b88 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bc80      	pop	{r7}
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	20000058 	.word	0x20000058

08006b8c <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2220      	movs	r2, #32
 8006b98:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8006b9a:	4b03      	ldr	r3, [pc, #12]	; (8006ba8 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bc80      	pop	{r7}
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	20000078 	.word	0x20000078

08006bac <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8006bba:	4b03      	ldr	r3, [pc, #12]	; (8006bc8 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bc80      	pop	{r7}
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	20000098 	.word	0x20000098

08006bcc <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	220a      	movs	r2, #10
 8006bd8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8006bda:	4b03      	ldr	r3, [pc, #12]	; (8006be8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bc80      	pop	{r7}
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	200000b8 	.word	0x200000b8

08006bec <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d003      	beq.n	8006c04 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bc80      	pop	{r7}
 8006c0e:	4770      	bx	lr

08006c10 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c1e:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2000      	movs	r0, #0
 8006c46:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8006c48:	2101      	movs	r1, #1
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f002 fbd2 	bl	80093f4 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8006c50:	2181      	movs	r1, #129	; 0x81
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f002 fbce 	bl	80093f4 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006c5e:	231f      	movs	r3, #31
 8006c60:	2101      	movs	r1, #1
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f002 fc91 	bl	800958a <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006c68:	bf00      	nop
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c7e:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006c92:	231f      	movs	r3, #31
 8006c94:	2101      	movs	r1, #1
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f002 fc77 	bl	800958a <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006c9c:	bf00      	nop
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb2:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	721a      	strb	r2, [r3, #8]
}
 8006cba:	bf00      	nop
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bc80      	pop	{r7}
 8006cc2:	4770      	bx	lr

08006cc4 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	460b      	mov	r3, r1
 8006cce:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd6:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	7a1b      	ldrb	r3, [r3, #8]
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d005      	beq.n	8006cec <MSC_BOT_DataIn+0x28>
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	db1a      	blt.n	8006d1a <MSC_BOT_DataIn+0x56>
 8006ce4:	3b03      	subs	r3, #3
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d817      	bhi.n	8006d1a <MSC_BOT_DataIn+0x56>
 8006cea:	e011      	b.n	8006d10 <MSC_BOT_DataIn+0x4c>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f97a 	bl	8006ff4 <SCSI_ProcessCmd>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	da0b      	bge.n	8006d1e <MSC_BOT_DataIn+0x5a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006d06:	2101      	movs	r1, #1
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 f8f1 	bl	8006ef0 <MSC_BOT_SendCSW>
      }
      break;
 8006d0e:	e006      	b.n	8006d1e <MSC_BOT_DataIn+0x5a>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006d10:	2100      	movs	r1, #0
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f8ec 	bl	8006ef0 <MSC_BOT_SendCSW>
      break;
 8006d18:	e002      	b.n	8006d20 <MSC_BOT_DataIn+0x5c>

    default:
      break;
 8006d1a:	bf00      	nop
 8006d1c:	e000      	b.n	8006d20 <MSC_BOT_DataIn+0x5c>
      break;
 8006d1e:	bf00      	nop
  }
}
 8006d20:	bf00      	nop
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	460b      	mov	r3, r1
 8006d32:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d3a:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	7a1b      	ldrb	r3, [r3, #8]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d002      	beq.n	8006d4a <MSC_BOT_DataOut+0x22>
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d004      	beq.n	8006d52 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8006d48:	e015      	b.n	8006d76 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f818 	bl	8006d80 <MSC_BOT_CBW_Decode>
      break;
 8006d50:	e011      	b.n	8006d76 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8006d5e:	461a      	mov	r2, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f947 	bl	8006ff4 <SCSI_ProcessCmd>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	da03      	bge.n	8006d74 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006d6c:	2101      	movs	r1, #1
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f8be 	bl	8006ef0 <MSC_BOT_SendCSW>
      break;
 8006d74:	bf00      	nop
  }
}
 8006d76:	bf00      	nop
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
	...

08006d80 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d8e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006da8:	2101      	movs	r1, #1
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f002 fc10 	bl	80095d0 <USBD_LL_GetRxDataSize>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b1f      	cmp	r3, #31
 8006db4:	d114      	bne.n	8006de0 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006dbc:	4a32      	ldr	r2, [pc, #200]	; (8006e88 <MSC_BOT_CBW_Decode+0x108>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d10e      	bne.n	8006de0 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d809      	bhi.n	8006de0 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d004      	beq.n	8006de0 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 8006ddc:	2b10      	cmp	r3, #16
 8006dde:	d90e      	bls.n	8006dfe <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006de6:	2320      	movs	r3, #32
 8006de8:	2205      	movs	r2, #5
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fc48 	bl	8007680 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2202      	movs	r2, #2
 8006df4:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f8a6 	bl	8006f48 <MSC_BOT_Abort>
 8006dfc:	e041      	b.n	8006e82 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f8f1 	bl	8006ff4 <SCSI_ProcessCmd>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	da0c      	bge.n	8006e32 <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	7a1b      	ldrb	r3, [r3, #8]
 8006e1c:	2b05      	cmp	r3, #5
 8006e1e:	d104      	bne.n	8006e2a <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006e20:	2101      	movs	r1, #1
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f864 	bl	8006ef0 <MSC_BOT_SendCSW>
 8006e28:	e02b      	b.n	8006e82 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f88c 	bl	8006f48 <MSC_BOT_Abort>
 8006e30:	e027      	b.n	8006e82 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	7a1b      	ldrb	r3, [r3, #8]
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d022      	beq.n	8006e80 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d01e      	beq.n	8006e80 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d01a      	beq.n	8006e80 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	895b      	ldrh	r3, [r3, #10]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d009      	beq.n	8006e66 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f103 010c 	add.w	r1, r3, #12
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	895b      	ldrh	r3, [r3, #10]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f814 	bl	8006e8c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8006e64:	e00d      	b.n	8006e82 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	895b      	ldrh	r3, [r3, #10]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d104      	bne.n	8006e78 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006e6e:	2100      	movs	r1, #0
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f83d 	bl	8006ef0 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8006e76:	e004      	b.n	8006e82 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f865 	bl	8006f48 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8006e7e:	e000      	b.n	8006e82 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8006e80:	bf00      	nop
    }
  }
}
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	43425355 	.word	0x43425355

08006e8c <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	4613      	mov	r3, r2
 8006e98:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea0:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006ea8:	88fb      	ldrh	r3, [r7, #6]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d204      	bcs.n	8006eb8 <MSC_BOT_SendData+0x2c>
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	e000      	b.n	8006eba <MSC_BOT_SendData+0x2e>
 8006eb8:	88fb      	ldrh	r3, [r7, #6]
 8006eba:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8006ec2:	88fb      	ldrh	r3, [r7, #6]
 8006ec4:	1ad2      	subs	r2, r2, r3
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	2204      	movs	r2, #4
 8006ed8:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8006eda:	8a7b      	ldrh	r3, [r7, #18]
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	2181      	movs	r1, #129	; 0x81
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f002 fb2f 	bl	8009544 <USBD_LL_Transmit>
}
 8006ee6:	bf00      	nop
 8006ee8:	3718      	adds	r7, #24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
	...

08006ef0 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f02:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4a0f      	ldr	r2, [pc, #60]	; (8006f44 <MSC_BOT_SendCSW+0x54>)
 8006f08:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	78fa      	ldrb	r2, [r7, #3]
 8006f10:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 8006f20:	230d      	movs	r3, #13
 8006f22:	2181      	movs	r1, #129	; 0x81
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f002 fb0d 	bl	8009544 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006f30:	231f      	movs	r3, #31
 8006f32:	2101      	movs	r1, #1
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f002 fb28 	bl	800958a <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006f3a:	bf00      	nop
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	53425355 	.word	0x53425355

08006f48 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f56:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10c      	bne.n	8006f7c <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d007      	beq.n	8006f7c <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d103      	bne.n	8006f7c <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8006f74:	2101      	movs	r1, #1
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f002 fa5b 	bl	8009432 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006f7c:	2181      	movs	r1, #129	; 0x81
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f002 fa57 	bl	8009432 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	7a5b      	ldrb	r3, [r3, #9]
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d107      	bne.n	8006f9c <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006f92:	231f      	movs	r3, #31
 8006f94:	2101      	movs	r1, #1
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f002 faf7 	bl	800958a <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8006f9c:	bf00      	nop
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb6:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	7a5b      	ldrb	r3, [r3, #9]
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d107      	bne.n	8006fd0 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006fc0:	2181      	movs	r1, #129	; 0x81
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f002 fa35 	bl	8009432 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	725a      	strb	r2, [r3, #9]
 8006fce:	e00d      	b.n	8006fec <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8006fd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	da08      	bge.n	8006fea <MSC_BOT_CplClrFeature+0x46>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	7a5b      	ldrb	r3, [r3, #9]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d004      	beq.n	8006fea <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7ff ff84 	bl	8006ef0 <MSC_BOT_SendCSW>
 8006fe8:	e000      	b.n	8006fec <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 8006fea:	bf00      	nop
  }
}
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
	...

08006ff4 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	607a      	str	r2, [r7, #4]
 8007000:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	2b5a      	cmp	r3, #90	; 0x5a
 8007008:	f200 810e 	bhi.w	8007228 <SCSI_ProcessCmd+0x234>
 800700c:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <SCSI_ProcessCmd+0x20>)
 800700e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007012:	bf00      	nop
 8007014:	08007181 	.word	0x08007181
 8007018:	08007229 	.word	0x08007229
 800701c:	08007229 	.word	0x08007229
 8007020:	0800718f 	.word	0x0800718f
 8007024:	08007229 	.word	0x08007229
 8007028:	08007229 	.word	0x08007229
 800702c:	08007229 	.word	0x08007229
 8007030:	08007229 	.word	0x08007229
 8007034:	08007229 	.word	0x08007229
 8007038:	08007229 	.word	0x08007229
 800703c:	08007229 	.word	0x08007229
 8007040:	08007229 	.word	0x08007229
 8007044:	08007229 	.word	0x08007229
 8007048:	08007229 	.word	0x08007229
 800704c:	08007229 	.word	0x08007229
 8007050:	08007229 	.word	0x08007229
 8007054:	08007229 	.word	0x08007229
 8007058:	08007229 	.word	0x08007229
 800705c:	0800719d 	.word	0x0800719d
 8007060:	08007229 	.word	0x08007229
 8007064:	08007229 	.word	0x08007229
 8007068:	08007229 	.word	0x08007229
 800706c:	08007229 	.word	0x08007229
 8007070:	08007229 	.word	0x08007229
 8007074:	08007229 	.word	0x08007229
 8007078:	08007229 	.word	0x08007229
 800707c:	080071c7 	.word	0x080071c7
 8007080:	080071ab 	.word	0x080071ab
 8007084:	08007229 	.word	0x08007229
 8007088:	08007229 	.word	0x08007229
 800708c:	080071b9 	.word	0x080071b9
 8007090:	08007229 	.word	0x08007229
 8007094:	08007229 	.word	0x08007229
 8007098:	08007229 	.word	0x08007229
 800709c:	08007229 	.word	0x08007229
 80070a0:	080071e3 	.word	0x080071e3
 80070a4:	08007229 	.word	0x08007229
 80070a8:	080071f1 	.word	0x080071f1
 80070ac:	08007229 	.word	0x08007229
 80070b0:	08007229 	.word	0x08007229
 80070b4:	080071ff 	.word	0x080071ff
 80070b8:	08007229 	.word	0x08007229
 80070bc:	0800720d 	.word	0x0800720d
 80070c0:	08007229 	.word	0x08007229
 80070c4:	08007229 	.word	0x08007229
 80070c8:	08007229 	.word	0x08007229
 80070cc:	08007229 	.word	0x08007229
 80070d0:	0800721b 	.word	0x0800721b
 80070d4:	08007229 	.word	0x08007229
 80070d8:	08007229 	.word	0x08007229
 80070dc:	08007229 	.word	0x08007229
 80070e0:	08007229 	.word	0x08007229
 80070e4:	08007229 	.word	0x08007229
 80070e8:	08007229 	.word	0x08007229
 80070ec:	08007229 	.word	0x08007229
 80070f0:	08007229 	.word	0x08007229
 80070f4:	08007229 	.word	0x08007229
 80070f8:	08007229 	.word	0x08007229
 80070fc:	08007229 	.word	0x08007229
 8007100:	08007229 	.word	0x08007229
 8007104:	08007229 	.word	0x08007229
 8007108:	08007229 	.word	0x08007229
 800710c:	08007229 	.word	0x08007229
 8007110:	08007229 	.word	0x08007229
 8007114:	08007229 	.word	0x08007229
 8007118:	08007229 	.word	0x08007229
 800711c:	08007229 	.word	0x08007229
 8007120:	08007229 	.word	0x08007229
 8007124:	08007229 	.word	0x08007229
 8007128:	08007229 	.word	0x08007229
 800712c:	08007229 	.word	0x08007229
 8007130:	08007229 	.word	0x08007229
 8007134:	08007229 	.word	0x08007229
 8007138:	08007229 	.word	0x08007229
 800713c:	08007229 	.word	0x08007229
 8007140:	08007229 	.word	0x08007229
 8007144:	08007229 	.word	0x08007229
 8007148:	08007229 	.word	0x08007229
 800714c:	08007229 	.word	0x08007229
 8007150:	08007229 	.word	0x08007229
 8007154:	08007229 	.word	0x08007229
 8007158:	08007229 	.word	0x08007229
 800715c:	08007229 	.word	0x08007229
 8007160:	08007229 	.word	0x08007229
 8007164:	08007229 	.word	0x08007229
 8007168:	08007229 	.word	0x08007229
 800716c:	08007229 	.word	0x08007229
 8007170:	08007229 	.word	0x08007229
 8007174:	08007229 	.word	0x08007229
 8007178:	08007229 	.word	0x08007229
 800717c:	080071d5 	.word	0x080071d5
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 8007180:	7afb      	ldrb	r3, [r7, #11]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	4619      	mov	r1, r3
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 f85c 	bl	8007244 <SCSI_TestUnitReady>
      break;
 800718c:	e055      	b.n	800723a <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 800718e:	7afb      	ldrb	r3, [r7, #11]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	4619      	mov	r1, r3
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 fa09 	bl	80075ac <SCSI_RequestSense>
      break;
 800719a:	e04e      	b.n	800723a <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 800719c:	7afb      	ldrb	r3, [r7, #11]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	4619      	mov	r1, r3
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f000 f888 	bl	80072b8 <SCSI_Inquiry>
      break;
 80071a8:	e047      	b.n	800723a <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 80071aa:	7afb      	ldrb	r3, [r7, #11]
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	4619      	mov	r1, r3
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f000 fa9e 	bl	80076f2 <SCSI_StartStopUnit>
      break;
 80071b6:	e040      	b.n	800723a <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 80071b8:	7afb      	ldrb	r3, [r7, #11]
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	4619      	mov	r1, r3
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 fa97 	bl	80076f2 <SCSI_StartStopUnit>
      break;
 80071c4:	e039      	b.n	800723a <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 80071c6:	7afb      	ldrb	r3, [r7, #11]
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	4619      	mov	r1, r3
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f000 f99d 	bl	800750c <SCSI_ModeSense6>
      break;
 80071d2:	e032      	b.n	800723a <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 80071d4:	7afb      	ldrb	r3, [r7, #11]
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	4619      	mov	r1, r3
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 f9be 	bl	800755c <SCSI_ModeSense10>
      break;
 80071e0:	e02b      	b.n	800723a <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80071e2:	7afb      	ldrb	r3, [r7, #11]
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	4619      	mov	r1, r3
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f000 f92a 	bl	8007442 <SCSI_ReadFormatCapacity>
      break;
 80071ee:	e024      	b.n	800723a <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 80071f0:	7afb      	ldrb	r3, [r7, #11]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	4619      	mov	r1, r3
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 f8bc 	bl	8007374 <SCSI_ReadCapacity10>
      break;
 80071fc:	e01d      	b.n	800723a <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 80071fe:	7afb      	ldrb	r3, [r7, #11]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	4619      	mov	r1, r3
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 fa88 	bl	800771a <SCSI_Read10>
      break;
 800720a:	e016      	b.n	800723a <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 800720c:	7afb      	ldrb	r3, [r7, #11]
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	4619      	mov	r1, r3
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f000 fb0d 	bl	8007832 <SCSI_Write10>
      break;
 8007218:	e00f      	b.n	800723a <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 800721a:	7afb      	ldrb	r3, [r7, #11]
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	4619      	mov	r1, r3
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 fbb6 	bl	8007992 <SCSI_Verify10>
      break;
 8007226:	e008      	b.n	800723a <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8007228:	7af9      	ldrb	r1, [r7, #11]
 800722a:	2320      	movs	r3, #32
 800722c:	2205      	movs	r2, #5
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f000 fa26 	bl	8007680 <SCSI_SenseCode>
      return -1;
 8007234:	f04f 33ff 	mov.w	r3, #4294967295
 8007238:	e000      	b.n	800723c <SCSI_ProcessCmd+0x248>
  }

  return 0;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	460b      	mov	r3, r1
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007258:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00a      	beq.n	800727a <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800726a:	2320      	movs	r3, #32
 800726c:	2205      	movs	r2, #5
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f000 fa06 	bl	8007680 <SCSI_SenseCode>

    return -1;
 8007274:	f04f 33ff 	mov.w	r3, #4294967295
 8007278:	e019      	b.n	80072ae <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	7afa      	ldrb	r2, [r7, #11]
 8007284:	4610      	mov	r0, r2
 8007286:	4798      	blx	r3
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00b      	beq.n	80072a6 <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800728e:	7af9      	ldrb	r1, [r7, #11]
 8007290:	233a      	movs	r3, #58	; 0x3a
 8007292:	2202      	movs	r2, #2
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f000 f9f3 	bl	8007680 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2205      	movs	r2, #5
 800729e:	721a      	strb	r2, [r3, #8]

    return -1;
 80072a0:	f04f 33ff 	mov.w	r3, #4294967295
 80072a4:	e003      	b.n	80072ae <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2200      	movs	r2, #0
 80072aa:	815a      	strh	r2, [r3, #10]

  return 0;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
	...

080072b8 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b089      	sub	sp, #36	; 0x24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	460b      	mov	r3, r1
 80072c2:	607a      	str	r2, [r7, #4]
 80072c4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072cc:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	3301      	adds	r3, #1
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	f003 0301 	and.w	r3, r3, #1
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d014      	beq.n	8007306 <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 80072dc:	2307      	movs	r3, #7
 80072de:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	8bfa      	ldrh	r2, [r7, #30]
 80072e4:	815a      	strh	r2, [r3, #10]

    while (len)
 80072e6:	e00a      	b.n	80072fe <SCSI_Inquiry+0x46>
    {
      len--;
 80072e8:	8bfb      	ldrh	r3, [r7, #30]
 80072ea:	3b01      	subs	r3, #1
 80072ec:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 80072ee:	8bfa      	ldrh	r2, [r7, #30]
 80072f0:	8bfb      	ldrh	r3, [r7, #30]
 80072f2:	491f      	ldr	r1, [pc, #124]	; (8007370 <SCSI_Inquiry+0xb8>)
 80072f4:	5c89      	ldrb	r1, [r1, r2]
 80072f6:	69ba      	ldr	r2, [r7, #24]
 80072f8:	4413      	add	r3, r2
 80072fa:	460a      	mov	r2, r1
 80072fc:	731a      	strb	r2, [r3, #12]
    while (len)
 80072fe:	8bfb      	ldrh	r3, [r7, #30]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1f1      	bne.n	80072e8 <SCSI_Inquiry+0x30>
 8007304:	e02e      	b.n	8007364 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800730c:	69d9      	ldr	r1, [r3, #28]
 800730e:	7afa      	ldrb	r2, [r7, #11]
 8007310:	4613      	mov	r3, r2
 8007312:	00db      	lsls	r3, r3, #3
 8007314:	4413      	add	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	440b      	add	r3, r1
 800731a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	3304      	adds	r3, #4
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	b29b      	uxth	r3, r3
 8007324:	3305      	adds	r3, #5
 8007326:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	3304      	adds	r3, #4
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	b29b      	uxth	r3, r3
 8007330:	8bfa      	ldrh	r2, [r7, #30]
 8007332:	429a      	cmp	r2, r3
 8007334:	d303      	bcc.n	800733e <SCSI_Inquiry+0x86>
    {
      len = params[4];
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	3304      	adds	r3, #4
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	8bfa      	ldrh	r2, [r7, #30]
 8007342:	815a      	strh	r2, [r3, #10]

    while (len)
 8007344:	e00b      	b.n	800735e <SCSI_Inquiry+0xa6>
    {
      len--;
 8007346:	8bfb      	ldrh	r3, [r7, #30]
 8007348:	3b01      	subs	r3, #1
 800734a:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 800734c:	8bfb      	ldrh	r3, [r7, #30]
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	441a      	add	r2, r3
 8007352:	8bfb      	ldrh	r3, [r7, #30]
 8007354:	7811      	ldrb	r1, [r2, #0]
 8007356:	69ba      	ldr	r2, [r7, #24]
 8007358:	4413      	add	r3, r2
 800735a:	460a      	mov	r2, r1
 800735c:	731a      	strb	r2, [r3, #12]
    while (len)
 800735e:	8bfb      	ldrh	r3, [r7, #30]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1f0      	bne.n	8007346 <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3724      	adds	r7, #36	; 0x24
 800736a:	46bd      	mov	sp, r7
 800736c:	bc80      	pop	{r7}
 800736e:	4770      	bx	lr
 8007370:	0800977c 	.word	0x0800977c

08007374 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	460b      	mov	r3, r1
 800737e:	607a      	str	r2, [r7, #4]
 8007380:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007388:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	f502 7118 	add.w	r1, r2, #608	; 0x260
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	f202 225e 	addw	r2, r2, #606	; 0x25e
 800739e:	7af8      	ldrb	r0, [r7, #11]
 80073a0:	4798      	blx	r3
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d008      	beq.n	80073ba <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80073a8:	7af9      	ldrb	r1, [r7, #11]
 80073aa:	233a      	movs	r3, #58	; 0x3a
 80073ac:	2202      	movs	r2, #2
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f000 f966 	bl	8007680 <SCSI_SenseCode>
    return -1;
 80073b4:	f04f 33ff 	mov.w	r3, #4294967295
 80073b8:	e03f      	b.n	800743a <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80073c0:	3b01      	subs	r3, #1
 80073c2:	0e1b      	lsrs	r3, r3, #24
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80073d0:	3b01      	subs	r3, #1
 80073d2:	0c1b      	lsrs	r3, r3, #16
 80073d4:	b2da      	uxtb	r2, r3
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80073e0:	3b01      	subs	r3, #1
 80073e2:	0a1b      	lsrs	r3, r3, #8
 80073e4:	b2da      	uxtb	r2, r3
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	3b01      	subs	r3, #1
 80073f4:	b2da      	uxtb	r2, r3
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007400:	161b      	asrs	r3, r3, #24
 8007402:	b2da      	uxtb	r2, r3
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800740e:	141b      	asrs	r3, r3, #16
 8007410:	b2da      	uxtb	r2, r3
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800741c:	0a1b      	lsrs	r3, r3, #8
 800741e:	b29b      	uxth	r3, r3
 8007420:	b2da      	uxtb	r2, r3
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800742c:	b2da      	uxtb	r2, r3
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	2208      	movs	r2, #8
 8007436:	815a      	strh	r2, [r3, #10]
    return 0;
 8007438:	2300      	movs	r3, #0
  }
}
 800743a:	4618      	mov	r0, r3
 800743c:	3718      	adds	r7, #24
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b088      	sub	sp, #32
 8007446:	af00      	add	r7, sp, #0
 8007448:	60f8      	str	r0, [r7, #12]
 800744a:	460b      	mov	r3, r1
 800744c:	607a      	str	r2, [r7, #4]
 800744e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007456:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 8007458:	2300      	movs	r3, #0
 800745a:	83fb      	strh	r3, [r7, #30]
 800745c:	e007      	b.n	800746e <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800745e:	8bfb      	ldrh	r3, [r7, #30]
 8007460:	69ba      	ldr	r2, [r7, #24]
 8007462:	4413      	add	r3, r2
 8007464:	2200      	movs	r2, #0
 8007466:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 8007468:	8bfb      	ldrh	r3, [r7, #30]
 800746a:	3301      	adds	r3, #1
 800746c:	83fb      	strh	r3, [r7, #30]
 800746e:	8bfb      	ldrh	r3, [r7, #30]
 8007470:	2b0b      	cmp	r3, #11
 8007472:	d9f4      	bls.n	800745e <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	f107 0216 	add.w	r2, r7, #22
 8007480:	f107 0110 	add.w	r1, r7, #16
 8007484:	7af8      	ldrb	r0, [r7, #11]
 8007486:	4798      	blx	r3
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d008      	beq.n	80074a0 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800748e:	7af9      	ldrb	r1, [r7, #11]
 8007490:	233a      	movs	r3, #58	; 0x3a
 8007492:	2202      	movs	r2, #2
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 f8f3 	bl	8007680 <SCSI_SenseCode>
    return -1;
 800749a:	f04f 33ff 	mov.w	r3, #4294967295
 800749e:	e030      	b.n	8007502 <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	2208      	movs	r2, #8
 80074a4:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	3b01      	subs	r3, #1
 80074aa:	0e1b      	lsrs	r3, r3, #24
 80074ac:	b2da      	uxtb	r2, r3
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	3b01      	subs	r3, #1
 80074b6:	0c1b      	lsrs	r3, r3, #16
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	3b01      	subs	r3, #1
 80074c2:	0a1b      	lsrs	r3, r3, #8
 80074c4:	b2da      	uxtb	r2, r3
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	3b01      	subs	r3, #1
 80074d0:	b2da      	uxtb	r2, r3
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	2202      	movs	r2, #2
 80074da:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80074dc:	8afb      	ldrh	r3, [r7, #22]
 80074de:	141b      	asrs	r3, r3, #16
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80074e6:	8afb      	ldrh	r3, [r7, #22]
 80074e8:	0a1b      	lsrs	r3, r3, #8
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	b2da      	uxtb	r2, r3
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 80074f2:	8afb      	ldrh	r3, [r7, #22]
 80074f4:	b2da      	uxtb	r2, r3
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	220c      	movs	r2, #12
 80074fe:	815a      	strh	r2, [r3, #10]
    return 0;
 8007500:	2300      	movs	r3, #0
  }
}
 8007502:	4618      	mov	r0, r3
 8007504:	3720      	adds	r7, #32
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800750c:	b480      	push	{r7}
 800750e:	b087      	sub	sp, #28
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	460b      	mov	r3, r1
 8007516:	607a      	str	r2, [r7, #4]
 8007518:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007520:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 8007522:	2308      	movs	r3, #8
 8007524:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	8afa      	ldrh	r2, [r7, #22]
 800752a:	815a      	strh	r2, [r3, #10]

  while (len)
 800752c:	e00a      	b.n	8007544 <SCSI_ModeSense6+0x38>
  {
    len--;
 800752e:	8afb      	ldrh	r3, [r7, #22]
 8007530:	3b01      	subs	r3, #1
 8007532:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8007534:	8afa      	ldrh	r2, [r7, #22]
 8007536:	8afb      	ldrh	r3, [r7, #22]
 8007538:	4907      	ldr	r1, [pc, #28]	; (8007558 <SCSI_ModeSense6+0x4c>)
 800753a:	5c89      	ldrb	r1, [r1, r2]
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	4413      	add	r3, r2
 8007540:	460a      	mov	r2, r1
 8007542:	731a      	strb	r2, [r3, #12]
  while (len)
 8007544:	8afb      	ldrh	r3, [r7, #22]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1f1      	bne.n	800752e <SCSI_ModeSense6+0x22>
  }
  return 0;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	371c      	adds	r7, #28
 8007550:	46bd      	mov	sp, r7
 8007552:	bc80      	pop	{r7}
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	08009784 	.word	0x08009784

0800755c <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800755c:	b480      	push	{r7}
 800755e:	b087      	sub	sp, #28
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	460b      	mov	r3, r1
 8007566:	607a      	str	r2, [r7, #4]
 8007568:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 800756a:	2308      	movs	r3, #8
 800756c:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007574:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	8afa      	ldrh	r2, [r7, #22]
 800757a:	815a      	strh	r2, [r3, #10]

  while (len)
 800757c:	e00a      	b.n	8007594 <SCSI_ModeSense10+0x38>
  {
    len--;
 800757e:	8afb      	ldrh	r3, [r7, #22]
 8007580:	3b01      	subs	r3, #1
 8007582:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8007584:	8afa      	ldrh	r2, [r7, #22]
 8007586:	8afb      	ldrh	r3, [r7, #22]
 8007588:	4907      	ldr	r1, [pc, #28]	; (80075a8 <SCSI_ModeSense10+0x4c>)
 800758a:	5c89      	ldrb	r1, [r1, r2]
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	4413      	add	r3, r2
 8007590:	460a      	mov	r2, r1
 8007592:	731a      	strb	r2, [r3, #12]
  while (len)
 8007594:	8afb      	ldrh	r3, [r7, #22]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1f1      	bne.n	800757e <SCSI_ModeSense10+0x22>
  }

  return 0;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	371c      	adds	r7, #28
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bc80      	pop	{r7}
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	0800978c 	.word	0x0800978c

080075ac <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b087      	sub	sp, #28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	460b      	mov	r3, r1
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075c0:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 80075c2:	2300      	movs	r3, #0
 80075c4:	75fb      	strb	r3, [r7, #23]
 80075c6:	e007      	b.n	80075d8 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 80075c8:	7dfb      	ldrb	r3, [r7, #23]
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	4413      	add	r3, r2
 80075ce:	2200      	movs	r2, #0
 80075d0:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 80075d2:	7dfb      	ldrb	r3, [r7, #23]
 80075d4:	3301      	adds	r3, #1
 80075d6:	75fb      	strb	r3, [r7, #23]
 80075d8:	7dfb      	ldrb	r3, [r7, #23]
 80075da:	2b11      	cmp	r3, #17
 80075dc:	d9f4      	bls.n	80075c8 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	2270      	movs	r2, #112	; 0x70
 80075e2:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	220c      	movs	r2, #12
 80075e8:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d02e      	beq.n	8007658 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	3347      	adds	r3, #71	; 0x47
 8007604:	00db      	lsls	r3, r3, #3
 8007606:	4413      	add	r3, r2
 8007608:	791a      	ldrb	r2, [r3, #4]
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	3347      	adds	r3, #71	; 0x47
 8007618:	00db      	lsls	r3, r3, #3
 800761a:	4413      	add	r3, r2
 800761c:	7a5a      	ldrb	r2, [r3, #9]
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	3347      	adds	r3, #71	; 0x47
 800762c:	00db      	lsls	r3, r3, #3
 800762e:	4413      	add	r3, r2
 8007630:	7a1a      	ldrb	r2, [r3, #8]
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800763c:	3301      	adds	r3, #1
 800763e:	b2da      	uxtb	r2, r3
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800764c:	2b04      	cmp	r3, #4
 800764e:	d103      	bne.n	8007658 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	2212      	movs	r2, #18
 800765c:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	3304      	adds	r3, #4
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	2b12      	cmp	r3, #18
 8007666:	d805      	bhi.n	8007674 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	3304      	adds	r3, #4
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	b29a      	uxth	r2, r3
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	371c      	adds	r7, #28
 800767a:	46bd      	mov	sp, r7
 800767c:	bc80      	pop	{r7}
 800767e:	4770      	bx	lr

08007680 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	4608      	mov	r0, r1
 800768a:	4611      	mov	r1, r2
 800768c:	461a      	mov	r2, r3
 800768e:	4603      	mov	r3, r0
 8007690:	70fb      	strb	r3, [r7, #3]
 8007692:	460b      	mov	r3, r1
 8007694:	70bb      	strb	r3, [r7, #2]
 8007696:	4613      	mov	r3, r2
 8007698:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a0:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	3347      	adds	r3, #71	; 0x47
 80076ac:	00db      	lsls	r3, r3, #3
 80076ae:	4413      	add	r3, r2
 80076b0:	78ba      	ldrb	r2, [r7, #2]
 80076b2:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	3347      	adds	r3, #71	; 0x47
 80076be:	00db      	lsls	r3, r3, #3
 80076c0:	4413      	add	r3, r2
 80076c2:	2200      	movs	r2, #0
 80076c4:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80076cc:	3301      	adds	r3, #1
 80076ce:	b2da      	uxtb	r2, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80076dc:	2b04      	cmp	r3, #4
 80076de:	d103      	bne.n	80076e8 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 80076e8:	bf00      	nop
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bc80      	pop	{r7}
 80076f0:	4770      	bx	lr

080076f2 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b087      	sub	sp, #28
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	60f8      	str	r0, [r7, #12]
 80076fa:	460b      	mov	r3, r1
 80076fc:	607a      	str	r2, [r7, #4]
 80076fe:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007706:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	2200      	movs	r2, #0
 800770c:	815a      	strh	r2, [r3, #10]
  return 0;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	371c      	adds	r7, #28
 8007714:	46bd      	mov	sp, r7
 8007716:	bc80      	pop	{r7}
 8007718:	4770      	bx	lr

0800771a <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b086      	sub	sp, #24
 800771e:	af00      	add	r7, sp, #0
 8007720:	60f8      	str	r0, [r7, #12]
 8007722:	460b      	mov	r3, r1
 8007724:	607a      	str	r2, [r7, #4]
 8007726:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800772e:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	7a1b      	ldrb	r3, [r3, #8]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d16e      	bne.n	8007816 <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800773e:	b25b      	sxtb	r3, r3
 8007740:	2b00      	cmp	r3, #0
 8007742:	db0a      	blt.n	800775a <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800774a:	2320      	movs	r3, #32
 800774c:	2205      	movs	r2, #5
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f7ff ff96 	bl	8007680 <SCSI_SenseCode>
      return -1;
 8007754:	f04f 33ff 	mov.w	r3, #4294967295
 8007758:	e067      	b.n	800782a <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	7afa      	ldrb	r2, [r7, #11]
 8007764:	4610      	mov	r0, r2
 8007766:	4798      	blx	r3
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d008      	beq.n	8007780 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800776e:	7af9      	ldrb	r1, [r7, #11]
 8007770:	233a      	movs	r3, #58	; 0x3a
 8007772:	2202      	movs	r2, #2
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f7ff ff83 	bl	8007680 <SCSI_SenseCode>
      return -1;
 800777a:	f04f 33ff 	mov.w	r3, #4294967295
 800777e:	e054      	b.n	800782a <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	3302      	adds	r3, #2
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	3303      	adds	r3, #3
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007790:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	3304      	adds	r3, #4
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800779a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	3205      	adds	r2, #5
 80077a0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80077a2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	3307      	adds	r3, #7
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	021b      	lsls	r3, r3, #8
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	3208      	adds	r2, #8
 80077b6:	7812      	ldrb	r2, [r2, #0]
 80077b8:	431a      	orrs	r2, r3
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80077cc:	7af9      	ldrb	r1, [r7, #11]
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 f912 	bl	80079f8 <SCSI_CheckAddressRange>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	da02      	bge.n	80077e0 <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80077da:	f04f 33ff 	mov.w	r3, #4294967295
 80077de:	e024      	b.n	800782a <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	2202      	movs	r2, #2
 80077e4:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80077f2:	6979      	ldr	r1, [r7, #20]
 80077f4:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 80077f8:	fb01 f303 	mul.w	r3, r1, r3
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d00a      	beq.n	8007816 <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007806:	2320      	movs	r3, #32
 8007808:	2205      	movs	r2, #5
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f7ff ff38 	bl	8007680 <SCSI_SenseCode>
      return -1;
 8007810:	f04f 33ff 	mov.w	r3, #4294967295
 8007814:	e009      	b.n	800782a <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800781c:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 800781e:	7afb      	ldrb	r3, [r7, #11]
 8007820:	4619      	mov	r1, r3
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 f90a 	bl	8007a3c <SCSI_ProcessRead>
 8007828:	4603      	mov	r3, r0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3718      	adds	r7, #24
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b086      	sub	sp, #24
 8007836:	af00      	add	r7, sp, #0
 8007838:	60f8      	str	r0, [r7, #12]
 800783a:	460b      	mov	r3, r1
 800783c:	607a      	str	r2, [r7, #4]
 800783e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007846:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	7a1b      	ldrb	r3, [r3, #8]
 800784c:	2b00      	cmp	r3, #0
 800784e:	f040 8096 	bne.w	800797e <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007858:	b25b      	sxtb	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	da0a      	bge.n	8007874 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007864:	2320      	movs	r3, #32
 8007866:	2205      	movs	r2, #5
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f7ff ff09 	bl	8007680 <SCSI_SenseCode>
      return -1;
 800786e:	f04f 33ff 	mov.w	r3, #4294967295
 8007872:	e08a      	b.n	800798a <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	7afa      	ldrb	r2, [r7, #11]
 800787e:	4610      	mov	r0, r2
 8007880:	4798      	blx	r3
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d008      	beq.n	800789a <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007888:	7af9      	ldrb	r1, [r7, #11]
 800788a:	233a      	movs	r3, #58	; 0x3a
 800788c:	2202      	movs	r2, #2
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f7ff fef6 	bl	8007680 <SCSI_SenseCode>
      return -1;
 8007894:	f04f 33ff 	mov.w	r3, #4294967295
 8007898:	e077      	b.n	800798a <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	7afa      	ldrb	r2, [r7, #11]
 80078a4:	4610      	mov	r0, r2
 80078a6:	4798      	blx	r3
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d008      	beq.n	80078c0 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80078ae:	7af9      	ldrb	r1, [r7, #11]
 80078b0:	2327      	movs	r3, #39	; 0x27
 80078b2:	2202      	movs	r2, #2
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f7ff fee3 	bl	8007680 <SCSI_SenseCode>
      return -1;
 80078ba:	f04f 33ff 	mov.w	r3, #4294967295
 80078be:	e064      	b.n	800798a <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3302      	adds	r3, #2
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	3303      	adds	r3, #3
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80078d0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	3304      	adds	r3, #4
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80078da:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	3205      	adds	r2, #5
 80078e0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80078e2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	3307      	adds	r3, #7
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	3208      	adds	r2, #8
 80078f6:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80078f8:	431a      	orrs	r2, r3
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800790c:	7af9      	ldrb	r1, [r7, #11]
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 f872 	bl	80079f8 <SCSI_CheckAddressRange>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	da02      	bge.n	8007920 <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800791a:	f04f 33ff 	mov.w	r3, #4294967295
 800791e:	e034      	b.n	800798a <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800792c:	fb02 f303 	mul.w	r3, r2, r3
 8007930:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	429a      	cmp	r2, r3
 800793c:	d00a      	beq.n	8007954 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007944:	2320      	movs	r3, #32
 8007946:	2205      	movs	r2, #5
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f7ff fe99 	bl	8007680 <SCSI_SenseCode>
      return -1;
 800794e:	f04f 33ff 	mov.w	r3, #4294967295
 8007952:	e01a      	b.n	800798a <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800795a:	bf28      	it	cs
 800795c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007960:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	2201      	movs	r2, #1
 8007966:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f103 020c 	add.w	r2, r3, #12
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	b29b      	uxth	r3, r3
 8007972:	2101      	movs	r1, #1
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f001 fe08 	bl	800958a <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 800797a:	2300      	movs	r3, #0
 800797c:	e005      	b.n	800798a <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 800797e:	7afb      	ldrb	r3, [r7, #11]
 8007980:	4619      	mov	r1, r3
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 f8ce 	bl	8007b24 <SCSI_ProcessWrite>
 8007988:	4603      	mov	r3, r0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3718      	adds	r7, #24
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b086      	sub	sp, #24
 8007996:	af00      	add	r7, sp, #0
 8007998:	60f8      	str	r0, [r7, #12]
 800799a:	460b      	mov	r3, r1
 800799c:	607a      	str	r2, [r7, #4]
 800799e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a6:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	3301      	adds	r3, #1
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d008      	beq.n	80079c8 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80079b6:	7af9      	ldrb	r1, [r7, #11]
 80079b8:	2324      	movs	r3, #36	; 0x24
 80079ba:	2205      	movs	r2, #5
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f7ff fe5f 	bl	8007680 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80079c2:	f04f 33ff 	mov.w	r3, #4294967295
 80079c6:	e013      	b.n	80079f0 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80079d4:	7af9      	ldrb	r1, [r7, #11]
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f000 f80e 	bl	80079f8 <SCSI_CheckAddressRange>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	da02      	bge.n	80079e8 <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 80079e2:	f04f 33ff 	mov.w	r3, #4294967295
 80079e6:	e003      	b.n	80079f0 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	2200      	movs	r2, #0
 80079ec:	815a      	strh	r2, [r3, #10]
  return 0;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3718      	adds	r7, #24
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	607a      	str	r2, [r7, #4]
 8007a02:	603b      	str	r3, [r7, #0]
 8007a04:	460b      	mov	r3, r1
 8007a06:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a0e:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	441a      	add	r2, r3
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d908      	bls.n	8007a32 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8007a20:	7af9      	ldrb	r1, [r7, #11]
 8007a22:	2321      	movs	r3, #33	; 0x21
 8007a24:	2205      	movs	r2, #5
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f7ff fe2a 	bl	8007680 <SCSI_SenseCode>
    return -1;
 8007a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a30:	e000      	b.n	8007a34 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3718      	adds	r7, #24
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007a3c:	b590      	push	{r4, r7, lr}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	460b      	mov	r3, r1
 8007a46:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a4e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007a5c:	fb02 f303 	mul.w	r3, r2, r3
 8007a60:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a68:	bf28      	it	cs
 8007a6a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007a6e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a76:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	78f8      	ldrb	r0, [r7, #3]
 8007a96:	47a0      	blx	r4
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	da08      	bge.n	8007ab0 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8007a9e:	78f9      	ldrb	r1, [r7, #3]
 8007aa0:	2311      	movs	r3, #17
 8007aa2:	2204      	movs	r2, #4
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f7ff fdeb 	bl	8007680 <SCSI_SenseCode>
    return -1;
 8007aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8007aae:	e035      	b.n	8007b1c <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f103 020c 	add.w	r2, r3, #12
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	2181      	movs	r1, #129	; 0x81
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f001 fd41 	bl	8009544 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007ace:	4619      	mov	r1, r3
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ad6:	441a      	add	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007aea:	4619      	mov	r1, r3
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8007af2:	1ad2      	subs	r2, r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	1ad2      	subs	r2, r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d102      	bne.n	8007b1a <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2203      	movs	r2, #3
 8007b18:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3714      	adds	r7, #20
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd90      	pop	{r4, r7, pc}

08007b24 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007b24:	b590      	push	{r4, r7, lr}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b36:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007b44:	fb02 f303 	mul.w	r3, r2, r3
 8007b48:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b50:	bf28      	it	cs
 8007b52:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007b56:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b5e:	695c      	ldr	r4, [r3, #20]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f103 010c 	add.w	r1, r3, #12
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007b72:	4618      	mov	r0, r3
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	78f8      	ldrb	r0, [r7, #3]
 8007b7e:	47a0      	blx	r4
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	da08      	bge.n	8007b98 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8007b86:	78f9      	ldrb	r1, [r7, #3]
 8007b88:	2303      	movs	r3, #3
 8007b8a:	2204      	movs	r2, #4
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7ff fd77 	bl	8007680 <SCSI_SenseCode>

    return -1;
 8007b92:	f04f 33ff 	mov.w	r3, #4294967295
 8007b96:	e045      	b.n	8007c24 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bac:	441a      	add	r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bc8:	1ad2      	subs	r2, r2, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	1ad2      	subs	r2, r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d104      	bne.n	8007bf4 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007bea:	2100      	movs	r1, #0
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f7ff f97f 	bl	8006ef0 <MSC_BOT_SendCSW>
 8007bf2:	e016      	b.n	8007c22 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007c00:	fb02 f303 	mul.w	r3, r2, r3
 8007c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c08:	bf28      	it	cs
 8007c0a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007c0e:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f103 020c 	add.w	r2, r3, #12
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	2101      	movs	r1, #1
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f001 fcb4 	bl	800958a <USBD_LL_PrepareReceive>
  }

  return 0;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3714      	adds	r7, #20
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd90      	pop	{r4, r7, pc}

08007c2c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	4613      	mov	r3, r2
 8007c38:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d101      	bne.n	8007c44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007c40:	2302      	movs	r3, #2
 8007c42:	e01a      	b.n	8007c7a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d003      	beq.n	8007c56 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d003      	beq.n	8007c64 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	79fa      	ldrb	r2, [r7, #7]
 8007c70:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f001 fb0e 	bl	8009294 <USBD_LL_Init>

  return USBD_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b085      	sub	sp, #20
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d006      	beq.n	8007ca4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	683a      	ldr	r2, [r7, #0]
 8007c9a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	73fb      	strb	r3, [r7, #15]
 8007ca2:	e001      	b.n	8007ca8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bc80      	pop	{r7}
 8007cb2:	4770      	bx	lr

08007cb4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f001 fb39 	bl	8009334 <USBD_LL_Start>

  return USBD_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bc80      	pop	{r7}
 8007cde:	4770      	bx	lr

08007ce0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007cec:	2302      	movs	r3, #2
 8007cee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00c      	beq.n	8007d14 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	78fa      	ldrb	r2, [r7, #3]
 8007d04:	4611      	mov	r1, r2
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	4798      	blx	r3
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d101      	bne.n	8007d14 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b082      	sub	sp, #8
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	460b      	mov	r3, r1
 8007d28:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	78fa      	ldrb	r2, [r7, #3]
 8007d34:	4611      	mov	r1, r2
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	4798      	blx	r3

  return USBD_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d54:	6839      	ldr	r1, [r7, #0]
 8007d56:	4618      	mov	r0, r3
 8007d58:	f000 fed7 	bl	8008b0a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007d78:	f003 031f 	and.w	r3, r3, #31
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d016      	beq.n	8007dae <USBD_LL_SetupStage+0x6a>
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d81c      	bhi.n	8007dbe <USBD_LL_SetupStage+0x7a>
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d002      	beq.n	8007d8e <USBD_LL_SetupStage+0x4a>
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d008      	beq.n	8007d9e <USBD_LL_SetupStage+0x5a>
 8007d8c:	e017      	b.n	8007dbe <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d94:	4619      	mov	r1, r3
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f9ca 	bl	8008130 <USBD_StdDevReq>
      break;
 8007d9c:	e01a      	b.n	8007dd4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007da4:	4619      	mov	r1, r3
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fa2c 	bl	8008204 <USBD_StdItfReq>
      break;
 8007dac:	e012      	b.n	8007dd4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007db4:	4619      	mov	r1, r3
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fa6c 	bl	8008294 <USBD_StdEPReq>
      break;
 8007dbc:	e00a      	b.n	8007dd4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007dc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	4619      	mov	r1, r3
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f001 fb30 	bl	8009432 <USBD_LL_StallEP>
      break;
 8007dd2:	bf00      	nop
  }

  return USBD_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b086      	sub	sp, #24
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	60f8      	str	r0, [r7, #12]
 8007de6:	460b      	mov	r3, r1
 8007de8:	607a      	str	r2, [r7, #4]
 8007dea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007dec:	7afb      	ldrb	r3, [r7, #11]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d14b      	bne.n	8007e8a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007df8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e00:	2b03      	cmp	r3, #3
 8007e02:	d134      	bne.n	8007e6e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	68da      	ldr	r2, [r3, #12]
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d919      	bls.n	8007e44 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	68da      	ldr	r2, [r3, #12]
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	1ad2      	subs	r2, r2, r3
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	68da      	ldr	r2, [r3, #12]
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d203      	bcs.n	8007e32 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	e002      	b.n	8007e38 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	461a      	mov	r2, r3
 8007e3a:	6879      	ldr	r1, [r7, #4]
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f000 ff38 	bl	8008cb2 <USBD_CtlContinueRx>
 8007e42:	e038      	b.n	8007eb6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00a      	beq.n	8007e66 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	d105      	bne.n	8007e66 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f000 ff35 	bl	8008cd6 <USBD_CtlSendStatus>
 8007e6c:	e023      	b.n	8007eb6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e74:	2b05      	cmp	r3, #5
 8007e76:	d11e      	bne.n	8007eb6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007e80:	2100      	movs	r1, #0
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f001 fad5 	bl	8009432 <USBD_LL_StallEP>
 8007e88:	e015      	b.n	8007eb6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00d      	beq.n	8007eb2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e9c:	2b03      	cmp	r3, #3
 8007e9e:	d108      	bne.n	8007eb2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	7afa      	ldrb	r2, [r7, #11]
 8007eaa:	4611      	mov	r1, r2
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	4798      	blx	r3
 8007eb0:	e001      	b.n	8007eb6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007eb2:	2302      	movs	r3, #2
 8007eb4:	e000      	b.n	8007eb8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3718      	adds	r7, #24
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	607a      	str	r2, [r7, #4]
 8007ecc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007ece:	7afb      	ldrb	r3, [r7, #11]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d17f      	bne.n	8007fd4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	3314      	adds	r3, #20
 8007ed8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d15c      	bne.n	8007f9e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	68da      	ldr	r2, [r3, #12]
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d915      	bls.n	8007f1c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	68da      	ldr	r2, [r3, #12]
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	1ad2      	subs	r2, r2, r3
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	461a      	mov	r2, r3
 8007f06:	6879      	ldr	r1, [r7, #4]
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f000 fec0 	bl	8008c8e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f0e:	2300      	movs	r3, #0
 8007f10:	2200      	movs	r2, #0
 8007f12:	2100      	movs	r1, #0
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f001 fb38 	bl	800958a <USBD_LL_PrepareReceive>
 8007f1a:	e04e      	b.n	8007fba <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	697a      	ldr	r2, [r7, #20]
 8007f22:	6912      	ldr	r2, [r2, #16]
 8007f24:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f28:	fb02 f201 	mul.w	r2, r2, r1
 8007f2c:	1a9b      	subs	r3, r3, r2
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d11c      	bne.n	8007f6c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	689a      	ldr	r2, [r3, #8]
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d316      	bcc.n	8007f6c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	689a      	ldr	r2, [r3, #8]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d20f      	bcs.n	8007f6c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	2100      	movs	r1, #0
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 fe9c 	bl	8008c8e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f5e:	2300      	movs	r3, #0
 8007f60:	2200      	movs	r2, #0
 8007f62:	2100      	movs	r1, #0
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f001 fb10 	bl	800958a <USBD_LL_PrepareReceive>
 8007f6a:	e026      	b.n	8007fba <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00a      	beq.n	8007f8e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f7e:	2b03      	cmp	r3, #3
 8007f80:	d105      	bne.n	8007f8e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007f8e:	2180      	movs	r1, #128	; 0x80
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f001 fa4e 	bl	8009432 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f000 feb0 	bl	8008cfc <USBD_CtlReceiveStatus>
 8007f9c:	e00d      	b.n	8007fba <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fa4:	2b04      	cmp	r3, #4
 8007fa6:	d004      	beq.n	8007fb2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d103      	bne.n	8007fba <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007fb2:	2180      	movs	r1, #128	; 0x80
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f001 fa3c 	bl	8009432 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d11d      	bne.n	8008000 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f7ff fe81 	bl	8007ccc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007fd2:	e015      	b.n	8008000 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fda:	695b      	ldr	r3, [r3, #20]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00d      	beq.n	8007ffc <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007fe6:	2b03      	cmp	r3, #3
 8007fe8:	d108      	bne.n	8007ffc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	7afa      	ldrb	r2, [r7, #11]
 8007ff4:	4611      	mov	r1, r2
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	4798      	blx	r3
 8007ffa:	e001      	b.n	8008000 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	e000      	b.n	8008002 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3718      	adds	r7, #24
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b082      	sub	sp, #8
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008012:	2340      	movs	r3, #64	; 0x40
 8008014:	2200      	movs	r2, #0
 8008016:	2100      	movs	r1, #0
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f001 f9a6 	bl	800936a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2240      	movs	r2, #64	; 0x40
 800802a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800802e:	2340      	movs	r3, #64	; 0x40
 8008030:	2200      	movs	r2, #0
 8008032:	2180      	movs	r1, #128	; 0x80
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f001 f998 	bl	800936a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2240      	movs	r2, #64	; 0x40
 8008044:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800806a:	2b00      	cmp	r3, #0
 800806c:	d009      	beq.n	8008082 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	6852      	ldr	r2, [r2, #4]
 800807a:	b2d2      	uxtb	r2, r2
 800807c:	4611      	mov	r1, r2
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	4798      	blx	r3
  }

  return USBD_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	460b      	mov	r3, r1
 8008096:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	78fa      	ldrb	r2, [r7, #3]
 800809c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bc80      	pop	{r7}
 80080a8:	4770      	bx	lr

080080aa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b083      	sub	sp, #12
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2204      	movs	r2, #4
 80080c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bc80      	pop	{r7}
 80080d0:	4770      	bx	lr

080080d2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080d2:	b480      	push	{r7}
 80080d4:	b083      	sub	sp, #12
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080e0:	2b04      	cmp	r3, #4
 80080e2:	d105      	bne.n	80080f0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bc80      	pop	{r7}
 80080fa:	4770      	bx	lr

080080fc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800810a:	2b03      	cmp	r3, #3
 800810c:	d10b      	bne.n	8008126 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008114:	69db      	ldr	r3, [r3, #28]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d005      	beq.n	8008126 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008146:	2b40      	cmp	r3, #64	; 0x40
 8008148:	d005      	beq.n	8008156 <USBD_StdDevReq+0x26>
 800814a:	2b40      	cmp	r3, #64	; 0x40
 800814c:	d84f      	bhi.n	80081ee <USBD_StdDevReq+0xbe>
 800814e:	2b00      	cmp	r3, #0
 8008150:	d009      	beq.n	8008166 <USBD_StdDevReq+0x36>
 8008152:	2b20      	cmp	r3, #32
 8008154:	d14b      	bne.n	80081ee <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	6839      	ldr	r1, [r7, #0]
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	4798      	blx	r3
      break;
 8008164:	e048      	b.n	80081f8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	785b      	ldrb	r3, [r3, #1]
 800816a:	2b09      	cmp	r3, #9
 800816c:	d839      	bhi.n	80081e2 <USBD_StdDevReq+0xb2>
 800816e:	a201      	add	r2, pc, #4	; (adr r2, 8008174 <USBD_StdDevReq+0x44>)
 8008170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008174:	080081c5 	.word	0x080081c5
 8008178:	080081d9 	.word	0x080081d9
 800817c:	080081e3 	.word	0x080081e3
 8008180:	080081cf 	.word	0x080081cf
 8008184:	080081e3 	.word	0x080081e3
 8008188:	080081a7 	.word	0x080081a7
 800818c:	0800819d 	.word	0x0800819d
 8008190:	080081e3 	.word	0x080081e3
 8008194:	080081bb 	.word	0x080081bb
 8008198:	080081b1 	.word	0x080081b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800819c:	6839      	ldr	r1, [r7, #0]
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f9dc 	bl	800855c <USBD_GetDescriptor>
          break;
 80081a4:	e022      	b.n	80081ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80081a6:	6839      	ldr	r1, [r7, #0]
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 fb3f 	bl	800882c <USBD_SetAddress>
          break;
 80081ae:	e01d      	b.n	80081ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fb7e 	bl	80088b4 <USBD_SetConfig>
          break;
 80081b8:	e018      	b.n	80081ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fc07 	bl	80089d0 <USBD_GetConfig>
          break;
 80081c2:	e013      	b.n	80081ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fc37 	bl	8008a3a <USBD_GetStatus>
          break;
 80081cc:	e00e      	b.n	80081ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80081ce:	6839      	ldr	r1, [r7, #0]
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fc65 	bl	8008aa0 <USBD_SetFeature>
          break;
 80081d6:	e009      	b.n	80081ec <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fc74 	bl	8008ac8 <USBD_ClrFeature>
          break;
 80081e0:	e004      	b.n	80081ec <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80081e2:	6839      	ldr	r1, [r7, #0]
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fccc 	bl	8008b82 <USBD_CtlError>
          break;
 80081ea:	bf00      	nop
      }
      break;
 80081ec:	e004      	b.n	80081f8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80081ee:	6839      	ldr	r1, [r7, #0]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fcc6 	bl	8008b82 <USBD_CtlError>
      break;
 80081f6:	bf00      	nop
  }

  return ret;
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop

08008204 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800820e:	2300      	movs	r3, #0
 8008210:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800821a:	2b40      	cmp	r3, #64	; 0x40
 800821c:	d005      	beq.n	800822a <USBD_StdItfReq+0x26>
 800821e:	2b40      	cmp	r3, #64	; 0x40
 8008220:	d82e      	bhi.n	8008280 <USBD_StdItfReq+0x7c>
 8008222:	2b00      	cmp	r3, #0
 8008224:	d001      	beq.n	800822a <USBD_StdItfReq+0x26>
 8008226:	2b20      	cmp	r3, #32
 8008228:	d12a      	bne.n	8008280 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008230:	3b01      	subs	r3, #1
 8008232:	2b02      	cmp	r3, #2
 8008234:	d81d      	bhi.n	8008272 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	889b      	ldrh	r3, [r3, #4]
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b01      	cmp	r3, #1
 800823e:	d813      	bhi.n	8008268 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	4798      	blx	r3
 800824e:	4603      	mov	r3, r0
 8008250:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	88db      	ldrh	r3, [r3, #6]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d110      	bne.n	800827c <USBD_StdItfReq+0x78>
 800825a:	7bfb      	ldrb	r3, [r7, #15]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10d      	bne.n	800827c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fd38 	bl	8008cd6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008266:	e009      	b.n	800827c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008268:	6839      	ldr	r1, [r7, #0]
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fc89 	bl	8008b82 <USBD_CtlError>
          break;
 8008270:	e004      	b.n	800827c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008272:	6839      	ldr	r1, [r7, #0]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 fc84 	bl	8008b82 <USBD_CtlError>
          break;
 800827a:	e000      	b.n	800827e <USBD_StdItfReq+0x7a>
          break;
 800827c:	bf00      	nop
      }
      break;
 800827e:	e004      	b.n	800828a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fc7d 	bl	8008b82 <USBD_CtlError>
      break;
 8008288:	bf00      	nop
  }

  return USBD_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	889b      	ldrh	r3, [r3, #4]
 80082a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082b0:	2b40      	cmp	r3, #64	; 0x40
 80082b2:	d007      	beq.n	80082c4 <USBD_StdEPReq+0x30>
 80082b4:	2b40      	cmp	r3, #64	; 0x40
 80082b6:	f200 8146 	bhi.w	8008546 <USBD_StdEPReq+0x2b2>
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00a      	beq.n	80082d4 <USBD_StdEPReq+0x40>
 80082be:	2b20      	cmp	r3, #32
 80082c0:	f040 8141 	bne.w	8008546 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	6839      	ldr	r1, [r7, #0]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	4798      	blx	r3
      break;
 80082d2:	e13d      	b.n	8008550 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082dc:	2b20      	cmp	r3, #32
 80082de:	d10a      	bne.n	80082f6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	6839      	ldr	r1, [r7, #0]
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	4798      	blx	r3
 80082ee:	4603      	mov	r3, r0
 80082f0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
 80082f4:	e12d      	b.n	8008552 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	785b      	ldrb	r3, [r3, #1]
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d007      	beq.n	800830e <USBD_StdEPReq+0x7a>
 80082fe:	2b03      	cmp	r3, #3
 8008300:	f300 811b 	bgt.w	800853a <USBD_StdEPReq+0x2a6>
 8008304:	2b00      	cmp	r3, #0
 8008306:	d072      	beq.n	80083ee <USBD_StdEPReq+0x15a>
 8008308:	2b01      	cmp	r3, #1
 800830a:	d03a      	beq.n	8008382 <USBD_StdEPReq+0xee>
 800830c:	e115      	b.n	800853a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008314:	2b02      	cmp	r3, #2
 8008316:	d002      	beq.n	800831e <USBD_StdEPReq+0x8a>
 8008318:	2b03      	cmp	r3, #3
 800831a:	d015      	beq.n	8008348 <USBD_StdEPReq+0xb4>
 800831c:	e02b      	b.n	8008376 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800831e:	7bbb      	ldrb	r3, [r7, #14]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00c      	beq.n	800833e <USBD_StdEPReq+0xaa>
 8008324:	7bbb      	ldrb	r3, [r7, #14]
 8008326:	2b80      	cmp	r3, #128	; 0x80
 8008328:	d009      	beq.n	800833e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800832a:	7bbb      	ldrb	r3, [r7, #14]
 800832c:	4619      	mov	r1, r3
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f001 f87f 	bl	8009432 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008334:	2180      	movs	r1, #128	; 0x80
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f001 f87b 	bl	8009432 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800833c:	e020      	b.n	8008380 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fc1e 	bl	8008b82 <USBD_CtlError>
              break;
 8008346:	e01b      	b.n	8008380 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	885b      	ldrh	r3, [r3, #2]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10e      	bne.n	800836e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008350:	7bbb      	ldrb	r3, [r7, #14]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00b      	beq.n	800836e <USBD_StdEPReq+0xda>
 8008356:	7bbb      	ldrb	r3, [r7, #14]
 8008358:	2b80      	cmp	r3, #128	; 0x80
 800835a:	d008      	beq.n	800836e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	88db      	ldrh	r3, [r3, #6]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d104      	bne.n	800836e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008364:	7bbb      	ldrb	r3, [r7, #14]
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f001 f862 	bl	8009432 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fcb1 	bl	8008cd6 <USBD_CtlSendStatus>

              break;
 8008374:	e004      	b.n	8008380 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008376:	6839      	ldr	r1, [r7, #0]
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 fc02 	bl	8008b82 <USBD_CtlError>
              break;
 800837e:	bf00      	nop
          }
          break;
 8008380:	e0e0      	b.n	8008544 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008388:	2b02      	cmp	r3, #2
 800838a:	d002      	beq.n	8008392 <USBD_StdEPReq+0xfe>
 800838c:	2b03      	cmp	r3, #3
 800838e:	d015      	beq.n	80083bc <USBD_StdEPReq+0x128>
 8008390:	e026      	b.n	80083e0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008392:	7bbb      	ldrb	r3, [r7, #14]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00c      	beq.n	80083b2 <USBD_StdEPReq+0x11e>
 8008398:	7bbb      	ldrb	r3, [r7, #14]
 800839a:	2b80      	cmp	r3, #128	; 0x80
 800839c:	d009      	beq.n	80083b2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800839e:	7bbb      	ldrb	r3, [r7, #14]
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f001 f845 	bl	8009432 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80083a8:	2180      	movs	r1, #128	; 0x80
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f001 f841 	bl	8009432 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083b0:	e01c      	b.n	80083ec <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80083b2:	6839      	ldr	r1, [r7, #0]
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fbe4 	bl	8008b82 <USBD_CtlError>
              break;
 80083ba:	e017      	b.n	80083ec <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	885b      	ldrh	r3, [r3, #2]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d112      	bne.n	80083ea <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80083c4:	7bbb      	ldrb	r3, [r7, #14]
 80083c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d004      	beq.n	80083d8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80083ce:	7bbb      	ldrb	r3, [r7, #14]
 80083d0:	4619      	mov	r1, r3
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f001 f84c 	bl	8009470 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fc7c 	bl	8008cd6 <USBD_CtlSendStatus>
              }
              break;
 80083de:	e004      	b.n	80083ea <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fbcd 	bl	8008b82 <USBD_CtlError>
              break;
 80083e8:	e000      	b.n	80083ec <USBD_StdEPReq+0x158>
              break;
 80083ea:	bf00      	nop
          }
          break;
 80083ec:	e0aa      	b.n	8008544 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	d002      	beq.n	80083fe <USBD_StdEPReq+0x16a>
 80083f8:	2b03      	cmp	r3, #3
 80083fa:	d032      	beq.n	8008462 <USBD_StdEPReq+0x1ce>
 80083fc:	e097      	b.n	800852e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083fe:	7bbb      	ldrb	r3, [r7, #14]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d007      	beq.n	8008414 <USBD_StdEPReq+0x180>
 8008404:	7bbb      	ldrb	r3, [r7, #14]
 8008406:	2b80      	cmp	r3, #128	; 0x80
 8008408:	d004      	beq.n	8008414 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800840a:	6839      	ldr	r1, [r7, #0]
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fbb8 	bl	8008b82 <USBD_CtlError>
                break;
 8008412:	e091      	b.n	8008538 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008414:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008418:	2b00      	cmp	r3, #0
 800841a:	da0b      	bge.n	8008434 <USBD_StdEPReq+0x1a0>
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008422:	4613      	mov	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4413      	add	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	3310      	adds	r3, #16
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	4413      	add	r3, r2
 8008430:	3304      	adds	r3, #4
 8008432:	e00b      	b.n	800844c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008434:	7bbb      	ldrb	r3, [r7, #14]
 8008436:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800843a:	4613      	mov	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	4413      	add	r3, r2
 800844a:	3304      	adds	r3, #4
 800844c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	2200      	movs	r2, #0
 8008452:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	2202      	movs	r2, #2
 8008458:	4619      	mov	r1, r3
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fbfb 	bl	8008c56 <USBD_CtlSendData>
              break;
 8008460:	e06a      	b.n	8008538 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008462:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008466:	2b00      	cmp	r3, #0
 8008468:	da11      	bge.n	800848e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800846a:	7bbb      	ldrb	r3, [r7, #14]
 800846c:	f003 020f 	and.w	r2, r3, #15
 8008470:	6879      	ldr	r1, [r7, #4]
 8008472:	4613      	mov	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4413      	add	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	440b      	add	r3, r1
 800847c:	3318      	adds	r3, #24
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d117      	bne.n	80084b4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008484:	6839      	ldr	r1, [r7, #0]
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fb7b 	bl	8008b82 <USBD_CtlError>
                  break;
 800848c:	e054      	b.n	8008538 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800848e:	7bbb      	ldrb	r3, [r7, #14]
 8008490:	f003 020f 	and.w	r2, r3, #15
 8008494:	6879      	ldr	r1, [r7, #4]
 8008496:	4613      	mov	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	440b      	add	r3, r1
 80084a0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d104      	bne.n	80084b4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80084aa:	6839      	ldr	r1, [r7, #0]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fb68 	bl	8008b82 <USBD_CtlError>
                  break;
 80084b2:	e041      	b.n	8008538 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	da0b      	bge.n	80084d4 <USBD_StdEPReq+0x240>
 80084bc:	7bbb      	ldrb	r3, [r7, #14]
 80084be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084c2:	4613      	mov	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4413      	add	r3, r2
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	3310      	adds	r3, #16
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	4413      	add	r3, r2
 80084d0:	3304      	adds	r3, #4
 80084d2:	e00b      	b.n	80084ec <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084d4:	7bbb      	ldrb	r3, [r7, #14]
 80084d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084da:	4613      	mov	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	4413      	add	r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	4413      	add	r3, r2
 80084ea:	3304      	adds	r3, #4
 80084ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80084ee:	7bbb      	ldrb	r3, [r7, #14]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d002      	beq.n	80084fa <USBD_StdEPReq+0x266>
 80084f4:	7bbb      	ldrb	r3, [r7, #14]
 80084f6:	2b80      	cmp	r3, #128	; 0x80
 80084f8:	d103      	bne.n	8008502 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	2200      	movs	r2, #0
 80084fe:	601a      	str	r2, [r3, #0]
 8008500:	e00e      	b.n	8008520 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008502:	7bbb      	ldrb	r3, [r7, #14]
 8008504:	4619      	mov	r1, r3
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 ffd1 	bl	80094ae <USBD_LL_IsStallEP>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d003      	beq.n	800851a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	2201      	movs	r2, #1
 8008516:	601a      	str	r2, [r3, #0]
 8008518:	e002      	b.n	8008520 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	2200      	movs	r2, #0
 800851e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	2202      	movs	r2, #2
 8008524:	4619      	mov	r1, r3
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fb95 	bl	8008c56 <USBD_CtlSendData>
              break;
 800852c:	e004      	b.n	8008538 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800852e:	6839      	ldr	r1, [r7, #0]
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 fb26 	bl	8008b82 <USBD_CtlError>
              break;
 8008536:	bf00      	nop
          }
          break;
 8008538:	e004      	b.n	8008544 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 fb20 	bl	8008b82 <USBD_CtlError>
          break;
 8008542:	bf00      	nop
      }
      break;
 8008544:	e004      	b.n	8008550 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fb1a 	bl	8008b82 <USBD_CtlError>
      break;
 800854e:	bf00      	nop
  }

  return ret;
 8008550:	7bfb      	ldrb	r3, [r7, #15]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
	...

0800855c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008566:	2300      	movs	r3, #0
 8008568:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800856a:	2300      	movs	r3, #0
 800856c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800856e:	2300      	movs	r3, #0
 8008570:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	885b      	ldrh	r3, [r3, #2]
 8008576:	0a1b      	lsrs	r3, r3, #8
 8008578:	b29b      	uxth	r3, r3
 800857a:	3b01      	subs	r3, #1
 800857c:	2b06      	cmp	r3, #6
 800857e:	f200 8128 	bhi.w	80087d2 <USBD_GetDescriptor+0x276>
 8008582:	a201      	add	r2, pc, #4	; (adr r2, 8008588 <USBD_GetDescriptor+0x2c>)
 8008584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008588:	080085a5 	.word	0x080085a5
 800858c:	080085bd 	.word	0x080085bd
 8008590:	080085fd 	.word	0x080085fd
 8008594:	080087d3 	.word	0x080087d3
 8008598:	080087d3 	.word	0x080087d3
 800859c:	08008773 	.word	0x08008773
 80085a0:	0800879f 	.word	0x0800879f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	7c12      	ldrb	r2, [r2, #16]
 80085b0:	f107 0108 	add.w	r1, r7, #8
 80085b4:	4610      	mov	r0, r2
 80085b6:	4798      	blx	r3
 80085b8:	60f8      	str	r0, [r7, #12]
      break;
 80085ba:	e112      	b.n	80087e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	7c1b      	ldrb	r3, [r3, #16]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10d      	bne.n	80085e0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085cc:	f107 0208 	add.w	r2, r7, #8
 80085d0:	4610      	mov	r0, r2
 80085d2:	4798      	blx	r3
 80085d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	3301      	adds	r3, #1
 80085da:	2202      	movs	r2, #2
 80085dc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80085de:	e100      	b.n	80087e2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e8:	f107 0208 	add.w	r2, r7, #8
 80085ec:	4610      	mov	r0, r2
 80085ee:	4798      	blx	r3
 80085f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	3301      	adds	r3, #1
 80085f6:	2202      	movs	r2, #2
 80085f8:	701a      	strb	r2, [r3, #0]
      break;
 80085fa:	e0f2      	b.n	80087e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	885b      	ldrh	r3, [r3, #2]
 8008600:	b2db      	uxtb	r3, r3
 8008602:	2b05      	cmp	r3, #5
 8008604:	f200 80ac 	bhi.w	8008760 <USBD_GetDescriptor+0x204>
 8008608:	a201      	add	r2, pc, #4	; (adr r2, 8008610 <USBD_GetDescriptor+0xb4>)
 800860a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860e:	bf00      	nop
 8008610:	08008629 	.word	0x08008629
 8008614:	0800865d 	.word	0x0800865d
 8008618:	08008691 	.word	0x08008691
 800861c:	080086c5 	.word	0x080086c5
 8008620:	080086f9 	.word	0x080086f9
 8008624:	0800872d 	.word	0x0800872d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00b      	beq.n	800864c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	7c12      	ldrb	r2, [r2, #16]
 8008640:	f107 0108 	add.w	r1, r7, #8
 8008644:	4610      	mov	r0, r2
 8008646:	4798      	blx	r3
 8008648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800864a:	e091      	b.n	8008770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fa97 	bl	8008b82 <USBD_CtlError>
            err++;
 8008654:	7afb      	ldrb	r3, [r7, #11]
 8008656:	3301      	adds	r3, #1
 8008658:	72fb      	strb	r3, [r7, #11]
          break;
 800865a:	e089      	b.n	8008770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00b      	beq.n	8008680 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	7c12      	ldrb	r2, [r2, #16]
 8008674:	f107 0108 	add.w	r1, r7, #8
 8008678:	4610      	mov	r0, r2
 800867a:	4798      	blx	r3
 800867c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800867e:	e077      	b.n	8008770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008680:	6839      	ldr	r1, [r7, #0]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fa7d 	bl	8008b82 <USBD_CtlError>
            err++;
 8008688:	7afb      	ldrb	r3, [r7, #11]
 800868a:	3301      	adds	r3, #1
 800868c:	72fb      	strb	r3, [r7, #11]
          break;
 800868e:	e06f      	b.n	8008770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d00b      	beq.n	80086b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	7c12      	ldrb	r2, [r2, #16]
 80086a8:	f107 0108 	add.w	r1, r7, #8
 80086ac:	4610      	mov	r0, r2
 80086ae:	4798      	blx	r3
 80086b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086b2:	e05d      	b.n	8008770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086b4:	6839      	ldr	r1, [r7, #0]
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fa63 	bl	8008b82 <USBD_CtlError>
            err++;
 80086bc:	7afb      	ldrb	r3, [r7, #11]
 80086be:	3301      	adds	r3, #1
 80086c0:	72fb      	strb	r3, [r7, #11]
          break;
 80086c2:	e055      	b.n	8008770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00b      	beq.n	80086e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	7c12      	ldrb	r2, [r2, #16]
 80086dc:	f107 0108 	add.w	r1, r7, #8
 80086e0:	4610      	mov	r0, r2
 80086e2:	4798      	blx	r3
 80086e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086e6:	e043      	b.n	8008770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086e8:	6839      	ldr	r1, [r7, #0]
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fa49 	bl	8008b82 <USBD_CtlError>
            err++;
 80086f0:	7afb      	ldrb	r3, [r7, #11]
 80086f2:	3301      	adds	r3, #1
 80086f4:	72fb      	strb	r3, [r7, #11]
          break;
 80086f6:	e03b      	b.n	8008770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00b      	beq.n	800871c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800870a:	695b      	ldr	r3, [r3, #20]
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	7c12      	ldrb	r2, [r2, #16]
 8008710:	f107 0108 	add.w	r1, r7, #8
 8008714:	4610      	mov	r0, r2
 8008716:	4798      	blx	r3
 8008718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800871a:	e029      	b.n	8008770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fa2f 	bl	8008b82 <USBD_CtlError>
            err++;
 8008724:	7afb      	ldrb	r3, [r7, #11]
 8008726:	3301      	adds	r3, #1
 8008728:	72fb      	strb	r3, [r7, #11]
          break;
 800872a:	e021      	b.n	8008770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00b      	beq.n	8008750 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800873e:	699b      	ldr	r3, [r3, #24]
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	7c12      	ldrb	r2, [r2, #16]
 8008744:	f107 0108 	add.w	r1, r7, #8
 8008748:	4610      	mov	r0, r2
 800874a:	4798      	blx	r3
 800874c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800874e:	e00f      	b.n	8008770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008750:	6839      	ldr	r1, [r7, #0]
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 fa15 	bl	8008b82 <USBD_CtlError>
            err++;
 8008758:	7afb      	ldrb	r3, [r7, #11]
 800875a:	3301      	adds	r3, #1
 800875c:	72fb      	strb	r3, [r7, #11]
          break;
 800875e:	e007      	b.n	8008770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fa0d 	bl	8008b82 <USBD_CtlError>
          err++;
 8008768:	7afb      	ldrb	r3, [r7, #11]
 800876a:	3301      	adds	r3, #1
 800876c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800876e:	e038      	b.n	80087e2 <USBD_GetDescriptor+0x286>
 8008770:	e037      	b.n	80087e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	7c1b      	ldrb	r3, [r3, #16]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d109      	bne.n	800878e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008782:	f107 0208 	add.w	r2, r7, #8
 8008786:	4610      	mov	r0, r2
 8008788:	4798      	blx	r3
 800878a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800878c:	e029      	b.n	80087e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f9f6 	bl	8008b82 <USBD_CtlError>
        err++;
 8008796:	7afb      	ldrb	r3, [r7, #11]
 8008798:	3301      	adds	r3, #1
 800879a:	72fb      	strb	r3, [r7, #11]
      break;
 800879c:	e021      	b.n	80087e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	7c1b      	ldrb	r3, [r3, #16]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10d      	bne.n	80087c2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ae:	f107 0208 	add.w	r2, r7, #8
 80087b2:	4610      	mov	r0, r2
 80087b4:	4798      	blx	r3
 80087b6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	3301      	adds	r3, #1
 80087bc:	2207      	movs	r2, #7
 80087be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087c0:	e00f      	b.n	80087e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80087c2:	6839      	ldr	r1, [r7, #0]
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 f9dc 	bl	8008b82 <USBD_CtlError>
        err++;
 80087ca:	7afb      	ldrb	r3, [r7, #11]
 80087cc:	3301      	adds	r3, #1
 80087ce:	72fb      	strb	r3, [r7, #11]
      break;
 80087d0:	e007      	b.n	80087e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80087d2:	6839      	ldr	r1, [r7, #0]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 f9d4 	bl	8008b82 <USBD_CtlError>
      err++;
 80087da:	7afb      	ldrb	r3, [r7, #11]
 80087dc:	3301      	adds	r3, #1
 80087de:	72fb      	strb	r3, [r7, #11]
      break;
 80087e0:	bf00      	nop
  }

  if (err != 0U)
 80087e2:	7afb      	ldrb	r3, [r7, #11]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d11c      	bne.n	8008822 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80087e8:	893b      	ldrh	r3, [r7, #8]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d011      	beq.n	8008812 <USBD_GetDescriptor+0x2b6>
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	88db      	ldrh	r3, [r3, #6]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00d      	beq.n	8008812 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	88da      	ldrh	r2, [r3, #6]
 80087fa:	893b      	ldrh	r3, [r7, #8]
 80087fc:	4293      	cmp	r3, r2
 80087fe:	bf28      	it	cs
 8008800:	4613      	movcs	r3, r2
 8008802:	b29b      	uxth	r3, r3
 8008804:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008806:	893b      	ldrh	r3, [r7, #8]
 8008808:	461a      	mov	r2, r3
 800880a:	68f9      	ldr	r1, [r7, #12]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fa22 	bl	8008c56 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	88db      	ldrh	r3, [r3, #6]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d104      	bne.n	8008824 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 fa5b 	bl	8008cd6 <USBD_CtlSendStatus>
 8008820:	e000      	b.n	8008824 <USBD_GetDescriptor+0x2c8>
    return;
 8008822:	bf00      	nop
    }
  }
}
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop

0800882c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	889b      	ldrh	r3, [r3, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d130      	bne.n	80088a0 <USBD_SetAddress+0x74>
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	88db      	ldrh	r3, [r3, #6]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d12c      	bne.n	80088a0 <USBD_SetAddress+0x74>
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	885b      	ldrh	r3, [r3, #2]
 800884a:	2b7f      	cmp	r3, #127	; 0x7f
 800884c:	d828      	bhi.n	80088a0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	885b      	ldrh	r3, [r3, #2]
 8008852:	b2db      	uxtb	r3, r3
 8008854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008858:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008860:	2b03      	cmp	r3, #3
 8008862:	d104      	bne.n	800886e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008864:	6839      	ldr	r1, [r7, #0]
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f98b 	bl	8008b82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800886c:	e01d      	b.n	80088aa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	7bfa      	ldrb	r2, [r7, #15]
 8008872:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008876:	7bfb      	ldrb	r3, [r7, #15]
 8008878:	4619      	mov	r1, r3
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fe43 	bl	8009506 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 fa28 	bl	8008cd6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008886:	7bfb      	ldrb	r3, [r7, #15]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d004      	beq.n	8008896 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2202      	movs	r2, #2
 8008890:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008894:	e009      	b.n	80088aa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800889e:	e004      	b.n	80088aa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80088a0:	6839      	ldr	r1, [r7, #0]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f96d 	bl	8008b82 <USBD_CtlError>
  }
}
 80088a8:	bf00      	nop
 80088aa:	bf00      	nop
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
	...

080088b4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	885b      	ldrh	r3, [r3, #2]
 80088c2:	b2da      	uxtb	r2, r3
 80088c4:	4b41      	ldr	r3, [pc, #260]	; (80089cc <USBD_SetConfig+0x118>)
 80088c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80088c8:	4b40      	ldr	r3, [pc, #256]	; (80089cc <USBD_SetConfig+0x118>)
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d904      	bls.n	80088da <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80088d0:	6839      	ldr	r1, [r7, #0]
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f955 	bl	8008b82 <USBD_CtlError>
 80088d8:	e075      	b.n	80089c6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	d002      	beq.n	80088ea <USBD_SetConfig+0x36>
 80088e4:	2b03      	cmp	r3, #3
 80088e6:	d023      	beq.n	8008930 <USBD_SetConfig+0x7c>
 80088e8:	e062      	b.n	80089b0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80088ea:	4b38      	ldr	r3, [pc, #224]	; (80089cc <USBD_SetConfig+0x118>)
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d01a      	beq.n	8008928 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80088f2:	4b36      	ldr	r3, [pc, #216]	; (80089cc <USBD_SetConfig+0x118>)
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	461a      	mov	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2203      	movs	r2, #3
 8008900:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008904:	4b31      	ldr	r3, [pc, #196]	; (80089cc <USBD_SetConfig+0x118>)
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	4619      	mov	r1, r3
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7ff f9e8 	bl	8007ce0 <USBD_SetClassConfig>
 8008910:	4603      	mov	r3, r0
 8008912:	2b02      	cmp	r3, #2
 8008914:	d104      	bne.n	8008920 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008916:	6839      	ldr	r1, [r7, #0]
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 f932 	bl	8008b82 <USBD_CtlError>
            return;
 800891e:	e052      	b.n	80089c6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f9d8 	bl	8008cd6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008926:	e04e      	b.n	80089c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f9d4 	bl	8008cd6 <USBD_CtlSendStatus>
        break;
 800892e:	e04a      	b.n	80089c6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008930:	4b26      	ldr	r3, [pc, #152]	; (80089cc <USBD_SetConfig+0x118>)
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d112      	bne.n	800895e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2202      	movs	r2, #2
 800893c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008940:	4b22      	ldr	r3, [pc, #136]	; (80089cc <USBD_SetConfig+0x118>)
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	461a      	mov	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800894a:	4b20      	ldr	r3, [pc, #128]	; (80089cc <USBD_SetConfig+0x118>)
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	4619      	mov	r1, r3
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f7ff f9e4 	bl	8007d1e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f9bd 	bl	8008cd6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800895c:	e033      	b.n	80089c6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800895e:	4b1b      	ldr	r3, [pc, #108]	; (80089cc <USBD_SetConfig+0x118>)
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	461a      	mov	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	429a      	cmp	r2, r3
 800896a:	d01d      	beq.n	80089a8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	b2db      	uxtb	r3, r3
 8008972:	4619      	mov	r1, r3
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f7ff f9d2 	bl	8007d1e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800897a:	4b14      	ldr	r3, [pc, #80]	; (80089cc <USBD_SetConfig+0x118>)
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	461a      	mov	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008984:	4b11      	ldr	r3, [pc, #68]	; (80089cc <USBD_SetConfig+0x118>)
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7ff f9a8 	bl	8007ce0 <USBD_SetClassConfig>
 8008990:	4603      	mov	r3, r0
 8008992:	2b02      	cmp	r3, #2
 8008994:	d104      	bne.n	80089a0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008996:	6839      	ldr	r1, [r7, #0]
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 f8f2 	bl	8008b82 <USBD_CtlError>
            return;
 800899e:	e012      	b.n	80089c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 f998 	bl	8008cd6 <USBD_CtlSendStatus>
        break;
 80089a6:	e00e      	b.n	80089c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f994 	bl	8008cd6 <USBD_CtlSendStatus>
        break;
 80089ae:	e00a      	b.n	80089c6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f8e5 	bl	8008b82 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80089b8:	4b04      	ldr	r3, [pc, #16]	; (80089cc <USBD_SetConfig+0x118>)
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f7ff f9ad 	bl	8007d1e <USBD_ClrClassConfig>
        break;
 80089c4:	bf00      	nop
    }
  }
}
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	20000150 	.word	0x20000150

080089d0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	88db      	ldrh	r3, [r3, #6]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d004      	beq.n	80089ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 f8cc 	bl	8008b82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80089ea:	e022      	b.n	8008a32 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	dc02      	bgt.n	80089fc <USBD_GetConfig+0x2c>
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	dc03      	bgt.n	8008a02 <USBD_GetConfig+0x32>
 80089fa:	e015      	b.n	8008a28 <USBD_GetConfig+0x58>
 80089fc:	2b03      	cmp	r3, #3
 80089fe:	d00b      	beq.n	8008a18 <USBD_GetConfig+0x48>
 8008a00:	e012      	b.n	8008a28 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	3308      	adds	r3, #8
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	4619      	mov	r1, r3
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 f920 	bl	8008c56 <USBD_CtlSendData>
        break;
 8008a16:	e00c      	b.n	8008a32 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	3304      	adds	r3, #4
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	4619      	mov	r1, r3
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f918 	bl	8008c56 <USBD_CtlSendData>
        break;
 8008a26:	e004      	b.n	8008a32 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f8a9 	bl	8008b82 <USBD_CtlError>
        break;
 8008a30:	bf00      	nop
}
 8008a32:	bf00      	nop
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b082      	sub	sp, #8
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
 8008a42:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d81e      	bhi.n	8008a8e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	88db      	ldrh	r3, [r3, #6]
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d004      	beq.n	8008a62 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f891 	bl	8008b82 <USBD_CtlError>
        break;
 8008a60:	e01a      	b.n	8008a98 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d005      	beq.n	8008a7e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	f043 0202 	orr.w	r2, r3, #2
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	330c      	adds	r3, #12
 8008a82:	2202      	movs	r2, #2
 8008a84:	4619      	mov	r1, r3
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f8e5 	bl	8008c56 <USBD_CtlSendData>
      break;
 8008a8c:	e004      	b.n	8008a98 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f876 	bl	8008b82 <USBD_CtlError>
      break;
 8008a96:	bf00      	nop
  }
}
 8008a98:	bf00      	nop
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	885b      	ldrh	r3, [r3, #2]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d106      	bne.n	8008ac0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f90b 	bl	8008cd6 <USBD_CtlSendStatus>
  }
}
 8008ac0:	bf00      	nop
 8008ac2:	3708      	adds	r7, #8
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d80b      	bhi.n	8008af6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	885b      	ldrh	r3, [r3, #2]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d10c      	bne.n	8008b00 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f8f1 	bl	8008cd6 <USBD_CtlSendStatus>
      }
      break;
 8008af4:	e004      	b.n	8008b00 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 f842 	bl	8008b82 <USBD_CtlError>
      break;
 8008afe:	e000      	b.n	8008b02 <USBD_ClrFeature+0x3a>
      break;
 8008b00:	bf00      	nop
  }
}
 8008b02:	bf00      	nop
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b0a:	b480      	push	{r7}
 8008b0c:	b083      	sub	sp, #12
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	781a      	ldrb	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	785a      	ldrb	r2, [r3, #1]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	3302      	adds	r3, #2
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	3303      	adds	r3, #3
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	021b      	lsls	r3, r3, #8
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	4413      	add	r3, r2
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	3304      	adds	r3, #4
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	3305      	adds	r3, #5
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	021b      	lsls	r3, r3, #8
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	4413      	add	r3, r2
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	3306      	adds	r3, #6
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	3307      	adds	r3, #7
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	021b      	lsls	r3, r3, #8
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	4413      	add	r3, r2
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	80da      	strh	r2, [r3, #6]

}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bc80      	pop	{r7}
 8008b80:	4770      	bx	lr

08008b82 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b082      	sub	sp, #8
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
 8008b8a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008b8c:	2180      	movs	r1, #128	; 0x80
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fc4f 	bl	8009432 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008b94:	2100      	movs	r1, #0
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fc4b 	bl	8009432 <USBD_LL_StallEP>
}
 8008b9c:	bf00      	nop
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d032      	beq.n	8008c20 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f000 f834 	bl	8008c28 <USBD_GetLen>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	005b      	lsls	r3, r3, #1
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008bce:	7dfb      	ldrb	r3, [r7, #23]
 8008bd0:	1c5a      	adds	r2, r3, #1
 8008bd2:	75fa      	strb	r2, [r7, #23]
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	4413      	add	r3, r2
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	7812      	ldrb	r2, [r2, #0]
 8008bde:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008be0:	7dfb      	ldrb	r3, [r7, #23]
 8008be2:	1c5a      	adds	r2, r3, #1
 8008be4:	75fa      	strb	r2, [r7, #23]
 8008be6:	461a      	mov	r2, r3
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	4413      	add	r3, r2
 8008bec:	2203      	movs	r2, #3
 8008bee:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008bf0:	e012      	b.n	8008c18 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	1c5a      	adds	r2, r3, #1
 8008bf6:	60fa      	str	r2, [r7, #12]
 8008bf8:	7dfa      	ldrb	r2, [r7, #23]
 8008bfa:	1c51      	adds	r1, r2, #1
 8008bfc:	75f9      	strb	r1, [r7, #23]
 8008bfe:	4611      	mov	r1, r2
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	440a      	add	r2, r1
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008c08:	7dfb      	ldrb	r3, [r7, #23]
 8008c0a:	1c5a      	adds	r2, r3, #1
 8008c0c:	75fa      	strb	r2, [r7, #23]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	4413      	add	r3, r2
 8008c14:	2200      	movs	r2, #0
 8008c16:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1e8      	bne.n	8008bf2 <USBD_GetString+0x4e>
    }
  }
}
 8008c20:	bf00      	nop
 8008c22:	3718      	adds	r7, #24
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c30:	2300      	movs	r3, #0
 8008c32:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008c34:	e005      	b.n	8008c42 <USBD_GetLen+0x1a>
  {
    len++;
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1f5      	bne.n	8008c36 <USBD_GetLen+0xe>
  }

  return len;
 8008c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3714      	adds	r7, #20
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bc80      	pop	{r7}
 8008c54:	4770      	bx	lr

08008c56 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b084      	sub	sp, #16
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	60f8      	str	r0, [r7, #12]
 8008c5e:	60b9      	str	r1, [r7, #8]
 8008c60:	4613      	mov	r3, r2
 8008c62:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2202      	movs	r2, #2
 8008c68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c6c:	88fa      	ldrh	r2, [r7, #6]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008c72:	88fa      	ldrh	r2, [r7, #6]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c78:	88fb      	ldrh	r3, [r7, #6]
 8008c7a:	68ba      	ldr	r2, [r7, #8]
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f000 fc60 	bl	8009544 <USBD_LL_Transmit>

  return USBD_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b084      	sub	sp, #16
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	60f8      	str	r0, [r7, #12]
 8008c96:	60b9      	str	r1, [r7, #8]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c9c:	88fb      	ldrh	r3, [r7, #6]
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f000 fc4e 	bl	8009544 <USBD_LL_Transmit>

  return USBD_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b084      	sub	sp, #16
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	60f8      	str	r0, [r7, #12]
 8008cba:	60b9      	str	r1, [r7, #8]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cc0:	88fb      	ldrh	r3, [r7, #6]
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f000 fc5f 	bl	800958a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b082      	sub	sp, #8
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2204      	movs	r2, #4
 8008ce2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	2200      	movs	r2, #0
 8008cea:	2100      	movs	r1, #0
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fc29 	bl	8009544 <USBD_LL_Transmit>

  return USBD_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2205      	movs	r2, #5
 8008d08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	2200      	movs	r2, #0
 8008d10:	2100      	movs	r1, #0
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fc39 	bl	800958a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
	...

08008d24 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b087      	sub	sp, #28
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	4613      	mov	r3, r2
 8008d30:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008d32:	2301      	movs	r3, #1
 8008d34:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008d36:	2300      	movs	r3, #0
 8008d38:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008d3a:	4b1e      	ldr	r3, [pc, #120]	; (8008db4 <FATFS_LinkDriverEx+0x90>)
 8008d3c:	7a5b      	ldrb	r3, [r3, #9]
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d831      	bhi.n	8008da8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008d44:	4b1b      	ldr	r3, [pc, #108]	; (8008db4 <FATFS_LinkDriverEx+0x90>)
 8008d46:	7a5b      	ldrb	r3, [r3, #9]
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	4b19      	ldr	r3, [pc, #100]	; (8008db4 <FATFS_LinkDriverEx+0x90>)
 8008d4e:	2100      	movs	r1, #0
 8008d50:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008d52:	4b18      	ldr	r3, [pc, #96]	; (8008db4 <FATFS_LinkDriverEx+0x90>)
 8008d54:	7a5b      	ldrb	r3, [r3, #9]
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	4a16      	ldr	r2, [pc, #88]	; (8008db4 <FATFS_LinkDriverEx+0x90>)
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4413      	add	r3, r2
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008d62:	4b14      	ldr	r3, [pc, #80]	; (8008db4 <FATFS_LinkDriverEx+0x90>)
 8008d64:	7a5b      	ldrb	r3, [r3, #9]
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	461a      	mov	r2, r3
 8008d6a:	4b12      	ldr	r3, [pc, #72]	; (8008db4 <FATFS_LinkDriverEx+0x90>)
 8008d6c:	4413      	add	r3, r2
 8008d6e:	79fa      	ldrb	r2, [r7, #7]
 8008d70:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008d72:	4b10      	ldr	r3, [pc, #64]	; (8008db4 <FATFS_LinkDriverEx+0x90>)
 8008d74:	7a5b      	ldrb	r3, [r3, #9]
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	1c5a      	adds	r2, r3, #1
 8008d7a:	b2d1      	uxtb	r1, r2
 8008d7c:	4a0d      	ldr	r2, [pc, #52]	; (8008db4 <FATFS_LinkDriverEx+0x90>)
 8008d7e:	7251      	strb	r1, [r2, #9]
 8008d80:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008d82:	7dbb      	ldrb	r3, [r7, #22]
 8008d84:	3330      	adds	r3, #48	; 0x30
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	223a      	movs	r2, #58	; 0x3a
 8008d92:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	3302      	adds	r3, #2
 8008d98:	222f      	movs	r2, #47	; 0x2f
 8008d9a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	3303      	adds	r3, #3
 8008da0:	2200      	movs	r2, #0
 8008da2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008da4:	2300      	movs	r3, #0
 8008da6:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	371c      	adds	r7, #28
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bc80      	pop	{r7}
 8008db2:	4770      	bx	lr
 8008db4:	20000154 	.word	0x20000154

08008db8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff ffac 	bl	8008d24 <FATFS_LinkDriverEx>
 8008dcc:	4603      	mov	r3, r0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
	...

08008dd8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ddc:	2200      	movs	r2, #0
 8008dde:	4912      	ldr	r1, [pc, #72]	; (8008e28 <MX_USB_DEVICE_Init+0x50>)
 8008de0:	4812      	ldr	r0, [pc, #72]	; (8008e2c <MX_USB_DEVICE_Init+0x54>)
 8008de2:	f7fe ff23 	bl	8007c2c <USBD_Init>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d001      	beq.n	8008df0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008dec:	f7f7 fbac 	bl	8000548 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8008df0:	490f      	ldr	r1, [pc, #60]	; (8008e30 <MX_USB_DEVICE_Init+0x58>)
 8008df2:	480e      	ldr	r0, [pc, #56]	; (8008e2c <MX_USB_DEVICE_Init+0x54>)
 8008df4:	f7fe ff45 	bl	8007c82 <USBD_RegisterClass>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d001      	beq.n	8008e02 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008dfe:	f7f7 fba3 	bl	8000548 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8008e02:	490c      	ldr	r1, [pc, #48]	; (8008e34 <MX_USB_DEVICE_Init+0x5c>)
 8008e04:	4809      	ldr	r0, [pc, #36]	; (8008e2c <MX_USB_DEVICE_Init+0x54>)
 8008e06:	f7fd fef1 	bl	8006bec <USBD_MSC_RegisterStorage>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d001      	beq.n	8008e14 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008e10:	f7f7 fb9a 	bl	8000548 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008e14:	4805      	ldr	r0, [pc, #20]	; (8008e2c <MX_USB_DEVICE_Init+0x54>)
 8008e16:	f7fe ff4d 	bl	8007cb4 <USBD_Start>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d001      	beq.n	8008e24 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008e20:	f7f7 fb92 	bl	8000548 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008e24:	bf00      	nop
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	200000c4 	.word	0x200000c4
 8008e2c:	20000918 	.word	0x20000918
 8008e30:	20000020 	.word	0x20000020
 8008e34:	20000114 	.word	0x20000114

08008e38 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	4603      	mov	r3, r0
 8008e40:	6039      	str	r1, [r7, #0]
 8008e42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	2212      	movs	r2, #18
 8008e48:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008e4a:	4b03      	ldr	r3, [pc, #12]	; (8008e58 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bc80      	pop	{r7}
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	200000e0 	.word	0x200000e0

08008e5c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	4603      	mov	r3, r0
 8008e64:	6039      	str	r1, [r7, #0]
 8008e66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	2204      	movs	r2, #4
 8008e6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008e6e:	4b03      	ldr	r3, [pc, #12]	; (8008e7c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bc80      	pop	{r7}
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	200000f4 	.word	0x200000f4

08008e80 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	4603      	mov	r3, r0
 8008e88:	6039      	str	r1, [r7, #0]
 8008e8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e8c:	79fb      	ldrb	r3, [r7, #7]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d105      	bne.n	8008e9e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e92:	683a      	ldr	r2, [r7, #0]
 8008e94:	4907      	ldr	r1, [pc, #28]	; (8008eb4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e96:	4808      	ldr	r0, [pc, #32]	; (8008eb8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e98:	f7ff fe84 	bl	8008ba4 <USBD_GetString>
 8008e9c:	e004      	b.n	8008ea8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e9e:	683a      	ldr	r2, [r7, #0]
 8008ea0:	4904      	ldr	r1, [pc, #16]	; (8008eb4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ea2:	4805      	ldr	r0, [pc, #20]	; (8008eb8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ea4:	f7ff fe7e 	bl	8008ba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ea8:	4b02      	ldr	r3, [pc, #8]	; (8008eb4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	20000bdc 	.word	0x20000bdc
 8008eb8:	08009720 	.word	0x08009720

08008ebc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	6039      	str	r1, [r7, #0]
 8008ec6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ec8:	683a      	ldr	r2, [r7, #0]
 8008eca:	4904      	ldr	r1, [pc, #16]	; (8008edc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ecc:	4804      	ldr	r0, [pc, #16]	; (8008ee0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008ece:	f7ff fe69 	bl	8008ba4 <USBD_GetString>
  return USBD_StrDesc;
 8008ed2:	4b02      	ldr	r3, [pc, #8]	; (8008edc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	20000bdc 	.word	0x20000bdc
 8008ee0:	08009734 	.word	0x08009734

08008ee4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	4603      	mov	r3, r0
 8008eec:	6039      	str	r1, [r7, #0]
 8008eee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	221a      	movs	r2, #26
 8008ef4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008ef6:	f000 f843 	bl	8008f80 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008efa:	4b02      	ldr	r3, [pc, #8]	; (8008f04 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	200000f8 	.word	0x200000f8

08008f08 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	4603      	mov	r3, r0
 8008f10:	6039      	str	r1, [r7, #0]
 8008f12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f14:	79fb      	ldrb	r3, [r7, #7]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d105      	bne.n	8008f26 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	4907      	ldr	r1, [pc, #28]	; (8008f3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f1e:	4808      	ldr	r0, [pc, #32]	; (8008f40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f20:	f7ff fe40 	bl	8008ba4 <USBD_GetString>
 8008f24:	e004      	b.n	8008f30 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f26:	683a      	ldr	r2, [r7, #0]
 8008f28:	4904      	ldr	r1, [pc, #16]	; (8008f3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f2a:	4805      	ldr	r0, [pc, #20]	; (8008f40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f2c:	f7ff fe3a 	bl	8008ba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f30:	4b02      	ldr	r3, [pc, #8]	; (8008f3c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3708      	adds	r7, #8
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	20000bdc 	.word	0x20000bdc
 8008f40:	08009748 	.word	0x08009748

08008f44 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	6039      	str	r1, [r7, #0]
 8008f4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f50:	79fb      	ldrb	r3, [r7, #7]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d105      	bne.n	8008f62 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f56:	683a      	ldr	r2, [r7, #0]
 8008f58:	4907      	ldr	r1, [pc, #28]	; (8008f78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f5a:	4808      	ldr	r0, [pc, #32]	; (8008f7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f5c:	f7ff fe22 	bl	8008ba4 <USBD_GetString>
 8008f60:	e004      	b.n	8008f6c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f62:	683a      	ldr	r2, [r7, #0]
 8008f64:	4904      	ldr	r1, [pc, #16]	; (8008f78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f66:	4805      	ldr	r0, [pc, #20]	; (8008f7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f68:	f7ff fe1c 	bl	8008ba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f6c:	4b02      	ldr	r3, [pc, #8]	; (8008f78 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	20000bdc 	.word	0x20000bdc
 8008f7c:	08009754 	.word	0x08009754

08008f80 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008f86:	4b0f      	ldr	r3, [pc, #60]	; (8008fc4 <Get_SerialNum+0x44>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008f8c:	4b0e      	ldr	r3, [pc, #56]	; (8008fc8 <Get_SerialNum+0x48>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008f92:	4b0e      	ldr	r3, [pc, #56]	; (8008fcc <Get_SerialNum+0x4c>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d009      	beq.n	8008fba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008fa6:	2208      	movs	r2, #8
 8008fa8:	4909      	ldr	r1, [pc, #36]	; (8008fd0 <Get_SerialNum+0x50>)
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f000 f814 	bl	8008fd8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008fb0:	2204      	movs	r2, #4
 8008fb2:	4908      	ldr	r1, [pc, #32]	; (8008fd4 <Get_SerialNum+0x54>)
 8008fb4:	68b8      	ldr	r0, [r7, #8]
 8008fb6:	f000 f80f 	bl	8008fd8 <IntToUnicode>
  }
}
 8008fba:	bf00      	nop
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	1ffff7e8 	.word	0x1ffff7e8
 8008fc8:	1ffff7ec 	.word	0x1ffff7ec
 8008fcc:	1ffff7f0 	.word	0x1ffff7f0
 8008fd0:	200000fa 	.word	0x200000fa
 8008fd4:	2000010a 	.word	0x2000010a

08008fd8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b087      	sub	sp, #28
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008fea:	2300      	movs	r3, #0
 8008fec:	75fb      	strb	r3, [r7, #23]
 8008fee:	e027      	b.n	8009040 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	0f1b      	lsrs	r3, r3, #28
 8008ff4:	2b09      	cmp	r3, #9
 8008ff6:	d80b      	bhi.n	8009010 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	0f1b      	lsrs	r3, r3, #28
 8008ffc:	b2da      	uxtb	r2, r3
 8008ffe:	7dfb      	ldrb	r3, [r7, #23]
 8009000:	005b      	lsls	r3, r3, #1
 8009002:	4619      	mov	r1, r3
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	440b      	add	r3, r1
 8009008:	3230      	adds	r2, #48	; 0x30
 800900a:	b2d2      	uxtb	r2, r2
 800900c:	701a      	strb	r2, [r3, #0]
 800900e:	e00a      	b.n	8009026 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	0f1b      	lsrs	r3, r3, #28
 8009014:	b2da      	uxtb	r2, r3
 8009016:	7dfb      	ldrb	r3, [r7, #23]
 8009018:	005b      	lsls	r3, r3, #1
 800901a:	4619      	mov	r1, r3
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	440b      	add	r3, r1
 8009020:	3237      	adds	r2, #55	; 0x37
 8009022:	b2d2      	uxtb	r2, r2
 8009024:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	011b      	lsls	r3, r3, #4
 800902a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800902c:	7dfb      	ldrb	r3, [r7, #23]
 800902e:	005b      	lsls	r3, r3, #1
 8009030:	3301      	adds	r3, #1
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	4413      	add	r3, r2
 8009036:	2200      	movs	r2, #0
 8009038:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800903a:	7dfb      	ldrb	r3, [r7, #23]
 800903c:	3301      	adds	r3, #1
 800903e:	75fb      	strb	r3, [r7, #23]
 8009040:	7dfa      	ldrb	r2, [r7, #23]
 8009042:	79fb      	ldrb	r3, [r7, #7]
 8009044:	429a      	cmp	r2, r3
 8009046:	d3d3      	bcc.n	8008ff0 <IntToUnicode+0x18>
  }
}
 8009048:	bf00      	nop
 800904a:	bf00      	nop
 800904c:	371c      	adds	r7, #28
 800904e:	46bd      	mov	sp, r7
 8009050:	bc80      	pop	{r7}
 8009052:	4770      	bx	lr

08009054 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	4603      	mov	r3, r0
 800905c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800905e:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8009060:	4618      	mov	r0, r3
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	bc80      	pop	{r7}
 8009068:	4770      	bx	lr

0800906a <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800906a:	b480      	push	{r7}
 800906c:	b085      	sub	sp, #20
 800906e:	af00      	add	r7, sp, #0
 8009070:	4603      	mov	r3, r0
 8009072:	60b9      	str	r1, [r7, #8]
 8009074:	607a      	str	r2, [r7, #4]
 8009076:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800907e:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009086:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8009088:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800908a:	4618      	mov	r0, r3
 800908c:	3714      	adds	r7, #20
 800908e:	46bd      	mov	sp, r7
 8009090:	bc80      	pop	{r7}
 8009092:	4770      	bx	lr

08009094 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	4603      	mov	r3, r0
 800909c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800909e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bc80      	pop	{r7}
 80090a8:	4770      	bx	lr

080090aa <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80090aa:	b480      	push	{r7}
 80090ac:	b083      	sub	sp, #12
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	4603      	mov	r3, r0
 80090b2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80090b4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	370c      	adds	r7, #12
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bc80      	pop	{r7}
 80090be:	4770      	bx	lr

080090c0 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60b9      	str	r1, [r7, #8]
 80090c8:	607a      	str	r2, [r7, #4]
 80090ca:	461a      	mov	r2, r3
 80090cc:	4603      	mov	r3, r0
 80090ce:	73fb      	strb	r3, [r7, #15]
 80090d0:	4613      	mov	r3, r2
 80090d2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80090d4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	bc80      	pop	{r7}
 80090de:	4770      	bx	lr

080090e0 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b085      	sub	sp, #20
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60b9      	str	r1, [r7, #8]
 80090e8:	607a      	str	r2, [r7, #4]
 80090ea:	461a      	mov	r2, r3
 80090ec:	4603      	mov	r3, r0
 80090ee:	73fb      	strb	r3, [r7, #15]
 80090f0:	4613      	mov	r3, r2
 80090f2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 80090f4:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3714      	adds	r7, #20
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bc80      	pop	{r7}
 80090fe:	4770      	bx	lr

08009100 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8009100:	b480      	push	{r7}
 8009102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8009104:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8009106:	4618      	mov	r0, r3
 8009108:	46bd      	mov	sp, r7
 800910a:	bc80      	pop	{r7}
 800910c:	4770      	bx	lr
	...

08009110 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a0d      	ldr	r2, [pc, #52]	; (8009154 <HAL_PCD_MspInit+0x44>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d113      	bne.n	800914a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009122:	4b0d      	ldr	r3, [pc, #52]	; (8009158 <HAL_PCD_MspInit+0x48>)
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	4a0c      	ldr	r2, [pc, #48]	; (8009158 <HAL_PCD_MspInit+0x48>)
 8009128:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800912c:	61d3      	str	r3, [r2, #28]
 800912e:	4b0a      	ldr	r3, [pc, #40]	; (8009158 <HAL_PCD_MspInit+0x48>)
 8009130:	69db      	ldr	r3, [r3, #28]
 8009132:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009136:	60fb      	str	r3, [r7, #12]
 8009138:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800913a:	2200      	movs	r2, #0
 800913c:	2100      	movs	r1, #0
 800913e:	2014      	movs	r0, #20
 8009140:	f7f7 fed9 	bl	8000ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009144:	2014      	movs	r0, #20
 8009146:	f7f7 fef2 	bl	8000f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800914a:	bf00      	nop
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	40005c00 	.word	0x40005c00
 8009158:	40021000 	.word	0x40021000

0800915c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009170:	4619      	mov	r1, r3
 8009172:	4610      	mov	r0, r2
 8009174:	f7fe fde6 	bl	8007d44 <USBD_LL_SetupStage>
}
 8009178:	bf00      	nop
 800917a:	3708      	adds	r7, #8
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	460b      	mov	r3, r1
 800918a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009192:	78fa      	ldrb	r2, [r7, #3]
 8009194:	6879      	ldr	r1, [r7, #4]
 8009196:	4613      	mov	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	4413      	add	r3, r2
 800919c:	00db      	lsls	r3, r3, #3
 800919e:	440b      	add	r3, r1
 80091a0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	78fb      	ldrb	r3, [r7, #3]
 80091a8:	4619      	mov	r1, r3
 80091aa:	f7fe fe18 	bl	8007dde <USBD_LL_DataOutStage>
}
 80091ae:	bf00      	nop
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b082      	sub	sp, #8
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
 80091be:	460b      	mov	r3, r1
 80091c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80091c8:	78fa      	ldrb	r2, [r7, #3]
 80091ca:	6879      	ldr	r1, [r7, #4]
 80091cc:	4613      	mov	r3, r2
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	4413      	add	r3, r2
 80091d2:	00db      	lsls	r3, r3, #3
 80091d4:	440b      	add	r3, r1
 80091d6:	333c      	adds	r3, #60	; 0x3c
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	78fb      	ldrb	r3, [r7, #3]
 80091dc:	4619      	mov	r1, r3
 80091de:	f7fe fe6f 	bl	8007ec0 <USBD_LL_DataInStage>
}
 80091e2:	bf00      	nop
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b082      	sub	sp, #8
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7fe ff7f 	bl	80080fc <USBD_LL_SOF>
}
 80091fe:	bf00      	nop
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b084      	sub	sp, #16
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800920e:	2301      	movs	r3, #1
 8009210:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	2b02      	cmp	r3, #2
 8009218:	d001      	beq.n	800921e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800921a:	f7f7 f995 	bl	8000548 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009224:	7bfa      	ldrb	r2, [r7, #15]
 8009226:	4611      	mov	r1, r2
 8009228:	4618      	mov	r0, r3
 800922a:	f7fe ff2f 	bl	800808c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009234:	4618      	mov	r0, r3
 8009236:	f7fe fee8 	bl	800800a <USBD_LL_Reset>
}
 800923a:	bf00      	nop
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
	...

08009244 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009252:	4618      	mov	r0, r3
 8009254:	f7fe ff29 	bl	80080aa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d005      	beq.n	800926c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009260:	4b04      	ldr	r3, [pc, #16]	; (8009274 <HAL_PCD_SuspendCallback+0x30>)
 8009262:	691b      	ldr	r3, [r3, #16]
 8009264:	4a03      	ldr	r2, [pc, #12]	; (8009274 <HAL_PCD_SuspendCallback+0x30>)
 8009266:	f043 0306 	orr.w	r3, r3, #6
 800926a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800926c:	bf00      	nop
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	e000ed00 	.word	0xe000ed00

08009278 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009286:	4618      	mov	r0, r3
 8009288:	f7fe ff23 	bl	80080d2 <USBD_LL_Resume>
}
 800928c:	bf00      	nop
 800928e:	3708      	adds	r7, #8
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800929c:	4a23      	ldr	r2, [pc, #140]	; (800932c <USBD_LL_Init+0x98>)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a21      	ldr	r2, [pc, #132]	; (800932c <USBD_LL_Init+0x98>)
 80092a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80092ac:	4b1f      	ldr	r3, [pc, #124]	; (800932c <USBD_LL_Init+0x98>)
 80092ae:	4a20      	ldr	r2, [pc, #128]	; (8009330 <USBD_LL_Init+0x9c>)
 80092b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80092b2:	4b1e      	ldr	r3, [pc, #120]	; (800932c <USBD_LL_Init+0x98>)
 80092b4:	2208      	movs	r2, #8
 80092b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80092b8:	4b1c      	ldr	r3, [pc, #112]	; (800932c <USBD_LL_Init+0x98>)
 80092ba:	2202      	movs	r2, #2
 80092bc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80092be:	4b1b      	ldr	r3, [pc, #108]	; (800932c <USBD_LL_Init+0x98>)
 80092c0:	2200      	movs	r2, #0
 80092c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80092c4:	4b19      	ldr	r3, [pc, #100]	; (800932c <USBD_LL_Init+0x98>)
 80092c6:	2200      	movs	r2, #0
 80092c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80092ca:	4b18      	ldr	r3, [pc, #96]	; (800932c <USBD_LL_Init+0x98>)
 80092cc:	2200      	movs	r2, #0
 80092ce:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80092d0:	4816      	ldr	r0, [pc, #88]	; (800932c <USBD_LL_Init+0x98>)
 80092d2:	f7f7 fffa 	bl	80012ca <HAL_PCD_Init>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d001      	beq.n	80092e0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80092dc:	f7f7 f934 	bl	8000548 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092e6:	2318      	movs	r3, #24
 80092e8:	2200      	movs	r2, #0
 80092ea:	2100      	movs	r1, #0
 80092ec:	f7f9 fc9d 	bl	8002c2a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092f6:	2358      	movs	r3, #88	; 0x58
 80092f8:	2200      	movs	r2, #0
 80092fa:	2180      	movs	r1, #128	; 0x80
 80092fc:	f7f9 fc95 	bl	8002c2a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009306:	2398      	movs	r3, #152	; 0x98
 8009308:	2200      	movs	r2, #0
 800930a:	2181      	movs	r1, #129	; 0x81
 800930c:	f7f9 fc8d 	bl	8002c2a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009316:	23d8      	movs	r3, #216	; 0xd8
 8009318:	2200      	movs	r2, #0
 800931a:	2101      	movs	r1, #1
 800931c:	f7f9 fc85 	bl	8002c2a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	20000ddc 	.word	0x20000ddc
 8009330:	40005c00 	.word	0x40005c00

08009334 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800933c:	2300      	movs	r3, #0
 800933e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009340:	2300      	movs	r3, #0
 8009342:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800934a:	4618      	mov	r0, r3
 800934c:	f7f8 f8c8 	bl	80014e0 <HAL_PCD_Start>
 8009350:	4603      	mov	r3, r0
 8009352:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009354:	7bfb      	ldrb	r3, [r7, #15]
 8009356:	4618      	mov	r0, r3
 8009358:	f000 f96e 	bl	8009638 <USBD_Get_USB_Status>
 800935c:	4603      	mov	r3, r0
 800935e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009360:	7bbb      	ldrb	r3, [r7, #14]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b084      	sub	sp, #16
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
 8009372:	4608      	mov	r0, r1
 8009374:	4611      	mov	r1, r2
 8009376:	461a      	mov	r2, r3
 8009378:	4603      	mov	r3, r0
 800937a:	70fb      	strb	r3, [r7, #3]
 800937c:	460b      	mov	r3, r1
 800937e:	70bb      	strb	r3, [r7, #2]
 8009380:	4613      	mov	r3, r2
 8009382:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009384:	2300      	movs	r3, #0
 8009386:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009388:	2300      	movs	r3, #0
 800938a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009392:	78bb      	ldrb	r3, [r7, #2]
 8009394:	883a      	ldrh	r2, [r7, #0]
 8009396:	78f9      	ldrb	r1, [r7, #3]
 8009398:	f7f8 fa42 	bl	8001820 <HAL_PCD_EP_Open>
 800939c:	4603      	mov	r3, r0
 800939e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 f948 	bl	8009638 <USBD_Get_USB_Status>
 80093a8:	4603      	mov	r3, r0
 80093aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b084      	sub	sp, #16
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
 80093be:	460b      	mov	r3, r1
 80093c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093c2:	2300      	movs	r3, #0
 80093c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093d0:	78fa      	ldrb	r2, [r7, #3]
 80093d2:	4611      	mov	r1, r2
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7f8 fa89 	bl	80018ec <HAL_PCD_EP_Close>
 80093da:	4603      	mov	r3, r0
 80093dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093de:	7bfb      	ldrb	r3, [r7, #15]
 80093e0:	4618      	mov	r0, r3
 80093e2:	f000 f929 	bl	8009638 <USBD_Get_USB_Status>
 80093e6:	4603      	mov	r3, r0
 80093e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	460b      	mov	r3, r1
 80093fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009404:	2300      	movs	r3, #0
 8009406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800940e:	78fa      	ldrb	r2, [r7, #3]
 8009410:	4611      	mov	r1, r2
 8009412:	4618      	mov	r0, r3
 8009414:	f7f8 fbfd 	bl	8001c12 <HAL_PCD_EP_Flush>
 8009418:	4603      	mov	r3, r0
 800941a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800941c:	7bfb      	ldrb	r3, [r7, #15]
 800941e:	4618      	mov	r0, r3
 8009420:	f000 f90a 	bl	8009638 <USBD_Get_USB_Status>
 8009424:	4603      	mov	r3, r0
 8009426:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009428:	7bbb      	ldrb	r3, [r7, #14]
}
 800942a:	4618      	mov	r0, r3
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b084      	sub	sp, #16
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	460b      	mov	r3, r1
 800943c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800943e:	2300      	movs	r3, #0
 8009440:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009442:	2300      	movs	r3, #0
 8009444:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800944c:	78fa      	ldrb	r2, [r7, #3]
 800944e:	4611      	mov	r1, r2
 8009450:	4618      	mov	r0, r3
 8009452:	f7f8 fb2a 	bl	8001aaa <HAL_PCD_EP_SetStall>
 8009456:	4603      	mov	r3, r0
 8009458:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800945a:	7bfb      	ldrb	r3, [r7, #15]
 800945c:	4618      	mov	r0, r3
 800945e:	f000 f8eb 	bl	8009638 <USBD_Get_USB_Status>
 8009462:	4603      	mov	r3, r0
 8009464:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009466:	7bbb      	ldrb	r3, [r7, #14]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	460b      	mov	r3, r1
 800947a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800947c:	2300      	movs	r3, #0
 800947e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009480:	2300      	movs	r3, #0
 8009482:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800948a:	78fa      	ldrb	r2, [r7, #3]
 800948c:	4611      	mov	r1, r2
 800948e:	4618      	mov	r0, r3
 8009490:	f7f8 fb6b 	bl	8001b6a <HAL_PCD_EP_ClrStall>
 8009494:	4603      	mov	r3, r0
 8009496:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009498:	7bfb      	ldrb	r3, [r7, #15]
 800949a:	4618      	mov	r0, r3
 800949c:	f000 f8cc 	bl	8009638 <USBD_Get_USB_Status>
 80094a0:	4603      	mov	r3, r0
 80094a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094ae:	b480      	push	{r7}
 80094b0:	b085      	sub	sp, #20
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	460b      	mov	r3, r1
 80094b8:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094c0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80094c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	da0c      	bge.n	80094e4 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80094ca:	78fb      	ldrb	r3, [r7, #3]
 80094cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094d0:	68f9      	ldr	r1, [r7, #12]
 80094d2:	1c5a      	adds	r2, r3, #1
 80094d4:	4613      	mov	r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	4413      	add	r3, r2
 80094da:	00db      	lsls	r3, r3, #3
 80094dc:	440b      	add	r3, r1
 80094de:	3302      	adds	r3, #2
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	e00b      	b.n	80094fc <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80094e4:	78fb      	ldrb	r3, [r7, #3]
 80094e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094ea:	68f9      	ldr	r1, [r7, #12]
 80094ec:	4613      	mov	r3, r2
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	4413      	add	r3, r2
 80094f2:	00db      	lsls	r3, r3, #3
 80094f4:	440b      	add	r3, r1
 80094f6:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80094fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3714      	adds	r7, #20
 8009500:	46bd      	mov	sp, r7
 8009502:	bc80      	pop	{r7}
 8009504:	4770      	bx	lr

08009506 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b084      	sub	sp, #16
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	460b      	mov	r3, r1
 8009510:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009512:	2300      	movs	r3, #0
 8009514:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009520:	78fa      	ldrb	r2, [r7, #3]
 8009522:	4611      	mov	r1, r2
 8009524:	4618      	mov	r0, r3
 8009526:	f7f8 f956 	bl	80017d6 <HAL_PCD_SetAddress>
 800952a:	4603      	mov	r3, r0
 800952c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800952e:	7bfb      	ldrb	r3, [r7, #15]
 8009530:	4618      	mov	r0, r3
 8009532:	f000 f881 	bl	8009638 <USBD_Get_USB_Status>
 8009536:	4603      	mov	r3, r0
 8009538:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800953a:	7bbb      	ldrb	r3, [r7, #14]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b086      	sub	sp, #24
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	607a      	str	r2, [r7, #4]
 800954e:	461a      	mov	r2, r3
 8009550:	460b      	mov	r3, r1
 8009552:	72fb      	strb	r3, [r7, #11]
 8009554:	4613      	mov	r3, r2
 8009556:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009558:	2300      	movs	r3, #0
 800955a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800955c:	2300      	movs	r3, #0
 800955e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009566:	893b      	ldrh	r3, [r7, #8]
 8009568:	7af9      	ldrb	r1, [r7, #11]
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	f7f8 fa5a 	bl	8001a24 <HAL_PCD_EP_Transmit>
 8009570:	4603      	mov	r3, r0
 8009572:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009574:	7dfb      	ldrb	r3, [r7, #23]
 8009576:	4618      	mov	r0, r3
 8009578:	f000 f85e 	bl	8009638 <USBD_Get_USB_Status>
 800957c:	4603      	mov	r3, r0
 800957e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009580:	7dbb      	ldrb	r3, [r7, #22]
}
 8009582:	4618      	mov	r0, r3
 8009584:	3718      	adds	r7, #24
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b086      	sub	sp, #24
 800958e:	af00      	add	r7, sp, #0
 8009590:	60f8      	str	r0, [r7, #12]
 8009592:	607a      	str	r2, [r7, #4]
 8009594:	461a      	mov	r2, r3
 8009596:	460b      	mov	r3, r1
 8009598:	72fb      	strb	r3, [r7, #11]
 800959a:	4613      	mov	r3, r2
 800959c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800959e:	2300      	movs	r3, #0
 80095a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095a2:	2300      	movs	r3, #0
 80095a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80095ac:	893b      	ldrh	r3, [r7, #8]
 80095ae:	7af9      	ldrb	r1, [r7, #11]
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	f7f8 f9e3 	bl	800197c <HAL_PCD_EP_Receive>
 80095b6:	4603      	mov	r3, r0
 80095b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095ba:	7dfb      	ldrb	r3, [r7, #23]
 80095bc:	4618      	mov	r0, r3
 80095be:	f000 f83b 	bl	8009638 <USBD_Get_USB_Status>
 80095c2:	4603      	mov	r3, r0
 80095c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3718      	adds	r7, #24
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	460b      	mov	r3, r1
 80095da:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095e2:	78fa      	ldrb	r2, [r7, #3]
 80095e4:	4611      	mov	r1, r2
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7f8 fa05 	bl	80019f6 <HAL_PCD_EP_GetRxCount>
 80095ec:	4603      	mov	r3, r0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
	...

080095f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009600:	4b02      	ldr	r3, [pc, #8]	; (800960c <USBD_static_malloc+0x14>)
}
 8009602:	4618      	mov	r0, r3
 8009604:	370c      	adds	r7, #12
 8009606:	46bd      	mov	sp, r7
 8009608:	bc80      	pop	{r7}
 800960a:	4770      	bx	lr
 800960c:	20000160 	.word	0x20000160

08009610 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]

}
 8009618:	bf00      	nop
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	bc80      	pop	{r7}
 8009620:	4770      	bx	lr

08009622 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009622:	b480      	push	{r7}
 8009624:	b083      	sub	sp, #12
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	460b      	mov	r3, r1
 800962c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800962e:	bf00      	nop
 8009630:	370c      	adds	r7, #12
 8009632:	46bd      	mov	sp, r7
 8009634:	bc80      	pop	{r7}
 8009636:	4770      	bx	lr

08009638 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	4603      	mov	r3, r0
 8009640:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009642:	2300      	movs	r3, #0
 8009644:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009646:	79fb      	ldrb	r3, [r7, #7]
 8009648:	2b03      	cmp	r3, #3
 800964a:	d817      	bhi.n	800967c <USBD_Get_USB_Status+0x44>
 800964c:	a201      	add	r2, pc, #4	; (adr r2, 8009654 <USBD_Get_USB_Status+0x1c>)
 800964e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009652:	bf00      	nop
 8009654:	08009665 	.word	0x08009665
 8009658:	0800966b 	.word	0x0800966b
 800965c:	08009671 	.word	0x08009671
 8009660:	08009677 	.word	0x08009677
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	73fb      	strb	r3, [r7, #15]
    break;
 8009668:	e00b      	b.n	8009682 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800966a:	2302      	movs	r3, #2
 800966c:	73fb      	strb	r3, [r7, #15]
    break;
 800966e:	e008      	b.n	8009682 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009670:	2301      	movs	r3, #1
 8009672:	73fb      	strb	r3, [r7, #15]
    break;
 8009674:	e005      	b.n	8009682 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009676:	2302      	movs	r3, #2
 8009678:	73fb      	strb	r3, [r7, #15]
    break;
 800967a:	e002      	b.n	8009682 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800967c:	2302      	movs	r3, #2
 800967e:	73fb      	strb	r3, [r7, #15]
    break;
 8009680:	bf00      	nop
  }
  return usb_status;
 8009682:	7bfb      	ldrb	r3, [r7, #15]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3714      	adds	r7, #20
 8009688:	46bd      	mov	sp, r7
 800968a:	bc80      	pop	{r7}
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop

08009690 <__libc_init_array>:
 8009690:	b570      	push	{r4, r5, r6, lr}
 8009692:	2600      	movs	r6, #0
 8009694:	4d0c      	ldr	r5, [pc, #48]	; (80096c8 <__libc_init_array+0x38>)
 8009696:	4c0d      	ldr	r4, [pc, #52]	; (80096cc <__libc_init_array+0x3c>)
 8009698:	1b64      	subs	r4, r4, r5
 800969a:	10a4      	asrs	r4, r4, #2
 800969c:	42a6      	cmp	r6, r4
 800969e:	d109      	bne.n	80096b4 <__libc_init_array+0x24>
 80096a0:	f000 f822 	bl	80096e8 <_init>
 80096a4:	2600      	movs	r6, #0
 80096a6:	4d0a      	ldr	r5, [pc, #40]	; (80096d0 <__libc_init_array+0x40>)
 80096a8:	4c0a      	ldr	r4, [pc, #40]	; (80096d4 <__libc_init_array+0x44>)
 80096aa:	1b64      	subs	r4, r4, r5
 80096ac:	10a4      	asrs	r4, r4, #2
 80096ae:	42a6      	cmp	r6, r4
 80096b0:	d105      	bne.n	80096be <__libc_init_array+0x2e>
 80096b2:	bd70      	pop	{r4, r5, r6, pc}
 80096b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80096b8:	4798      	blx	r3
 80096ba:	3601      	adds	r6, #1
 80096bc:	e7ee      	b.n	800969c <__libc_init_array+0xc>
 80096be:	f855 3b04 	ldr.w	r3, [r5], #4
 80096c2:	4798      	blx	r3
 80096c4:	3601      	adds	r6, #1
 80096c6:	e7f2      	b.n	80096ae <__libc_init_array+0x1e>
 80096c8:	080097b8 	.word	0x080097b8
 80096cc:	080097b8 	.word	0x080097b8
 80096d0:	080097b8 	.word	0x080097b8
 80096d4:	080097bc 	.word	0x080097bc

080096d8 <memset>:
 80096d8:	4603      	mov	r3, r0
 80096da:	4402      	add	r2, r0
 80096dc:	4293      	cmp	r3, r2
 80096de:	d100      	bne.n	80096e2 <memset+0xa>
 80096e0:	4770      	bx	lr
 80096e2:	f803 1b01 	strb.w	r1, [r3], #1
 80096e6:	e7f9      	b.n	80096dc <memset+0x4>

080096e8 <_init>:
 80096e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ea:	bf00      	nop
 80096ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ee:	bc08      	pop	{r3}
 80096f0:	469e      	mov	lr, r3
 80096f2:	4770      	bx	lr

080096f4 <_fini>:
 80096f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f6:	bf00      	nop
 80096f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096fa:	bc08      	pop	{r3}
 80096fc:	469e      	mov	lr, r3
 80096fe:	4770      	bx	lr
