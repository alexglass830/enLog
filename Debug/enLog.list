
enLog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080096bc  080096bc  000196bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009774  08009774  00020134  2**0
                  CONTENTS
  4 .ARM          00000000  08009774  08009774  00020134  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009774  08009774  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009774  08009774  00019774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009778  08009778  00019778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  0800977c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f94  20000134  080098b0  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010c8  080098b0  000210c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d0dc  00000000  00000000  0002015d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004604  00000000  00000000  0003d239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  00041840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  00042b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ceaf  00000000  00000000  00043c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d40  00000000  00000000  00060aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091347  00000000  00000000  000797ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010ab36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ab8  00000000  00000000  0010ab8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000134 	.word	0x20000134
 8000128:	00000000 	.word	0x00000000
 800012c:	080096a4 	.word	0x080096a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000138 	.word	0x20000138
 8000148:	080096a4 	.word	0x080096a4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t isRecording = 0;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 fb61 	bl	800081c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f821 	bl	80001a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f96b 	bl	8000438 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000162:	f000 f881 	bl	8000268 <MX_ADC1_Init>
  MX_RTC_Init();
 8000166:	f000 f8bd 	bl	80002e4 <MX_RTC_Init>
  MX_SPI2_Init();
 800016a:	f000 f905 	bl	8000378 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800016e:	f000 f939 	bl	80003e4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000172:	f006 faab 	bl	80066cc <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000176:	f008 fe0d 	bl	8008d94 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (  HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1) == GPIO_PIN_RESET ){
 800017a:	2102      	movs	r1, #2
 800017c:	4807      	ldr	r0, [pc, #28]	; (800019c <main+0x50>)
 800017e:	f001 f853 	bl	8001228 <HAL_GPIO_ReadPin>
 8000182:	4603      	mov	r3, r0
 8000184:	2b00      	cmp	r3, #0
 8000186:	d1f8      	bne.n	800017a <main+0x2e>
		if ( isRecording ){
 8000188:	79fb      	ldrb	r3, [r7, #7]
 800018a:	2b00      	cmp	r3, #0
 800018c:	d002      	beq.n	8000194 <main+0x48>
			isRecording = 1;
 800018e:	2301      	movs	r3, #1
 8000190:	71fb      	strb	r3, [r7, #7]
 8000192:	e7f2      	b.n	800017a <main+0x2e>
		}else{
			isRecording = 0;
 8000194:	2300      	movs	r3, #0
 8000196:	71fb      	strb	r3, [r7, #7]
	if (  HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1) == GPIO_PIN_RESET ){
 8000198:	e7ef      	b.n	800017a <main+0x2e>
 800019a:	bf00      	nop
 800019c:	40010800 	.word	0x40010800

080001a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b094      	sub	sp, #80	; 0x50
 80001a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001aa:	2228      	movs	r2, #40	; 0x28
 80001ac:	2100      	movs	r1, #0
 80001ae:	4618      	mov	r0, r3
 80001b0:	f009 fa70 	bl	8009694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b4:	f107 0314 	add.w	r3, r7, #20
 80001b8:	2200      	movs	r2, #0
 80001ba:	601a      	str	r2, [r3, #0]
 80001bc:	605a      	str	r2, [r3, #4]
 80001be:	609a      	str	r2, [r3, #8]
 80001c0:	60da      	str	r2, [r3, #12]
 80001c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
 80001ca:	605a      	str	r2, [r3, #4]
 80001cc:	609a      	str	r2, [r3, #8]
 80001ce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80001d0:	2305      	movs	r3, #5
 80001d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001da:	2300      	movs	r3, #0
 80001dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80001de:	2301      	movs	r3, #1
 80001e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e2:	2301      	movs	r3, #1
 80001e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e6:	2302      	movs	r3, #2
 80001e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001fa:	4618      	mov	r0, r3
 80001fc:	f002 fd42 	bl	8002c84 <HAL_RCC_OscConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000206:	f000 f97d 	bl	8000504 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020a:	230f      	movs	r3, #15
 800020c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800020e:	2302      	movs	r3, #2
 8000210:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800021a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000220:	f107 0314 	add.w	r3, r7, #20
 8000224:	2101      	movs	r1, #1
 8000226:	4618      	mov	r0, r3
 8000228:	f002 ffac 	bl	8003184 <HAL_RCC_ClockConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000232:	f000 f967 	bl	8000504 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
 8000236:	2313      	movs	r3, #19
 8000238:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800023a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800023e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000240:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000244:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000246:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800024a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	4618      	mov	r0, r3
 8000250:	f003 f932 	bl	80034b8 <HAL_RCCEx_PeriphCLKConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800025a:	f000 f953 	bl	8000504 <Error_Handler>
  }
}
 800025e:	bf00      	nop
 8000260:	3750      	adds	r7, #80	; 0x50
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
	...

08000268 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000278:	4b18      	ldr	r3, [pc, #96]	; (80002dc <MX_ADC1_Init+0x74>)
 800027a:	4a19      	ldr	r2, [pc, #100]	; (80002e0 <MX_ADC1_Init+0x78>)
 800027c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800027e:	4b17      	ldr	r3, [pc, #92]	; (80002dc <MX_ADC1_Init+0x74>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000284:	4b15      	ldr	r3, [pc, #84]	; (80002dc <MX_ADC1_Init+0x74>)
 8000286:	2200      	movs	r2, #0
 8000288:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800028a:	4b14      	ldr	r3, [pc, #80]	; (80002dc <MX_ADC1_Init+0x74>)
 800028c:	2200      	movs	r2, #0
 800028e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <MX_ADC1_Init+0x74>)
 8000292:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000296:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000298:	4b10      	ldr	r3, [pc, #64]	; (80002dc <MX_ADC1_Init+0x74>)
 800029a:	2200      	movs	r2, #0
 800029c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800029e:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <MX_ADC1_Init+0x74>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002a4:	480d      	ldr	r0, [pc, #52]	; (80002dc <MX_ADC1_Init+0x74>)
 80002a6:	f000 fb1b 	bl	80008e0 <HAL_ADC_Init>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002b0:	f000 f928 	bl	8000504 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80002b4:	2306      	movs	r3, #6
 80002b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002b8:	2301      	movs	r3, #1
 80002ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	4619      	mov	r1, r3
 80002c4:	4805      	ldr	r0, [pc, #20]	; (80002dc <MX_ADC1_Init+0x74>)
 80002c6:	f000 fbe3 	bl	8000a90 <HAL_ADC_ConfigChannel>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002d0:	f000 f918 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002d4:	bf00      	nop
 80002d6:	3710      	adds	r7, #16
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000428 	.word	0x20000428
 80002e0:	40012400 	.word	0x40012400

080002e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2100      	movs	r1, #0
 80002ee:	460a      	mov	r2, r1
 80002f0:	801a      	strh	r2, [r3, #0]
 80002f2:	460a      	mov	r2, r1
 80002f4:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80002f6:	2300      	movs	r3, #0
 80002f8:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80002fa:	4b1d      	ldr	r3, [pc, #116]	; (8000370 <MX_RTC_Init+0x8c>)
 80002fc:	4a1d      	ldr	r2, [pc, #116]	; (8000374 <MX_RTC_Init+0x90>)
 80002fe:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000300:	4b1b      	ldr	r3, [pc, #108]	; (8000370 <MX_RTC_Init+0x8c>)
 8000302:	f04f 32ff 	mov.w	r2, #4294967295
 8000306:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000308:	4b19      	ldr	r3, [pc, #100]	; (8000370 <MX_RTC_Init+0x8c>)
 800030a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800030e:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000310:	4817      	ldr	r0, [pc, #92]	; (8000370 <MX_RTC_Init+0x8c>)
 8000312:	f003 fa4b 	bl	80037ac <HAL_RTC_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 800031c:	f000 f8f2 	bl	8000504 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000320:	2300      	movs	r3, #0
 8000322:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000324:	2300      	movs	r3, #0
 8000326:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000328:	2300      	movs	r3, #0
 800032a:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2201      	movs	r2, #1
 8000330:	4619      	mov	r1, r3
 8000332:	480f      	ldr	r0, [pc, #60]	; (8000370 <MX_RTC_Init+0x8c>)
 8000334:	f003 fad0 	bl	80038d8 <HAL_RTC_SetTime>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800033e:	f000 f8e1 	bl	8000504 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000342:	2301      	movs	r3, #1
 8000344:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000346:	2301      	movs	r3, #1
 8000348:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 800034a:	2301      	movs	r3, #1
 800034c:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 800034e:	2300      	movs	r3, #0
 8000350:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000352:	463b      	mov	r3, r7
 8000354:	2201      	movs	r2, #1
 8000356:	4619      	mov	r1, r3
 8000358:	4805      	ldr	r0, [pc, #20]	; (8000370 <MX_RTC_Init+0x8c>)
 800035a:	f003 fb55 	bl	8003a08 <HAL_RTC_SetDate>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000364:	f000 f8ce 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000368:	bf00      	nop
 800036a:	3708      	adds	r7, #8
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000458 	.word	0x20000458
 8000374:	40002800 	.word	0x40002800

08000378 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800037c:	4b17      	ldr	r3, [pc, #92]	; (80003dc <MX_SPI2_Init+0x64>)
 800037e:	4a18      	ldr	r2, [pc, #96]	; (80003e0 <MX_SPI2_Init+0x68>)
 8000380:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000382:	4b16      	ldr	r3, [pc, #88]	; (80003dc <MX_SPI2_Init+0x64>)
 8000384:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000388:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <MX_SPI2_Init+0x64>)
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <MX_SPI2_Init+0x64>)
 8000392:	2200      	movs	r2, #0
 8000394:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000396:	4b11      	ldr	r3, [pc, #68]	; (80003dc <MX_SPI2_Init+0x64>)
 8000398:	2200      	movs	r2, #0
 800039a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <MX_SPI2_Init+0x64>)
 800039e:	2200      	movs	r2, #0
 80003a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80003a2:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <MX_SPI2_Init+0x64>)
 80003a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80003a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003aa:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <MX_SPI2_Init+0x64>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003b0:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <MX_SPI2_Init+0x64>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003b6:	4b09      	ldr	r3, [pc, #36]	; (80003dc <MX_SPI2_Init+0x64>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003bc:	4b07      	ldr	r3, [pc, #28]	; (80003dc <MX_SPI2_Init+0x64>)
 80003be:	2200      	movs	r2, #0
 80003c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80003c2:	4b06      	ldr	r3, [pc, #24]	; (80003dc <MX_SPI2_Init+0x64>)
 80003c4:	220a      	movs	r2, #10
 80003c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80003c8:	4804      	ldr	r0, [pc, #16]	; (80003dc <MX_SPI2_Init+0x64>)
 80003ca:	f003 fd7d 	bl	8003ec8 <HAL_SPI_Init>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80003d4:	f000 f896 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80003d8:	bf00      	nop
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	200003d0 	.word	0x200003d0
 80003e0:	40003800 	.word	0x40003800

080003e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003e8:	4b11      	ldr	r3, [pc, #68]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 80003ea:	4a12      	ldr	r2, [pc, #72]	; (8000434 <MX_USART2_UART_Init+0x50>)
 80003ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003ee:	4b10      	ldr	r3, [pc, #64]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 80003f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003fc:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 80003fe:	2200      	movs	r2, #0
 8000400:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000402:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 8000404:	2200      	movs	r2, #0
 8000406:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000408:	4b09      	ldr	r3, [pc, #36]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 800040a:	220c      	movs	r2, #12
 800040c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 8000410:	2200      	movs	r2, #0
 8000412:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 8000416:	2200      	movs	r2, #0
 8000418:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800041a:	4805      	ldr	r0, [pc, #20]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 800041c:	f003 fdd8 	bl	8003fd0 <HAL_UART_Init>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000426:	f000 f86d 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	2000046c 	.word	0x2000046c
 8000434:	40004400 	.word	0x40004400

08000438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b088      	sub	sp, #32
 800043c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043e:	f107 0310 	add.w	r3, r7, #16
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800044c:	4b2a      	ldr	r3, [pc, #168]	; (80004f8 <MX_GPIO_Init+0xc0>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a29      	ldr	r2, [pc, #164]	; (80004f8 <MX_GPIO_Init+0xc0>)
 8000452:	f043 0310 	orr.w	r3, r3, #16
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b27      	ldr	r3, [pc, #156]	; (80004f8 <MX_GPIO_Init+0xc0>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0310 	and.w	r3, r3, #16
 8000460:	60fb      	str	r3, [r7, #12]
 8000462:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000464:	4b24      	ldr	r3, [pc, #144]	; (80004f8 <MX_GPIO_Init+0xc0>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a23      	ldr	r2, [pc, #140]	; (80004f8 <MX_GPIO_Init+0xc0>)
 800046a:	f043 0320 	orr.w	r3, r3, #32
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b21      	ldr	r3, [pc, #132]	; (80004f8 <MX_GPIO_Init+0xc0>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f003 0320 	and.w	r3, r3, #32
 8000478:	60bb      	str	r3, [r7, #8]
 800047a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800047c:	4b1e      	ldr	r3, [pc, #120]	; (80004f8 <MX_GPIO_Init+0xc0>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	4a1d      	ldr	r2, [pc, #116]	; (80004f8 <MX_GPIO_Init+0xc0>)
 8000482:	f043 0304 	orr.w	r3, r3, #4
 8000486:	6193      	str	r3, [r2, #24]
 8000488:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <MX_GPIO_Init+0xc0>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f003 0304 	and.w	r3, r3, #4
 8000490:	607b      	str	r3, [r7, #4]
 8000492:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000494:	4b18      	ldr	r3, [pc, #96]	; (80004f8 <MX_GPIO_Init+0xc0>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a17      	ldr	r2, [pc, #92]	; (80004f8 <MX_GPIO_Init+0xc0>)
 800049a:	f043 0308 	orr.w	r3, r3, #8
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <MX_GPIO_Init+0xc0>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f003 0308 	and.w	r3, r3, #8
 80004a8:	603b      	str	r3, [r7, #0]
 80004aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004b2:	4812      	ldr	r0, [pc, #72]	; (80004fc <MX_GPIO_Init+0xc4>)
 80004b4:	f000 fecf 	bl	8001256 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004be:	2301      	movs	r3, #1
 80004c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c2:	2300      	movs	r3, #0
 80004c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c6:	2302      	movs	r3, #2
 80004c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ca:	f107 0310 	add.w	r3, r7, #16
 80004ce:	4619      	mov	r1, r3
 80004d0:	480a      	ldr	r0, [pc, #40]	; (80004fc <MX_GPIO_Init+0xc4>)
 80004d2:	f000 fd25 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004d6:	2302      	movs	r3, #2
 80004d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004da:	2300      	movs	r3, #0
 80004dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004de:	2301      	movs	r3, #1
 80004e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e2:	f107 0310 	add.w	r3, r7, #16
 80004e6:	4619      	mov	r1, r3
 80004e8:	4805      	ldr	r0, [pc, #20]	; (8000500 <MX_GPIO_Init+0xc8>)
 80004ea:	f000 fd19 	bl	8000f20 <HAL_GPIO_Init>

}
 80004ee:	bf00      	nop
 80004f0:	3720      	adds	r7, #32
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40011000 	.word	0x40011000
 8000500:	40010800 	.word	0x40010800

08000504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
}
 800050a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050c:	e7fe      	b.n	800050c <Error_Handler+0x8>
	...

08000510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <HAL_MspInit+0x5c>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	4a14      	ldr	r2, [pc, #80]	; (800056c <HAL_MspInit+0x5c>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6193      	str	r3, [r2, #24]
 8000522:	4b12      	ldr	r3, [pc, #72]	; (800056c <HAL_MspInit+0x5c>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <HAL_MspInit+0x5c>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	4a0e      	ldr	r2, [pc, #56]	; (800056c <HAL_MspInit+0x5c>)
 8000534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000538:	61d3      	str	r3, [r2, #28]
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <HAL_MspInit+0x5c>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <HAL_MspInit+0x60>)
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <HAL_MspInit+0x60>)
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000562:	bf00      	nop
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	40021000 	.word	0x40021000
 8000570:	40010000 	.word	0x40010000

08000574 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <HAL_ADC_MspInit+0x6c>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d121      	bne.n	80005d8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000594:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <HAL_ADC_MspInit+0x70>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a12      	ldr	r2, [pc, #72]	; (80005e4 <HAL_ADC_MspInit+0x70>)
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6193      	str	r3, [r2, #24]
 80005a0:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <HAL_ADC_MspInit+0x70>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ac:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <HAL_ADC_MspInit+0x70>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a0c      	ldr	r2, [pc, #48]	; (80005e4 <HAL_ADC_MspInit+0x70>)
 80005b2:	f043 0304 	orr.w	r3, r3, #4
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <HAL_ADC_MspInit+0x70>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f003 0304 	and.w	r3, r3, #4
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005c4:	2340      	movs	r3, #64	; 0x40
 80005c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c8:	2303      	movs	r3, #3
 80005ca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005cc:	f107 0310 	add.w	r3, r7, #16
 80005d0:	4619      	mov	r1, r3
 80005d2:	4805      	ldr	r0, [pc, #20]	; (80005e8 <HAL_ADC_MspInit+0x74>)
 80005d4:	f000 fca4 	bl	8000f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005d8:	bf00      	nop
 80005da:	3720      	adds	r7, #32
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40012400 	.word	0x40012400
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40010800 	.word	0x40010800

080005ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <HAL_RTC_MspInit+0x3c>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d110      	bne.n	8000620 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80005fe:	f002 fb35 	bl	8002c6c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <HAL_RTC_MspInit+0x40>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	4a09      	ldr	r2, [pc, #36]	; (800062c <HAL_RTC_MspInit+0x40>)
 8000608:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800060c:	61d3      	str	r3, [r2, #28]
 800060e:	4b07      	ldr	r3, [pc, #28]	; (800062c <HAL_RTC_MspInit+0x40>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <HAL_RTC_MspInit+0x44>)
 800061c:	2201      	movs	r2, #1
 800061e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40002800 	.word	0x40002800
 800062c:	40021000 	.word	0x40021000
 8000630:	4242043c 	.word	0x4242043c

08000634 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a1c      	ldr	r2, [pc, #112]	; (80006c0 <HAL_SPI_MspInit+0x8c>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d131      	bne.n	80006b8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <HAL_SPI_MspInit+0x90>)
 8000656:	69db      	ldr	r3, [r3, #28]
 8000658:	4a1a      	ldr	r2, [pc, #104]	; (80006c4 <HAL_SPI_MspInit+0x90>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065e:	61d3      	str	r3, [r2, #28]
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <HAL_SPI_MspInit+0x90>)
 8000662:	69db      	ldr	r3, [r3, #28]
 8000664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <HAL_SPI_MspInit+0x90>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <HAL_SPI_MspInit+0x90>)
 8000672:	f043 0308 	orr.w	r3, r3, #8
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <HAL_SPI_MspInit+0x90>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f003 0308 	and.w	r3, r3, #8
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000684:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000688:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068e:	2303      	movs	r3, #3
 8000690:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000692:	f107 0310 	add.w	r3, r7, #16
 8000696:	4619      	mov	r1, r3
 8000698:	480b      	ldr	r0, [pc, #44]	; (80006c8 <HAL_SPI_MspInit+0x94>)
 800069a:	f000 fc41 	bl	8000f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800069e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4619      	mov	r1, r3
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <HAL_SPI_MspInit+0x94>)
 80006b4:	f000 fc34 	bl	8000f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40003800 	.word	0x40003800
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010c00 	.word	0x40010c00

080006cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 0310 	add.w	r3, r7, #16
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a1b      	ldr	r2, [pc, #108]	; (8000754 <HAL_UART_MspInit+0x88>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d12f      	bne.n	800074c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <HAL_UART_MspInit+0x8c>)
 80006ee:	69db      	ldr	r3, [r3, #28]
 80006f0:	4a19      	ldr	r2, [pc, #100]	; (8000758 <HAL_UART_MspInit+0x8c>)
 80006f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f6:	61d3      	str	r3, [r2, #28]
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <HAL_UART_MspInit+0x8c>)
 80006fa:	69db      	ldr	r3, [r3, #28]
 80006fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <HAL_UART_MspInit+0x8c>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a13      	ldr	r2, [pc, #76]	; (8000758 <HAL_UART_MspInit+0x8c>)
 800070a:	f043 0304 	orr.w	r3, r3, #4
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <HAL_UART_MspInit+0x8c>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800071c:	2304      	movs	r3, #4
 800071e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000724:	2303      	movs	r3, #3
 8000726:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	4619      	mov	r1, r3
 800072e:	480b      	ldr	r0, [pc, #44]	; (800075c <HAL_UART_MspInit+0x90>)
 8000730:	f000 fbf6 	bl	8000f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000734:	2308      	movs	r3, #8
 8000736:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	4619      	mov	r1, r3
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <HAL_UART_MspInit+0x90>)
 8000748:	f000 fbea 	bl	8000f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800074c:	bf00      	nop
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40004400 	.word	0x40004400
 8000758:	40021000 	.word	0x40021000
 800075c:	40010800 	.word	0x40010800

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <NMI_Handler+0x4>

08000766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <HardFault_Handler+0x4>

0800076c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <MemManage_Handler+0x4>

08000772 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <BusFault_Handler+0x4>

08000778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <UsageFault_Handler+0x4>

0800077e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr

0800078a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr

08000796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr

080007a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a6:	f000 f87f 	bl	80008a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007b4:	4802      	ldr	r0, [pc, #8]	; (80007c0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007b6:	f000 fe97 	bl	80014e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000ddc 	.word	0x20000ddc

080007c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d0:	480c      	ldr	r0, [pc, #48]	; (8000804 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007d2:	490d      	ldr	r1, [pc, #52]	; (8000808 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007d4:	4a0d      	ldr	r2, [pc, #52]	; (800080c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d8:	e002      	b.n	80007e0 <LoopCopyDataInit>

080007da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007de:	3304      	adds	r3, #4

080007e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e4:	d3f9      	bcc.n	80007da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007e8:	4c0a      	ldr	r4, [pc, #40]	; (8000814 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ec:	e001      	b.n	80007f2 <LoopFillZerobss>

080007ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f0:	3204      	adds	r2, #4

080007f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f4:	d3fb      	bcc.n	80007ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007f6:	f7ff ffe5 	bl	80007c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007fa:	f008 ff27 	bl	800964c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007fe:	f7ff fca5 	bl	800014c <main>
  bx lr
 8000802:	4770      	bx	lr
  ldr r0, =_sdata
 8000804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000808:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 800080c:	0800977c 	.word	0x0800977c
  ldr r2, =_sbss
 8000810:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8000814:	200010c8 	.word	0x200010c8

08000818 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000818:	e7fe      	b.n	8000818 <ADC1_2_IRQHandler>
	...

0800081c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <HAL_Init+0x28>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a07      	ldr	r2, [pc, #28]	; (8000844 <HAL_Init+0x28>)
 8000826:	f043 0310 	orr.w	r3, r3, #16
 800082a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800082c:	2003      	movs	r0, #3
 800082e:	f000 fb35 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000832:	200f      	movs	r0, #15
 8000834:	f000 f808 	bl	8000848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000838:	f7ff fe6a 	bl	8000510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40022000 	.word	0x40022000

08000848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <HAL_InitTick+0x54>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <HAL_InitTick+0x58>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	4619      	mov	r1, r3
 800085a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000862:	fbb2 f3f3 	udiv	r3, r2, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f000 fb4d 	bl	8000f06 <HAL_SYSTICK_Config>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	e00e      	b.n	8000894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b0f      	cmp	r3, #15
 800087a:	d80a      	bhi.n	8000892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800087c:	2200      	movs	r2, #0
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	f000 fb15 	bl	8000eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000888:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <HAL_InitTick+0x5c>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800088e:	2300      	movs	r3, #0
 8000890:	e000      	b.n	8000894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000000 	.word	0x20000000
 80008a0:	20000008 	.word	0x20000008
 80008a4:	20000004 	.word	0x20000004

080008a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008ac:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <HAL_IncTick+0x1c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <HAL_IncTick+0x20>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4413      	add	r3, r2
 80008b8:	4a03      	ldr	r2, [pc, #12]	; (80008c8 <HAL_IncTick+0x20>)
 80008ba:	6013      	str	r3, [r2, #0]
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	20000008 	.word	0x20000008
 80008c8:	200004b0 	.word	0x200004b0

080008cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return uwTick;
 80008d0:	4b02      	ldr	r3, [pc, #8]	; (80008dc <HAL_GetTick+0x10>)
 80008d2:	681b      	ldr	r3, [r3, #0]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	200004b0 	.word	0x200004b0

080008e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008e8:	2300      	movs	r3, #0
 80008ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80008ec:	2300      	movs	r3, #0
 80008ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d101      	bne.n	8000902 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e0be      	b.n	8000a80 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800090c:	2b00      	cmp	r3, #0
 800090e:	d109      	bne.n	8000924 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2200      	movs	r2, #0
 8000914:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2200      	movs	r2, #0
 800091a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff fe28 	bl	8000574 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f000 f9ab 	bl	8000c80 <ADC_ConversionStop_Disable>
 800092a:	4603      	mov	r3, r0
 800092c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000932:	f003 0310 	and.w	r3, r3, #16
 8000936:	2b00      	cmp	r3, #0
 8000938:	f040 8099 	bne.w	8000a6e <HAL_ADC_Init+0x18e>
 800093c:	7dfb      	ldrb	r3, [r7, #23]
 800093e:	2b00      	cmp	r3, #0
 8000940:	f040 8095 	bne.w	8000a6e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000948:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800094c:	f023 0302 	bic.w	r3, r3, #2
 8000950:	f043 0202 	orr.w	r2, r3, #2
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000960:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	7b1b      	ldrb	r3, [r3, #12]
 8000966:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000968:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	4313      	orrs	r3, r2
 800096e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000978:	d003      	beq.n	8000982 <HAL_ADC_Init+0xa2>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d102      	bne.n	8000988 <HAL_ADC_Init+0xa8>
 8000982:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000986:	e000      	b.n	800098a <HAL_ADC_Init+0xaa>
 8000988:	2300      	movs	r3, #0
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	4313      	orrs	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	7d1b      	ldrb	r3, [r3, #20]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d119      	bne.n	80009cc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	7b1b      	ldrb	r3, [r3, #12]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d109      	bne.n	80009b4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	3b01      	subs	r3, #1
 80009a6:	035a      	lsls	r2, r3, #13
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	e00b      	b.n	80009cc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b8:	f043 0220 	orr.w	r2, r3, #32
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c4:	f043 0201 	orr.w	r2, r3, #1
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	430a      	orrs	r2, r1
 80009de:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	689a      	ldr	r2, [r3, #8]
 80009e6:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <HAL_ADC_Init+0x1a8>)
 80009e8:	4013      	ands	r3, r2
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	6812      	ldr	r2, [r2, #0]
 80009ee:	68b9      	ldr	r1, [r7, #8]
 80009f0:	430b      	orrs	r3, r1
 80009f2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009fc:	d003      	beq.n	8000a06 <HAL_ADC_Init+0x126>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d104      	bne.n	8000a10 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	691b      	ldr	r3, [r3, #16]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	051b      	lsls	r3, r3, #20
 8000a0e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a16:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	430a      	orrs	r2, r1
 8000a22:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	689a      	ldr	r2, [r3, #8]
 8000a2a:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <HAL_ADC_Init+0x1ac>)
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d10b      	bne.n	8000a4c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2200      	movs	r2, #0
 8000a38:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a3e:	f023 0303 	bic.w	r3, r3, #3
 8000a42:	f043 0201 	orr.w	r2, r3, #1
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a4a:	e018      	b.n	8000a7e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a50:	f023 0312 	bic.w	r3, r3, #18
 8000a54:	f043 0210 	orr.w	r2, r3, #16
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a60:	f043 0201 	orr.w	r2, r3, #1
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a6c:	e007      	b.n	8000a7e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a72:	f043 0210 	orr.w	r2, r3, #16
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3718      	adds	r7, #24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	ffe1f7fd 	.word	0xffe1f7fd
 8000a8c:	ff1f0efe 	.word	0xff1f0efe

08000a90 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d101      	bne.n	8000ab0 <HAL_ADC_ConfigChannel+0x20>
 8000aac:	2302      	movs	r3, #2
 8000aae:	e0dc      	b.n	8000c6a <HAL_ADC_ConfigChannel+0x1da>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	2b06      	cmp	r3, #6
 8000abe:	d81c      	bhi.n	8000afa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685a      	ldr	r2, [r3, #4]
 8000aca:	4613      	mov	r3, r2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	4413      	add	r3, r2
 8000ad0:	3b05      	subs	r3, #5
 8000ad2:	221f      	movs	r2, #31
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	4019      	ands	r1, r3
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	6818      	ldr	r0, [r3, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685a      	ldr	r2, [r3, #4]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	4413      	add	r3, r2
 8000aea:	3b05      	subs	r3, #5
 8000aec:	fa00 f203 	lsl.w	r2, r0, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	430a      	orrs	r2, r1
 8000af6:	635a      	str	r2, [r3, #52]	; 0x34
 8000af8:	e03c      	b.n	8000b74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	2b0c      	cmp	r3, #12
 8000b00:	d81c      	bhi.n	8000b3c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685a      	ldr	r2, [r3, #4]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	4413      	add	r3, r2
 8000b12:	3b23      	subs	r3, #35	; 0x23
 8000b14:	221f      	movs	r2, #31
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	4019      	ands	r1, r3
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	6818      	ldr	r0, [r3, #0]
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685a      	ldr	r2, [r3, #4]
 8000b26:	4613      	mov	r3, r2
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	4413      	add	r3, r2
 8000b2c:	3b23      	subs	r3, #35	; 0x23
 8000b2e:	fa00 f203 	lsl.w	r2, r0, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	430a      	orrs	r2, r1
 8000b38:	631a      	str	r2, [r3, #48]	; 0x30
 8000b3a:	e01b      	b.n	8000b74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685a      	ldr	r2, [r3, #4]
 8000b46:	4613      	mov	r3, r2
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	4413      	add	r3, r2
 8000b4c:	3b41      	subs	r3, #65	; 0x41
 8000b4e:	221f      	movs	r2, #31
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	43db      	mvns	r3, r3
 8000b56:	4019      	ands	r1, r3
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	6818      	ldr	r0, [r3, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	4613      	mov	r3, r2
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	4413      	add	r3, r2
 8000b66:	3b41      	subs	r3, #65	; 0x41
 8000b68:	fa00 f203 	lsl.w	r2, r0, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	430a      	orrs	r2, r1
 8000b72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b09      	cmp	r3, #9
 8000b7a:	d91c      	bls.n	8000bb6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	68d9      	ldr	r1, [r3, #12]
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	4613      	mov	r3, r2
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	4413      	add	r3, r2
 8000b8c:	3b1e      	subs	r3, #30
 8000b8e:	2207      	movs	r2, #7
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	4019      	ands	r1, r3
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	6898      	ldr	r0, [r3, #8]
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	4413      	add	r3, r2
 8000ba6:	3b1e      	subs	r3, #30
 8000ba8:	fa00 f203 	lsl.w	r2, r0, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	e019      	b.n	8000bea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	6919      	ldr	r1, [r3, #16]
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	4413      	add	r3, r2
 8000bc6:	2207      	movs	r2, #7
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	4019      	ands	r1, r3
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	6898      	ldr	r0, [r3, #8]
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	4413      	add	r3, r2
 8000bde:	fa00 f203 	lsl.w	r2, r0, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	430a      	orrs	r2, r1
 8000be8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b10      	cmp	r3, #16
 8000bf0:	d003      	beq.n	8000bfa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000bf6:	2b11      	cmp	r3, #17
 8000bf8:	d132      	bne.n	8000c60 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a1d      	ldr	r2, [pc, #116]	; (8000c74 <HAL_ADC_ConfigChannel+0x1e4>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d125      	bne.n	8000c50 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d126      	bne.n	8000c60 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	689a      	ldr	r2, [r3, #8]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000c20:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2b10      	cmp	r3, #16
 8000c28:	d11a      	bne.n	8000c60 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000c2a:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <HAL_ADC_ConfigChannel+0x1e8>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a13      	ldr	r2, [pc, #76]	; (8000c7c <HAL_ADC_ConfigChannel+0x1ec>)
 8000c30:	fba2 2303 	umull	r2, r3, r2, r3
 8000c34:	0c9a      	lsrs	r2, r3, #18
 8000c36:	4613      	mov	r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	4413      	add	r3, r2
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c40:	e002      	b.n	8000c48 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	3b01      	subs	r3, #1
 8000c46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d1f9      	bne.n	8000c42 <HAL_ADC_ConfigChannel+0x1b2>
 8000c4e:	e007      	b.n	8000c60 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c54:	f043 0220 	orr.w	r2, r3, #32
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr
 8000c74:	40012400 	.word	0x40012400
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	431bde83 	.word	0x431bde83

08000c80 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d12e      	bne.n	8000cf8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	689a      	ldr	r2, [r3, #8]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f022 0201 	bic.w	r2, r2, #1
 8000ca8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000caa:	f7ff fe0f 	bl	80008cc <HAL_GetTick>
 8000cae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000cb0:	e01b      	b.n	8000cea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000cb2:	f7ff fe0b 	bl	80008cc <HAL_GetTick>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d914      	bls.n	8000cea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d10d      	bne.n	8000cea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd2:	f043 0210 	orr.w	r2, r3, #16
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cde:	f043 0201 	orr.w	r2, r3, #1
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e007      	b.n	8000cfa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d0dc      	beq.n	8000cb2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d20:	4013      	ands	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d36:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	60d3      	str	r3, [r2, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <__NVIC_GetPriorityGrouping+0x18>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	f003 0307 	and.w	r3, r3, #7
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	db0b      	blt.n	8000d92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	f003 021f 	and.w	r2, r3, #31
 8000d80:	4906      	ldr	r1, [pc, #24]	; (8000d9c <__NVIC_EnableIRQ+0x34>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	095b      	lsrs	r3, r3, #5
 8000d88:	2001      	movs	r0, #1
 8000d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	e000e100 	.word	0xe000e100

08000da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	db0a      	blt.n	8000dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	490c      	ldr	r1, [pc, #48]	; (8000dec <__NVIC_SetPriority+0x4c>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	0112      	lsls	r2, r2, #4
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	440b      	add	r3, r1
 8000dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc8:	e00a      	b.n	8000de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4908      	ldr	r1, [pc, #32]	; (8000df0 <__NVIC_SetPriority+0x50>)
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	f003 030f 	and.w	r3, r3, #15
 8000dd6:	3b04      	subs	r3, #4
 8000dd8:	0112      	lsls	r2, r2, #4
 8000dda:	b2d2      	uxtb	r2, r2
 8000ddc:	440b      	add	r3, r1
 8000dde:	761a      	strb	r2, [r3, #24]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000e100 	.word	0xe000e100
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b089      	sub	sp, #36	; 0x24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f1c3 0307 	rsb	r3, r3, #7
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	bf28      	it	cs
 8000e12:	2304      	movcs	r3, #4
 8000e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	2b06      	cmp	r3, #6
 8000e1c:	d902      	bls.n	8000e24 <NVIC_EncodePriority+0x30>
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3b03      	subs	r3, #3
 8000e22:	e000      	b.n	8000e26 <NVIC_EncodePriority+0x32>
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43da      	mvns	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	401a      	ands	r2, r3
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	fa01 f303 	lsl.w	r3, r1, r3
 8000e46:	43d9      	mvns	r1, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	4313      	orrs	r3, r2
         );
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3724      	adds	r7, #36	; 0x24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e68:	d301      	bcc.n	8000e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00f      	b.n	8000e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <SysTick_Config+0x40>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e76:	210f      	movs	r1, #15
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f7ff ff90 	bl	8000da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <SysTick_Config+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <SysTick_Config+0x40>)
 8000e88:	2207      	movs	r2, #7
 8000e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	e000e010 	.word	0xe000e010

08000e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff2d 	bl	8000d04 <__NVIC_SetPriorityGrouping>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec4:	f7ff ff42 	bl	8000d4c <__NVIC_GetPriorityGrouping>
 8000ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	6978      	ldr	r0, [r7, #20]
 8000ed0:	f7ff ff90 	bl	8000df4 <NVIC_EncodePriority>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff5f 	bl	8000da0 <__NVIC_SetPriority>
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff35 	bl	8000d68 <__NVIC_EnableIRQ>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ffa2 	bl	8000e58 <SysTick_Config>
 8000f14:	4603      	mov	r3, r0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b08b      	sub	sp, #44	; 0x2c
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f32:	e169      	b.n	8001208 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f34:	2201      	movs	r2, #1
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	69fa      	ldr	r2, [r7, #28]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	f040 8158 	bne.w	8001202 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	4a9a      	ldr	r2, [pc, #616]	; (80011c0 <HAL_GPIO_Init+0x2a0>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d05e      	beq.n	800101a <HAL_GPIO_Init+0xfa>
 8000f5c:	4a98      	ldr	r2, [pc, #608]	; (80011c0 <HAL_GPIO_Init+0x2a0>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d875      	bhi.n	800104e <HAL_GPIO_Init+0x12e>
 8000f62:	4a98      	ldr	r2, [pc, #608]	; (80011c4 <HAL_GPIO_Init+0x2a4>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d058      	beq.n	800101a <HAL_GPIO_Init+0xfa>
 8000f68:	4a96      	ldr	r2, [pc, #600]	; (80011c4 <HAL_GPIO_Init+0x2a4>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d86f      	bhi.n	800104e <HAL_GPIO_Init+0x12e>
 8000f6e:	4a96      	ldr	r2, [pc, #600]	; (80011c8 <HAL_GPIO_Init+0x2a8>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d052      	beq.n	800101a <HAL_GPIO_Init+0xfa>
 8000f74:	4a94      	ldr	r2, [pc, #592]	; (80011c8 <HAL_GPIO_Init+0x2a8>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d869      	bhi.n	800104e <HAL_GPIO_Init+0x12e>
 8000f7a:	4a94      	ldr	r2, [pc, #592]	; (80011cc <HAL_GPIO_Init+0x2ac>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d04c      	beq.n	800101a <HAL_GPIO_Init+0xfa>
 8000f80:	4a92      	ldr	r2, [pc, #584]	; (80011cc <HAL_GPIO_Init+0x2ac>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d863      	bhi.n	800104e <HAL_GPIO_Init+0x12e>
 8000f86:	4a92      	ldr	r2, [pc, #584]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d046      	beq.n	800101a <HAL_GPIO_Init+0xfa>
 8000f8c:	4a90      	ldr	r2, [pc, #576]	; (80011d0 <HAL_GPIO_Init+0x2b0>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d85d      	bhi.n	800104e <HAL_GPIO_Init+0x12e>
 8000f92:	2b12      	cmp	r3, #18
 8000f94:	d82a      	bhi.n	8000fec <HAL_GPIO_Init+0xcc>
 8000f96:	2b12      	cmp	r3, #18
 8000f98:	d859      	bhi.n	800104e <HAL_GPIO_Init+0x12e>
 8000f9a:	a201      	add	r2, pc, #4	; (adr r2, 8000fa0 <HAL_GPIO_Init+0x80>)
 8000f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa0:	0800101b 	.word	0x0800101b
 8000fa4:	08000ff5 	.word	0x08000ff5
 8000fa8:	08001007 	.word	0x08001007
 8000fac:	08001049 	.word	0x08001049
 8000fb0:	0800104f 	.word	0x0800104f
 8000fb4:	0800104f 	.word	0x0800104f
 8000fb8:	0800104f 	.word	0x0800104f
 8000fbc:	0800104f 	.word	0x0800104f
 8000fc0:	0800104f 	.word	0x0800104f
 8000fc4:	0800104f 	.word	0x0800104f
 8000fc8:	0800104f 	.word	0x0800104f
 8000fcc:	0800104f 	.word	0x0800104f
 8000fd0:	0800104f 	.word	0x0800104f
 8000fd4:	0800104f 	.word	0x0800104f
 8000fd8:	0800104f 	.word	0x0800104f
 8000fdc:	0800104f 	.word	0x0800104f
 8000fe0:	0800104f 	.word	0x0800104f
 8000fe4:	08000ffd 	.word	0x08000ffd
 8000fe8:	08001011 	.word	0x08001011
 8000fec:	4a79      	ldr	r2, [pc, #484]	; (80011d4 <HAL_GPIO_Init+0x2b4>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d013      	beq.n	800101a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ff2:	e02c      	b.n	800104e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	623b      	str	r3, [r7, #32]
          break;
 8000ffa:	e029      	b.n	8001050 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	3304      	adds	r3, #4
 8001002:	623b      	str	r3, [r7, #32]
          break;
 8001004:	e024      	b.n	8001050 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	3308      	adds	r3, #8
 800100c:	623b      	str	r3, [r7, #32]
          break;
 800100e:	e01f      	b.n	8001050 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	330c      	adds	r3, #12
 8001016:	623b      	str	r3, [r7, #32]
          break;
 8001018:	e01a      	b.n	8001050 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d102      	bne.n	8001028 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001022:	2304      	movs	r3, #4
 8001024:	623b      	str	r3, [r7, #32]
          break;
 8001026:	e013      	b.n	8001050 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d105      	bne.n	800103c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001030:	2308      	movs	r3, #8
 8001032:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69fa      	ldr	r2, [r7, #28]
 8001038:	611a      	str	r2, [r3, #16]
          break;
 800103a:	e009      	b.n	8001050 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800103c:	2308      	movs	r3, #8
 800103e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69fa      	ldr	r2, [r7, #28]
 8001044:	615a      	str	r2, [r3, #20]
          break;
 8001046:	e003      	b.n	8001050 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001048:	2300      	movs	r3, #0
 800104a:	623b      	str	r3, [r7, #32]
          break;
 800104c:	e000      	b.n	8001050 <HAL_GPIO_Init+0x130>
          break;
 800104e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	2bff      	cmp	r3, #255	; 0xff
 8001054:	d801      	bhi.n	800105a <HAL_GPIO_Init+0x13a>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	e001      	b.n	800105e <HAL_GPIO_Init+0x13e>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3304      	adds	r3, #4
 800105e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	2bff      	cmp	r3, #255	; 0xff
 8001064:	d802      	bhi.n	800106c <HAL_GPIO_Init+0x14c>
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	e002      	b.n	8001072 <HAL_GPIO_Init+0x152>
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	3b08      	subs	r3, #8
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	210f      	movs	r1, #15
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	fa01 f303 	lsl.w	r3, r1, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	401a      	ands	r2, r3
 8001084:	6a39      	ldr	r1, [r7, #32]
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	fa01 f303 	lsl.w	r3, r1, r3
 800108c:	431a      	orrs	r2, r3
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 80b1 	beq.w	8001202 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010a0:	4b4d      	ldr	r3, [pc, #308]	; (80011d8 <HAL_GPIO_Init+0x2b8>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	4a4c      	ldr	r2, [pc, #304]	; (80011d8 <HAL_GPIO_Init+0x2b8>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	6193      	str	r3, [r2, #24]
 80010ac:	4b4a      	ldr	r3, [pc, #296]	; (80011d8 <HAL_GPIO_Init+0x2b8>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010b8:	4a48      	ldr	r2, [pc, #288]	; (80011dc <HAL_GPIO_Init+0x2bc>)
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	089b      	lsrs	r3, r3, #2
 80010be:	3302      	adds	r3, #2
 80010c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	220f      	movs	r2, #15
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	4013      	ands	r3, r2
 80010da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a40      	ldr	r2, [pc, #256]	; (80011e0 <HAL_GPIO_Init+0x2c0>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d013      	beq.n	800110c <HAL_GPIO_Init+0x1ec>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a3f      	ldr	r2, [pc, #252]	; (80011e4 <HAL_GPIO_Init+0x2c4>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d00d      	beq.n	8001108 <HAL_GPIO_Init+0x1e8>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a3e      	ldr	r2, [pc, #248]	; (80011e8 <HAL_GPIO_Init+0x2c8>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d007      	beq.n	8001104 <HAL_GPIO_Init+0x1e4>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a3d      	ldr	r2, [pc, #244]	; (80011ec <HAL_GPIO_Init+0x2cc>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d101      	bne.n	8001100 <HAL_GPIO_Init+0x1e0>
 80010fc:	2303      	movs	r3, #3
 80010fe:	e006      	b.n	800110e <HAL_GPIO_Init+0x1ee>
 8001100:	2304      	movs	r3, #4
 8001102:	e004      	b.n	800110e <HAL_GPIO_Init+0x1ee>
 8001104:	2302      	movs	r3, #2
 8001106:	e002      	b.n	800110e <HAL_GPIO_Init+0x1ee>
 8001108:	2301      	movs	r3, #1
 800110a:	e000      	b.n	800110e <HAL_GPIO_Init+0x1ee>
 800110c:	2300      	movs	r3, #0
 800110e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001110:	f002 0203 	and.w	r2, r2, #3
 8001114:	0092      	lsls	r2, r2, #2
 8001116:	4093      	lsls	r3, r2
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	4313      	orrs	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800111e:	492f      	ldr	r1, [pc, #188]	; (80011dc <HAL_GPIO_Init+0x2bc>)
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	089b      	lsrs	r3, r3, #2
 8001124:	3302      	adds	r3, #2
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d006      	beq.n	8001146 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001138:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	492c      	ldr	r1, [pc, #176]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	600b      	str	r3, [r1, #0]
 8001144:	e006      	b.n	8001154 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001146:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	43db      	mvns	r3, r3
 800114e:	4928      	ldr	r1, [pc, #160]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001150:	4013      	ands	r3, r2
 8001152:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d006      	beq.n	800116e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001160:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	4922      	ldr	r1, [pc, #136]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	604b      	str	r3, [r1, #4]
 800116c:	e006      	b.n	800117c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	43db      	mvns	r3, r3
 8001176:	491e      	ldr	r1, [pc, #120]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001178:	4013      	ands	r3, r2
 800117a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d006      	beq.n	8001196 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	4918      	ldr	r1, [pc, #96]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	608b      	str	r3, [r1, #8]
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001196:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	43db      	mvns	r3, r3
 800119e:	4914      	ldr	r1, [pc, #80]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d021      	beq.n	80011f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	490e      	ldr	r1, [pc, #56]	; (80011f0 <HAL_GPIO_Init+0x2d0>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	60cb      	str	r3, [r1, #12]
 80011bc:	e021      	b.n	8001202 <HAL_GPIO_Init+0x2e2>
 80011be:	bf00      	nop
 80011c0:	10320000 	.word	0x10320000
 80011c4:	10310000 	.word	0x10310000
 80011c8:	10220000 	.word	0x10220000
 80011cc:	10210000 	.word	0x10210000
 80011d0:	10120000 	.word	0x10120000
 80011d4:	10110000 	.word	0x10110000
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010000 	.word	0x40010000
 80011e0:	40010800 	.word	0x40010800
 80011e4:	40010c00 	.word	0x40010c00
 80011e8:	40011000 	.word	0x40011000
 80011ec:	40011400 	.word	0x40011400
 80011f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_GPIO_Init+0x304>)
 80011f6:	68da      	ldr	r2, [r3, #12]
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	4909      	ldr	r1, [pc, #36]	; (8001224 <HAL_GPIO_Init+0x304>)
 80011fe:	4013      	ands	r3, r2
 8001200:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	3301      	adds	r3, #1
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	fa22 f303 	lsr.w	r3, r2, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	f47f ae8e 	bne.w	8000f34 <HAL_GPIO_Init+0x14>
  }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	372c      	adds	r7, #44	; 0x2c
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	40010400 	.word	0x40010400

08001228 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	887b      	ldrh	r3, [r7, #2]
 800123a:	4013      	ands	r3, r2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d002      	beq.n	8001246 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001240:	2301      	movs	r3, #1
 8001242:	73fb      	strb	r3, [r7, #15]
 8001244:	e001      	b.n	800124a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001246:	2300      	movs	r3, #0
 8001248:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800124a:	7bfb      	ldrb	r3, [r7, #15]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr

08001256 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	460b      	mov	r3, r1
 8001260:	807b      	strh	r3, [r7, #2]
 8001262:	4613      	mov	r3, r2
 8001264:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001266:	787b      	ldrb	r3, [r7, #1]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126c:	887a      	ldrh	r2, [r7, #2]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001272:	e003      	b.n	800127c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001274:	887b      	ldrh	r3, [r7, #2]
 8001276:	041a      	lsls	r2, r3, #16
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	611a      	str	r2, [r3, #16]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr

08001286 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001286:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001288:	b08b      	sub	sp, #44	; 0x2c
 800128a:	af06      	add	r7, sp, #24
 800128c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e0fd      	b.n	8001494 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d106      	bne.n	80012b2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f007 ff0d 	bl	80090cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2203      	movs	r2, #3
 80012b6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f002 ff88 	bl	80041d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	687e      	ldr	r6, [r7, #4]
 80012cc:	466d      	mov	r5, sp
 80012ce:	f106 0410 	add.w	r4, r6, #16
 80012d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012d6:	6823      	ldr	r3, [r4, #0]
 80012d8:	602b      	str	r3, [r5, #0]
 80012da:	1d33      	adds	r3, r6, #4
 80012dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012de:	6838      	ldr	r0, [r7, #0]
 80012e0:	f002 ff52 	bl	8004188 <USB_CoreInit>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d005      	beq.n	80012f6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2202      	movs	r2, #2
 80012ee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e0ce      	b.n	8001494 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f002 ff83 	bl	8004208 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001302:	2300      	movs	r3, #0
 8001304:	73fb      	strb	r3, [r7, #15]
 8001306:	e04c      	b.n	80013a2 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	1c5a      	adds	r2, r3, #1
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	440b      	add	r3, r1
 8001318:	3301      	adds	r3, #1
 800131a:	2201      	movs	r2, #1
 800131c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	6879      	ldr	r1, [r7, #4]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	440b      	add	r3, r1
 800132e:	7bfa      	ldrb	r2, [r7, #15]
 8001330:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001332:	7bfa      	ldrb	r2, [r7, #15]
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	b298      	uxth	r0, r3
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	440b      	add	r3, r1
 8001344:	3336      	adds	r3, #54	; 0x36
 8001346:	4602      	mov	r2, r0
 8001348:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	4613      	mov	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	440b      	add	r3, r1
 800135a:	3303      	adds	r3, #3
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	440b      	add	r3, r1
 800136e:	3338      	adds	r3, #56	; 0x38
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	440b      	add	r3, r1
 8001382:	333c      	adds	r3, #60	; 0x3c
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001388:	7bfa      	ldrb	r2, [r7, #15]
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	440b      	add	r3, r1
 8001396:	3340      	adds	r3, #64	; 0x40
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	3301      	adds	r3, #1
 80013a0:	73fb      	strb	r3, [r7, #15]
 80013a2:	7bfa      	ldrb	r2, [r7, #15]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d3ad      	bcc.n	8001308 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ac:	2300      	movs	r3, #0
 80013ae:	73fb      	strb	r3, [r7, #15]
 80013b0:	e044      	b.n	800143c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013b2:	7bfa      	ldrb	r2, [r7, #15]
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	440b      	add	r3, r1
 80013c0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	440b      	add	r3, r1
 80013d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013da:	7bfa      	ldrb	r2, [r7, #15]
 80013dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	440b      	add	r3, r1
 80013ec:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013f4:	7bfa      	ldrb	r2, [r7, #15]
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	440b      	add	r3, r1
 8001402:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800140a:	7bfa      	ldrb	r2, [r7, #15]
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	4613      	mov	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	440b      	add	r3, r1
 8001418:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001420:	7bfa      	ldrb	r2, [r7, #15]
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	440b      	add	r3, r1
 800142e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	3301      	adds	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	429a      	cmp	r2, r3
 8001444:	d3b5      	bcc.n	80013b2 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	687e      	ldr	r6, [r7, #4]
 800144e:	466d      	mov	r5, sp
 8001450:	f106 0410 	add.w	r4, r6, #16
 8001454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001456:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001458:	6823      	ldr	r3, [r4, #0]
 800145a:	602b      	str	r3, [r5, #0]
 800145c:	1d33      	adds	r3, r6, #4
 800145e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001460:	6838      	ldr	r0, [r7, #0]
 8001462:	f002 fedd 	bl	8004220 <USB_DevInit>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2202      	movs	r2, #2
 8001470:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e00d      	b.n	8001494 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f005 f864 	bl	800655a <USB_DevDisconnect>

  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800149c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d101      	bne.n	80014b2 <HAL_PCD_Start+0x16>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e016      	b.n	80014e0 <HAL_PCD_Start+0x44>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f002 fe72 	bl	80041a8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80014c4:	2101      	movs	r1, #1
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f008 f889 	bl	80095de <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f005 f838 	bl	8006546 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f005 f83a 	bl	800656e <USB_ReadInterrupts>
 80014fa:	4603      	mov	r3, r0
 80014fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001504:	d102      	bne.n	800150c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 fb8e 	bl	8001c28 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f005 f82c 	bl	800656e <USB_ReadInterrupts>
 8001516:	4603      	mov	r3, r0
 8001518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001520:	d112      	bne.n	8001548 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800152a:	b29a      	uxth	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001534:	b292      	uxth	r2, r2
 8001536:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f007 fe41 	bl	80091c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001540:	2100      	movs	r1, #0
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f925 	bl	8001792 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f005 f80e 	bl	800656e <USB_ReadInterrupts>
 8001552:	4603      	mov	r3, r0
 8001554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001558:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800155c:	d10b      	bne.n	8001576 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001566:	b29a      	uxth	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001570:	b292      	uxth	r2, r2
 8001572:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f004 fff7 	bl	800656e <USB_ReadInterrupts>
 8001580:	4603      	mov	r3, r0
 8001582:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800158a:	d10b      	bne.n	80015a4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001594:	b29a      	uxth	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800159e:	b292      	uxth	r2, r2
 80015a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f004 ffe0 	bl	800656e <USB_ReadInterrupts>
 80015ae:	4603      	mov	r3, r0
 80015b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015b8:	d126      	bne.n	8001608 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 0204 	bic.w	r2, r2, #4
 80015cc:	b292      	uxth	r2, r2
 80015ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015da:	b29a      	uxth	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 0208 	bic.w	r2, r2, #8
 80015e4:	b292      	uxth	r2, r2
 80015e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f007 fe22 	bl	8009234 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001602:	b292      	uxth	r2, r2
 8001604:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f004 ffae 	bl	800656e <USB_ReadInterrupts>
 8001612:	4603      	mov	r3, r0
 8001614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800161c:	f040 8084 	bne.w	8001728 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001620:	2300      	movs	r3, #0
 8001622:	77fb      	strb	r3, [r7, #31]
 8001624:	e011      	b.n	800164a <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	7ffb      	ldrb	r3, [r7, #31]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	441a      	add	r2, r3
 8001632:	7ffb      	ldrb	r3, [r7, #31]
 8001634:	8812      	ldrh	r2, [r2, #0]
 8001636:	b292      	uxth	r2, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	f107 0120 	add.w	r1, r7, #32
 800163e:	440b      	add	r3, r1
 8001640:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001644:	7ffb      	ldrb	r3, [r7, #31]
 8001646:	3301      	adds	r3, #1
 8001648:	77fb      	strb	r3, [r7, #31]
 800164a:	7ffb      	ldrb	r3, [r7, #31]
 800164c:	2b07      	cmp	r3, #7
 800164e:	d9ea      	bls.n	8001626 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001658:	b29a      	uxth	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0201 	orr.w	r2, r2, #1
 8001662:	b292      	uxth	r2, r2
 8001664:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001670:	b29a      	uxth	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0201 	bic.w	r2, r2, #1
 800167a:	b292      	uxth	r2, r2
 800167c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001680:	bf00      	nop
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800168a:	b29b      	uxth	r3, r3
 800168c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f6      	beq.n	8001682 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800169c:	b29a      	uxth	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016a6:	b292      	uxth	r2, r2
 80016a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80016ac:	2300      	movs	r3, #0
 80016ae:	77fb      	strb	r3, [r7, #31]
 80016b0:	e010      	b.n	80016d4 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80016b2:	7ffb      	ldrb	r3, [r7, #31]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	4611      	mov	r1, r2
 80016ba:	7ffa      	ldrb	r2, [r7, #31]
 80016bc:	0092      	lsls	r2, r2, #2
 80016be:	440a      	add	r2, r1
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	f107 0120 	add.w	r1, r7, #32
 80016c6:	440b      	add	r3, r1
 80016c8:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80016cc:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80016ce:	7ffb      	ldrb	r3, [r7, #31]
 80016d0:	3301      	adds	r3, #1
 80016d2:	77fb      	strb	r3, [r7, #31]
 80016d4:	7ffb      	ldrb	r3, [r7, #31]
 80016d6:	2b07      	cmp	r3, #7
 80016d8:	d9eb      	bls.n	80016b2 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f042 0208 	orr.w	r2, r2, #8
 80016ec:	b292      	uxth	r2, r2
 80016ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001704:	b292      	uxth	r2, r2
 8001706:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001712:	b29a      	uxth	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f042 0204 	orr.w	r2, r2, #4
 800171c:	b292      	uxth	r2, r2
 800171e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f007 fd6c 	bl	8009200 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f004 ff1e 	bl	800656e <USB_ReadInterrupts>
 8001732:	4603      	mov	r3, r0
 8001734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800173c:	d10e      	bne.n	800175c <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001746:	b29a      	uxth	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001750:	b292      	uxth	r2, r2
 8001752:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f007 fd25 	bl	80091a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f004 ff04 	bl	800656e <USB_ReadInterrupts>
 8001766:	4603      	mov	r3, r0
 8001768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001770:	d10b      	bne.n	800178a <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800177a:	b29a      	uxth	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001784:	b292      	uxth	r2, r2
 8001786:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800178a:	bf00      	nop
 800178c:	3720      	adds	r7, #32
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	460b      	mov	r3, r1
 800179c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d101      	bne.n	80017ac <HAL_PCD_SetAddress+0x1a>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e013      	b.n	80017d4 <HAL_PCD_SetAddress+0x42>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	78fa      	ldrb	r2, [r7, #3]
 80017b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	78fa      	ldrb	r2, [r7, #3]
 80017c2:	4611      	mov	r1, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f004 feab 	bl	8006520 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	4608      	mov	r0, r1
 80017e6:	4611      	mov	r1, r2
 80017e8:	461a      	mov	r2, r3
 80017ea:	4603      	mov	r3, r0
 80017ec:	70fb      	strb	r3, [r7, #3]
 80017ee:	460b      	mov	r3, r1
 80017f0:	803b      	strh	r3, [r7, #0]
 80017f2:	4613      	mov	r3, r2
 80017f4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	da0e      	bge.n	8001820 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001802:	78fb      	ldrb	r3, [r7, #3]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	1c5a      	adds	r2, r3, #1
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2201      	movs	r2, #1
 800181c:	705a      	strb	r2, [r3, #1]
 800181e:	e00e      	b.n	800183e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001820:	78fb      	ldrb	r3, [r7, #3]
 8001822:	f003 0207 	and.w	r2, r3, #7
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800183e:	78fb      	ldrb	r3, [r7, #3]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	b2da      	uxtb	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800184a:	883a      	ldrh	r2, [r7, #0]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	78ba      	ldrb	r2, [r7, #2]
 8001854:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	785b      	ldrb	r3, [r3, #1]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d004      	beq.n	8001868 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	b29a      	uxth	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001868:	78bb      	ldrb	r3, [r7, #2]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d102      	bne.n	8001874 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2200      	movs	r2, #0
 8001872:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800187a:	2b01      	cmp	r3, #1
 800187c:	d101      	bne.n	8001882 <HAL_PCD_EP_Open+0xa6>
 800187e:	2302      	movs	r3, #2
 8001880:	e00e      	b.n	80018a0 <HAL_PCD_EP_Open+0xc4>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68f9      	ldr	r1, [r7, #12]
 8001890:	4618      	mov	r0, r3
 8001892:	f002 fcfb 	bl	800428c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800189e:	7afb      	ldrb	r3, [r7, #11]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	da0e      	bge.n	80018da <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018bc:	78fb      	ldrb	r3, [r7, #3]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	4413      	add	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2201      	movs	r2, #1
 80018d6:	705a      	strb	r2, [r3, #1]
 80018d8:	e00e      	b.n	80018f8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018da:	78fb      	ldrb	r3, [r7, #3]
 80018dc:	f003 0207 	and.w	r2, r3, #7
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	4413      	add	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800190a:	2b01      	cmp	r3, #1
 800190c:	d101      	bne.n	8001912 <HAL_PCD_EP_Close+0x6a>
 800190e:	2302      	movs	r3, #2
 8001910:	e00e      	b.n	8001930 <HAL_PCD_EP_Close+0x88>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68f9      	ldr	r1, [r7, #12]
 8001920:	4618      	mov	r0, r3
 8001922:	f003 f81d 	bl	8004960 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	607a      	str	r2, [r7, #4]
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	460b      	mov	r3, r1
 8001946:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001948:	7afb      	ldrb	r3, [r7, #11]
 800194a:	f003 0207 	and.w	r2, r3, #7
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	4413      	add	r3, r2
 800195e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	2200      	movs	r2, #0
 8001970:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	2200      	movs	r2, #0
 8001976:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001978:	7afb      	ldrb	r3, [r7, #11]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	b2da      	uxtb	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001984:	7afb      	ldrb	r3, [r7, #11]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	2b00      	cmp	r3, #0
 800198c:	d106      	bne.n	800199c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6979      	ldr	r1, [r7, #20]
 8001994:	4618      	mov	r0, r3
 8001996:	f003 f9cf 	bl	8004d38 <USB_EPStartXfer>
 800199a:	e005      	b.n	80019a8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6979      	ldr	r1, [r7, #20]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f003 f9c8 	bl	8004d38 <USB_EPStartXfer>
  }

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	460b      	mov	r3, r1
 80019bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80019be:	78fb      	ldrb	r3, [r7, #3]
 80019c0:	f003 0207 	and.w	r2, r3, #7
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	440b      	add	r3, r1
 80019d0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80019d4:	681b      	ldr	r3, [r3, #0]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	607a      	str	r2, [r7, #4]
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	460b      	mov	r3, r1
 80019ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019f0:	7afb      	ldrb	r3, [r7, #11]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	1c5a      	adds	r2, r3, #1
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	4413      	add	r3, r2
 8001a04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a2c:	7afb      	ldrb	r3, [r7, #11]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a38:	7afb      	ldrb	r3, [r7, #11]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d106      	bne.n	8001a50 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6979      	ldr	r1, [r7, #20]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f003 f975 	bl	8004d38 <USB_EPStartXfer>
 8001a4e:	e005      	b.n	8001a5c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6979      	ldr	r1, [r7, #20]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f003 f96e 	bl	8004d38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a72:	78fb      	ldrb	r3, [r7, #3]
 8001a74:	f003 0207 	and.w	r2, r3, #7
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d901      	bls.n	8001a84 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e04c      	b.n	8001b1e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	da0e      	bge.n	8001aaa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	705a      	strb	r2, [r3, #1]
 8001aa8:	e00c      	b.n	8001ac4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001aaa:	78fa      	ldrb	r2, [r7, #3]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	4413      	add	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <HAL_PCD_EP_SetStall+0x7e>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e01c      	b.n	8001b1e <HAL_PCD_EP_SetStall+0xb8>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68f9      	ldr	r1, [r7, #12]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f004 fc17 	bl	8006326 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d108      	bne.n	8001b14 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4610      	mov	r0, r2
 8001b10:	f004 fd3c 	bl	800658c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b084      	sub	sp, #16
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	460b      	mov	r3, r1
 8001b30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	f003 020f 	and.w	r2, r3, #15
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d901      	bls.n	8001b44 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e040      	b.n	8001bc6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	da0e      	bge.n	8001b6a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	1c5a      	adds	r2, r3, #1
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4413      	add	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2201      	movs	r2, #1
 8001b66:	705a      	strb	r2, [r3, #1]
 8001b68:	e00e      	b.n	8001b88 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	f003 0207 	and.w	r2, r3, #7
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	4413      	add	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b8e:	78fb      	ldrb	r3, [r7, #3]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_PCD_EP_ClrStall+0x82>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e00e      	b.n	8001bc6 <HAL_PCD_EP_ClrStall+0xa0>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68f9      	ldr	r1, [r7, #12]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f004 fc05 	bl	80063c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_PCD_EP_Flush+0x1a>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e01b      	b.n	8001c20 <HAL_PCD_EP_Flush+0x52>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 8001bf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	da09      	bge.n	8001c0c <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	4619      	mov	r1, r3
 8001c04:	4610      	mov	r0, r2
 8001c06:	f002 fb2b 	bl	8004260 <USB_FlushTxFifo>
 8001c0a:	e004      	b.n	8001c16 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f002 fb30 	bl	8004276 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08e      	sub	sp, #56	; 0x38
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c30:	e2ec      	b.n	800220c <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c3a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001c3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	f003 030f 	and.w	r3, r3, #15
 8001c44:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001c48:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f040 8161 	bne.w	8001f14 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001c52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c54:	f003 0310 	and.w	r3, r3, #16
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d152      	bne.n	8001d02 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c6c:	81fb      	strh	r3, [r7, #14]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	89fb      	ldrh	r3, [r7, #14]
 8001c74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3328      	adds	r3, #40	; 0x28
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4413      	add	r3, r2
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	695a      	ldr	r2, [r3, #20]
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	441a      	add	r2, r3
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f007 fa55 	bl	8009172 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 829b 	beq.w	800220c <PCD_EP_ISR_Handler+0x5e4>
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f040 8296 	bne.w	800220c <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	b292      	uxth	r2, r2
 8001cf4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001d00:	e284      	b.n	800220c <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d034      	beq.n	8001d86 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4413      	add	r3, r2
 8001d30:	3306      	adds	r3, #6
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	4413      	add	r3, r2
 8001d3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	f004 fc66 	bl	800662c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	823b      	strh	r3, [r7, #16]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	8a3a      	ldrh	r2, [r7, #16]
 8001d76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d7a:	b292      	uxth	r2, r2
 8001d7c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f007 f9ca 	bl	8009118 <HAL_PCD_SetupStageCallback>
 8001d84:	e242      	b.n	800220c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d86:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f280 823e 	bge.w	800220c <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	83bb      	strh	r3, [r7, #28]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	8bba      	ldrh	r2, [r7, #28]
 8001da6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001daa:	b292      	uxth	r2, r2
 8001dac:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3306      	adds	r3, #6
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d019      	beq.n	8001e16 <PCD_EP_ISR_Handler+0x1ee>
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d015      	beq.n	8001e16 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	6959      	ldr	r1, [r3, #20]
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	f004 fc16 	bl	800662c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	695a      	ldr	r2, [r3, #20]
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	441a      	add	r2, r3
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e0e:	2100      	movs	r1, #0
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f007 f993 	bl	800913c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f040 81f2 	bne.w	800220c <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	61bb      	str	r3, [r7, #24]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	461a      	mov	r2, r3
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d112      	bne.n	8001e76 <PCD_EP_ISR_Handler+0x24e>
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	801a      	strh	r2, [r3, #0]
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	801a      	strh	r2, [r3, #0]
 8001e74:	e02f      	b.n	8001ed6 <PCD_EP_ISR_Handler+0x2ae>
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	2b3e      	cmp	r3, #62	; 0x3e
 8001e7c:	d813      	bhi.n	8001ea6 <PCD_EP_ISR_Handler+0x27e>
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	085b      	lsrs	r3, r3, #1
 8001e84:	633b      	str	r3, [r7, #48]	; 0x30
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <PCD_EP_ISR_Handler+0x270>
 8001e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e94:	3301      	adds	r3, #1
 8001e96:	633b      	str	r3, [r7, #48]	; 0x30
 8001e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	029b      	lsls	r3, r3, #10
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	801a      	strh	r2, [r3, #0]
 8001ea4:	e017      	b.n	8001ed6 <PCD_EP_ISR_Handler+0x2ae>
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	633b      	str	r3, [r7, #48]	; 0x30
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	f003 031f 	and.w	r3, r3, #31
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d102      	bne.n	8001ec0 <PCD_EP_ISR_Handler+0x298>
 8001eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	633b      	str	r3, [r7, #48]	; 0x30
 8001ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	029b      	lsls	r3, r3, #10
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ee6:	827b      	strh	r3, [r7, #18]
 8001ee8:	8a7b      	ldrh	r3, [r7, #18]
 8001eea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001eee:	827b      	strh	r3, [r7, #18]
 8001ef0:	8a7b      	ldrh	r3, [r7, #18]
 8001ef2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ef6:	827b      	strh	r3, [r7, #18]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	8a7b      	ldrh	r3, [r7, #18]
 8001efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	8013      	strh	r3, [r2, #0]
 8001f12:	e17b      	b.n	800220c <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f26:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f280 80ea 	bge.w	8002104 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f46:	4013      	ands	r3, r2
 8001f48:	853b      	strh	r3, [r7, #40]	; 0x28
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f5e:	b292      	uxth	r2, r2
 8001f60:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001f62:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	7b1b      	ldrb	r3, [r3, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d122      	bne.n	8001fc6 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	3306      	adds	r3, #6
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6812      	ldr	r2, [r2, #0]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fa8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001faa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 8087 	beq.w	80020c0 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	6959      	ldr	r1, [r3, #20]
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	88da      	ldrh	r2, [r3, #6]
 8001fbe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fc0:	f004 fb34 	bl	800662c <USB_ReadPMA>
 8001fc4:	e07c      	b.n	80020c0 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	78db      	ldrb	r3, [r3, #3]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d108      	bne.n	8001fe0 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001fce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f927 	bl	8002228 <HAL_PCD_EP_DB_Receive>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001fde:	e06f      	b.n	80020c0 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ffa:	847b      	strh	r3, [r7, #34]	; 0x22
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	441a      	add	r2, r3
 800200a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800200c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002018:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800201c:	b29b      	uxth	r3, r3
 800201e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	b29b      	uxth	r3, r3
 8002032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d021      	beq.n	800207e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002042:	b29b      	uxth	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4413      	add	r3, r2
 800204e:	3302      	adds	r3, #2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	4413      	add	r3, r2
 8002058:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002062:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002064:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002066:	2b00      	cmp	r3, #0
 8002068:	d02a      	beq.n	80020c0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6818      	ldr	r0, [r3, #0]
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	6959      	ldr	r1, [r3, #20]
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	891a      	ldrh	r2, [r3, #8]
 8002076:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002078:	f004 fad8 	bl	800662c <USB_ReadPMA>
 800207c:	e020      	b.n	80020c0 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002086:	b29b      	uxth	r3, r3
 8002088:	461a      	mov	r2, r3
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4413      	add	r3, r2
 8002092:	3306      	adds	r3, #6
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6812      	ldr	r2, [r2, #0]
 800209a:	4413      	add	r3, r2
 800209c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020a6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80020a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d008      	beq.n	80020c0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	6959      	ldr	r1, [r3, #20]
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	895a      	ldrh	r2, [r3, #10]
 80020ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020bc:	f004 fab6 	bl	800662c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	69da      	ldr	r2, [r3, #28]
 80020c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020c6:	441a      	add	r2, r3
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	695a      	ldr	r2, [r3, #20]
 80020d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020d2:	441a      	add	r2, r3
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d004      	beq.n	80020ea <PCD_EP_ISR_Handler+0x4c2>
 80020e0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d206      	bcs.n	80020f8 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	4619      	mov	r1, r3
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f007 f823 	bl	800913c <HAL_PCD_DataOutStageCallback>
 80020f6:	e005      	b.n	8002104 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020fe:	4618      	mov	r0, r3
 8002100:	f002 fe1a 	bl	8004d38 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002104:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210a:	2b00      	cmp	r3, #0
 800210c:	d07e      	beq.n	800220c <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800210e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	4413      	add	r3, r2
 8002120:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800213c:	843b      	strh	r3, [r7, #32]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	461a      	mov	r2, r3
 8002144:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	441a      	add	r2, r3
 800214c:	8c3b      	ldrh	r3, [r7, #32]
 800214e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002156:	b29b      	uxth	r3, r3
 8002158:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	78db      	ldrb	r3, [r3, #3]
 800215e:	2b03      	cmp	r3, #3
 8002160:	d00c      	beq.n	800217c <PCD_EP_ISR_Handler+0x554>
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	78db      	ldrb	r3, [r3, #3]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d008      	beq.n	800217c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800216e:	2b02      	cmp	r3, #2
 8002170:	d146      	bne.n	8002200 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002172:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002178:	2b00      	cmp	r3, #0
 800217a:	d141      	bne.n	8002200 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002184:	b29b      	uxth	r3, r3
 8002186:	461a      	mov	r2, r3
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4413      	add	r3, r2
 8002190:	3302      	adds	r3, #2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	4413      	add	r3, r2
 800219a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021a4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	699a      	ldr	r2, [r3, #24]
 80021aa:	8bfb      	ldrh	r3, [r7, #30]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d906      	bls.n	80021be <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	699a      	ldr	r2, [r3, #24]
 80021b4:	8bfb      	ldrh	r3, [r7, #30]
 80021b6:	1ad2      	subs	r2, r2, r3
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	619a      	str	r2, [r3, #24]
 80021bc:	e002      	b.n	80021c4 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d106      	bne.n	80021da <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4619      	mov	r1, r3
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f006 ffcd 	bl	8009172 <HAL_PCD_DataInStageCallback>
 80021d8:	e018      	b.n	800220c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	695a      	ldr	r2, [r3, #20]
 80021de:	8bfb      	ldrh	r3, [r7, #30]
 80021e0:	441a      	add	r2, r3
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	69da      	ldr	r2, [r3, #28]
 80021ea:	8bfb      	ldrh	r3, [r7, #30]
 80021ec:	441a      	add	r2, r3
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021f8:	4618      	mov	r0, r3
 80021fa:	f002 fd9d 	bl	8004d38 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80021fe:	e005      	b.n	800220c <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002200:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002202:	461a      	mov	r2, r3
 8002204:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f91b 	bl	8002442 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002214:	b29b      	uxth	r3, r3
 8002216:	b21b      	sxth	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	f6ff ad0a 	blt.w	8001c32 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3738      	adds	r7, #56	; 0x38
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	4613      	mov	r3, r2
 8002234:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d07e      	beq.n	800233e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002248:	b29b      	uxth	r3, r3
 800224a:	461a      	mov	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4413      	add	r3, r2
 8002254:	3302      	adds	r3, #2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	4413      	add	r3, r2
 800225e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002268:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	699a      	ldr	r2, [r3, #24]
 800226e:	8b7b      	ldrh	r3, [r7, #26]
 8002270:	429a      	cmp	r2, r3
 8002272:	d306      	bcc.n	8002282 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	699a      	ldr	r2, [r3, #24]
 8002278:	8b7b      	ldrh	r3, [r7, #26]
 800227a:	1ad2      	subs	r2, r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	619a      	str	r2, [r3, #24]
 8002280:	e002      	b.n	8002288 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2200      	movs	r2, #0
 8002286:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d123      	bne.n	80022d8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022aa:	833b      	strh	r3, [r7, #24]
 80022ac:	8b3b      	ldrh	r3, [r7, #24]
 80022ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022b2:	833b      	strh	r3, [r7, #24]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	441a      	add	r2, r3
 80022c2:	8b3b      	ldrh	r3, [r7, #24]
 80022c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022d8:	88fb      	ldrh	r3, [r7, #6]
 80022da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d01f      	beq.n	8002322 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022fc:	82fb      	strh	r3, [r7, #22]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	441a      	add	r2, r3
 800230c:	8afb      	ldrh	r3, [r7, #22]
 800230e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800231a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800231e:	b29b      	uxth	r3, r3
 8002320:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002322:	8b7b      	ldrh	r3, [r7, #26]
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 8087 	beq.w	8002438 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	6959      	ldr	r1, [r3, #20]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	891a      	ldrh	r2, [r3, #8]
 8002336:	8b7b      	ldrh	r3, [r7, #26]
 8002338:	f004 f978 	bl	800662c <USB_ReadPMA>
 800233c:	e07c      	b.n	8002438 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002346:	b29b      	uxth	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4413      	add	r3, r2
 8002352:	3306      	adds	r3, #6
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	4413      	add	r3, r2
 800235c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002366:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	699a      	ldr	r2, [r3, #24]
 800236c:	8b7b      	ldrh	r3, [r7, #26]
 800236e:	429a      	cmp	r2, r3
 8002370:	d306      	bcc.n	8002380 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	699a      	ldr	r2, [r3, #24]
 8002376:	8b7b      	ldrh	r3, [r7, #26]
 8002378:	1ad2      	subs	r2, r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	619a      	str	r2, [r3, #24]
 800237e:	e002      	b.n	8002386 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2200      	movs	r2, #0
 8002384:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d123      	bne.n	80023d6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023a8:	83fb      	strh	r3, [r7, #30]
 80023aa:	8bfb      	ldrh	r3, [r7, #30]
 80023ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023b0:	83fb      	strh	r3, [r7, #30]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	441a      	add	r2, r3
 80023c0:	8bfb      	ldrh	r3, [r7, #30]
 80023c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80023d6:	88fb      	ldrh	r3, [r7, #6]
 80023d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d11f      	bne.n	8002420 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	461a      	mov	r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023fa:	83bb      	strh	r3, [r7, #28]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	461a      	mov	r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	441a      	add	r2, r3
 800240a:	8bbb      	ldrh	r3, [r7, #28]
 800240c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002410:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002418:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800241c:	b29b      	uxth	r3, r3
 800241e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002420:	8b7b      	ldrh	r3, [r7, #26]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d008      	beq.n	8002438 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	6959      	ldr	r1, [r3, #20]
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	895a      	ldrh	r2, [r3, #10]
 8002432:	8b7b      	ldrh	r3, [r7, #26]
 8002434:	f004 f8fa 	bl	800662c <USB_ReadPMA>
    }
  }

  return count;
 8002438:	8b7b      	ldrh	r3, [r7, #26]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3720      	adds	r7, #32
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b0a2      	sub	sp, #136	; 0x88
 8002446:	af00      	add	r7, sp, #0
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	4613      	mov	r3, r2
 800244e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002450:	88fb      	ldrh	r3, [r7, #6]
 8002452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 81c7 	beq.w	80027ea <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002464:	b29b      	uxth	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4413      	add	r3, r2
 8002470:	3302      	adds	r3, #2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	4413      	add	r3, r2
 800247a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002484:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	699a      	ldr	r2, [r3, #24]
 800248c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002490:	429a      	cmp	r2, r3
 8002492:	d907      	bls.n	80024a4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	699a      	ldr	r2, [r3, #24]
 8002498:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800249c:	1ad2      	subs	r2, r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	619a      	str	r2, [r3, #24]
 80024a2:	e002      	b.n	80024aa <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2200      	movs	r2, #0
 80024a8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f040 80b9 	bne.w	8002626 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	785b      	ldrb	r3, [r3, #1]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d126      	bne.n	800250a <HAL_PCD_EP_DB_Transmit+0xc8>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	461a      	mov	r2, r3
 80024ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d0:	4413      	add	r3, r2
 80024d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	011a      	lsls	r2, r3, #4
 80024da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024dc:	4413      	add	r3, r2
 80024de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	801a      	strh	r2, [r3, #0]
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002502:	b29a      	uxth	r2, r3
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	801a      	strh	r2, [r3, #0]
 8002508:	e01a      	b.n	8002540 <HAL_PCD_EP_DB_Transmit+0xfe>
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	785b      	ldrb	r3, [r3, #1]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d116      	bne.n	8002540 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	633b      	str	r3, [r7, #48]	; 0x30
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002520:	b29b      	uxth	r3, r3
 8002522:	461a      	mov	r2, r3
 8002524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002526:	4413      	add	r3, r2
 8002528:	633b      	str	r3, [r7, #48]	; 0x30
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	011a      	lsls	r2, r3, #4
 8002530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002532:	4413      	add	r3, r2
 8002534:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800253a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253c:	2200      	movs	r2, #0
 800253e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	623b      	str	r3, [r7, #32]
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	785b      	ldrb	r3, [r3, #1]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d126      	bne.n	800259c <HAL_PCD_EP_DB_Transmit+0x15a>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	61bb      	str	r3, [r7, #24]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800255c:	b29b      	uxth	r3, r3
 800255e:	461a      	mov	r2, r3
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	4413      	add	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	011a      	lsls	r2, r3, #4
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	4413      	add	r3, r2
 8002570:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002580:	b29a      	uxth	r2, r3
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	801a      	strh	r2, [r3, #0]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	b29b      	uxth	r3, r3
 800258c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002594:	b29a      	uxth	r2, r3
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	801a      	strh	r2, [r3, #0]
 800259a:	e017      	b.n	80025cc <HAL_PCD_EP_DB_Transmit+0x18a>
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	785b      	ldrb	r3, [r3, #1]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d113      	bne.n	80025cc <HAL_PCD_EP_DB_Transmit+0x18a>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	461a      	mov	r2, r3
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	4413      	add	r3, r2
 80025b4:	623b      	str	r3, [r7, #32]
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	011a      	lsls	r2, r3, #4
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	4413      	add	r3, r2
 80025c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025c4:	61fb      	str	r3, [r7, #28]
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	2200      	movs	r2, #0
 80025ca:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	4619      	mov	r1, r3
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f006 fdcd 	bl	8009172 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 82d4 	beq.w	8002b8c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fe:	827b      	strh	r3, [r7, #18]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	461a      	mov	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	441a      	add	r2, r3
 800260e:	8a7b      	ldrh	r3, [r7, #18]
 8002610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002618:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800261c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002620:	b29b      	uxth	r3, r3
 8002622:	8013      	strh	r3, [r2, #0]
 8002624:	e2b2      	b.n	8002b8c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d021      	beq.n	8002674 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	461a      	mov	r2, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	b29b      	uxth	r3, r3
 8002642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800264a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	441a      	add	r2, r3
 800265c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002668:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800266c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002670:	b29b      	uxth	r3, r3
 8002672:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800267a:	2b01      	cmp	r3, #1
 800267c:	f040 8286 	bne.w	8002b8c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002688:	441a      	add	r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	69da      	ldr	r2, [r3, #28]
 8002692:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002696:	441a      	add	r2, r3
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	6a1a      	ldr	r2, [r3, #32]
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d309      	bcc.n	80026bc <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	6a1a      	ldr	r2, [r3, #32]
 80026b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026b4:	1ad2      	subs	r2, r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	621a      	str	r2, [r3, #32]
 80026ba:	e015      	b.n	80026e8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d107      	bne.n	80026d4 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80026c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026c8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026d2:	e009      	b.n	80026e8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2200      	movs	r2, #0
 80026e6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	785b      	ldrb	r3, [r3, #1]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d155      	bne.n	800279c <HAL_PCD_EP_DB_Transmit+0x35a>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026fe:	b29b      	uxth	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002704:	4413      	add	r3, r2
 8002706:	63bb      	str	r3, [r7, #56]	; 0x38
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	011a      	lsls	r2, r3, #4
 800270e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002710:	4413      	add	r3, r2
 8002712:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002716:	637b      	str	r3, [r7, #52]	; 0x34
 8002718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800271a:	2b00      	cmp	r3, #0
 800271c:	d112      	bne.n	8002744 <HAL_PCD_EP_DB_Transmit+0x302>
 800271e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	b29b      	uxth	r3, r3
 8002724:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002728:	b29a      	uxth	r2, r3
 800272a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272c:	801a      	strh	r2, [r3, #0]
 800272e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	b29b      	uxth	r3, r3
 8002734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800273c:	b29a      	uxth	r2, r3
 800273e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002740:	801a      	strh	r2, [r3, #0]
 8002742:	e047      	b.n	80027d4 <HAL_PCD_EP_DB_Transmit+0x392>
 8002744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002746:	2b3e      	cmp	r3, #62	; 0x3e
 8002748:	d811      	bhi.n	800276e <HAL_PCD_EP_DB_Transmit+0x32c>
 800274a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800274c:	085b      	lsrs	r3, r3, #1
 800274e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <HAL_PCD_EP_DB_Transmit+0x31e>
 800275a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800275c:	3301      	adds	r3, #1
 800275e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002762:	b29b      	uxth	r3, r3
 8002764:	029b      	lsls	r3, r3, #10
 8002766:	b29a      	uxth	r2, r3
 8002768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276a:	801a      	strh	r2, [r3, #0]
 800276c:	e032      	b.n	80027d4 <HAL_PCD_EP_DB_Transmit+0x392>
 800276e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002770:	095b      	lsrs	r3, r3, #5
 8002772:	64bb      	str	r3, [r7, #72]	; 0x48
 8002774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002776:	f003 031f 	and.w	r3, r3, #31
 800277a:	2b00      	cmp	r3, #0
 800277c:	d102      	bne.n	8002784 <HAL_PCD_EP_DB_Transmit+0x342>
 800277e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002780:	3b01      	subs	r3, #1
 8002782:	64bb      	str	r3, [r7, #72]	; 0x48
 8002784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002786:	b29b      	uxth	r3, r3
 8002788:	029b      	lsls	r3, r3, #10
 800278a:	b29b      	uxth	r3, r3
 800278c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002794:	b29a      	uxth	r2, r3
 8002796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002798:	801a      	strh	r2, [r3, #0]
 800279a:	e01b      	b.n	80027d4 <HAL_PCD_EP_DB_Transmit+0x392>
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	785b      	ldrb	r3, [r3, #1]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d117      	bne.n	80027d4 <HAL_PCD_EP_DB_Transmit+0x392>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	643b      	str	r3, [r7, #64]	; 0x40
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027b8:	4413      	add	r3, r2
 80027ba:	643b      	str	r3, [r7, #64]	; 0x40
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	011a      	lsls	r2, r3, #4
 80027c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027c4:	4413      	add	r3, r2
 80027c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027d2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	6959      	ldr	r1, [r3, #20]
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	891a      	ldrh	r2, [r3, #8]
 80027e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	f003 fedd 	bl	80065a2 <USB_WritePMA>
 80027e8:	e1d0      	b.n	8002b8c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	461a      	mov	r2, r3
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4413      	add	r3, r2
 80027fe:	3306      	adds	r3, #6
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	4413      	add	r3, r2
 8002808:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002812:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	699a      	ldr	r2, [r3, #24]
 800281a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800281e:	429a      	cmp	r2, r3
 8002820:	d307      	bcc.n	8002832 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	699a      	ldr	r2, [r3, #24]
 8002826:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800282a:	1ad2      	subs	r2, r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	619a      	str	r2, [r3, #24]
 8002830:	e002      	b.n	8002838 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2200      	movs	r2, #0
 8002836:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	2b00      	cmp	r3, #0
 800283e:	f040 80c4 	bne.w	80029ca <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	785b      	ldrb	r3, [r3, #1]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d126      	bne.n	8002898 <HAL_PCD_EP_DB_Transmit+0x456>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002858:	b29b      	uxth	r3, r3
 800285a:	461a      	mov	r2, r3
 800285c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800285e:	4413      	add	r3, r2
 8002860:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	011a      	lsls	r2, r3, #4
 8002868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800286a:	4413      	add	r3, r2
 800286c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002870:	66bb      	str	r3, [r7, #104]	; 0x68
 8002872:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	b29b      	uxth	r3, r3
 8002878:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800287c:	b29a      	uxth	r2, r3
 800287e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002880:	801a      	strh	r2, [r3, #0]
 8002882:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	b29b      	uxth	r3, r3
 8002888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800288c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002890:	b29a      	uxth	r2, r3
 8002892:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002894:	801a      	strh	r2, [r3, #0]
 8002896:	e01a      	b.n	80028ce <HAL_PCD_EP_DB_Transmit+0x48c>
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	785b      	ldrb	r3, [r3, #1]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d116      	bne.n	80028ce <HAL_PCD_EP_DB_Transmit+0x48c>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	677b      	str	r3, [r7, #116]	; 0x74
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028b4:	4413      	add	r3, r2
 80028b6:	677b      	str	r3, [r7, #116]	; 0x74
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	011a      	lsls	r2, r3, #4
 80028be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028c0:	4413      	add	r3, r2
 80028c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028c6:	673b      	str	r3, [r7, #112]	; 0x70
 80028c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028ca:	2200      	movs	r2, #0
 80028cc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	785b      	ldrb	r3, [r3, #1]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d12f      	bne.n	800293c <HAL_PCD_EP_DB_Transmit+0x4fa>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028f4:	4413      	add	r3, r2
 80028f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	011a      	lsls	r2, r3, #4
 8002900:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002904:	4413      	add	r3, r2
 8002906:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800290a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800290e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002912:	881b      	ldrh	r3, [r3, #0]
 8002914:	b29b      	uxth	r3, r3
 8002916:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800291a:	b29a      	uxth	r2, r3
 800291c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002920:	801a      	strh	r2, [r3, #0]
 8002922:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	b29b      	uxth	r3, r3
 800292a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800292e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002932:	b29a      	uxth	r2, r3
 8002934:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002938:	801a      	strh	r2, [r3, #0]
 800293a:	e017      	b.n	800296c <HAL_PCD_EP_DB_Transmit+0x52a>
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	785b      	ldrb	r3, [r3, #1]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d113      	bne.n	800296c <HAL_PCD_EP_DB_Transmit+0x52a>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800294c:	b29b      	uxth	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002952:	4413      	add	r3, r2
 8002954:	67bb      	str	r3, [r7, #120]	; 0x78
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	011a      	lsls	r2, r3, #4
 800295c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800295e:	4413      	add	r3, r2
 8002960:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002964:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002966:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002968:	2200      	movs	r2, #0
 800296a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	4619      	mov	r1, r3
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f006 fbfd 	bl	8009172 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002978:	88fb      	ldrh	r3, [r7, #6]
 800297a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297e:	2b00      	cmp	r3, #0
 8002980:	f040 8104 	bne.w	8002b8c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	461a      	mov	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	b29b      	uxth	r3, r3
 8002996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800299a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	441a      	add	r2, r3
 80029b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80029b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	8013      	strh	r3, [r2, #0]
 80029c8:	e0e0      	b.n	8002b8c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029ca:	88fb      	ldrh	r3, [r7, #6]
 80029cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d121      	bne.n	8002a18 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ee:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	441a      	add	r2, r3
 8002a00:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	f040 80b4 	bne.w	8002b8c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	695a      	ldr	r2, [r3, #20]
 8002a28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a2c:	441a      	add	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	69da      	ldr	r2, [r3, #28]
 8002a36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a3a:	441a      	add	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	6a1a      	ldr	r2, [r3, #32]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d309      	bcc.n	8002a60 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	6a1a      	ldr	r2, [r3, #32]
 8002a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a58:	1ad2      	subs	r2, r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	621a      	str	r2, [r3, #32]
 8002a5e:	e015      	b.n	8002a8c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d107      	bne.n	8002a78 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002a68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a6c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a76:	e009      	b.n	8002a8c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2200      	movs	r2, #0
 8002a82:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	667b      	str	r3, [r7, #100]	; 0x64
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	785b      	ldrb	r3, [r3, #1]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d155      	bne.n	8002b46 <HAL_PCD_EP_DB_Transmit+0x704>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aae:	4413      	add	r3, r2
 8002ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	011a      	lsls	r2, r3, #4
 8002ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aba:	4413      	add	r3, r2
 8002abc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ac0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d112      	bne.n	8002aee <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002ac8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ad6:	801a      	strh	r2, [r3, #0]
 8002ad8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aea:	801a      	strh	r2, [r3, #0]
 8002aec:	e044      	b.n	8002b78 <HAL_PCD_EP_DB_Transmit+0x736>
 8002aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002af0:	2b3e      	cmp	r3, #62	; 0x3e
 8002af2:	d811      	bhi.n	8002b18 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002af6:	085b      	lsrs	r3, r3, #1
 8002af8:	657b      	str	r3, [r7, #84]	; 0x54
 8002afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b06:	3301      	adds	r3, #1
 8002b08:	657b      	str	r3, [r7, #84]	; 0x54
 8002b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	029b      	lsls	r3, r3, #10
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b14:	801a      	strh	r2, [r3, #0]
 8002b16:	e02f      	b.n	8002b78 <HAL_PCD_EP_DB_Transmit+0x736>
 8002b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	657b      	str	r3, [r7, #84]	; 0x54
 8002b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b20:	f003 031f 	and.w	r3, r3, #31
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d102      	bne.n	8002b2e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	657b      	str	r3, [r7, #84]	; 0x54
 8002b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	029b      	lsls	r3, r3, #10
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b42:	801a      	strh	r2, [r3, #0]
 8002b44:	e018      	b.n	8002b78 <HAL_PCD_EP_DB_Transmit+0x736>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	785b      	ldrb	r3, [r3, #1]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d114      	bne.n	8002b78 <HAL_PCD_EP_DB_Transmit+0x736>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	461a      	mov	r2, r3
 8002b5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b5c:	4413      	add	r3, r2
 8002b5e:	667b      	str	r3, [r7, #100]	; 0x64
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	011a      	lsls	r2, r3, #4
 8002b66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b68:	4413      	add	r3, r2
 8002b6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b6e:	663b      	str	r3, [r7, #96]	; 0x60
 8002b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b76:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	6959      	ldr	r1, [r3, #20]
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	895a      	ldrh	r2, [r3, #10]
 8002b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	f003 fd0b 	bl	80065a2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ba6:	823b      	strh	r3, [r7, #16]
 8002ba8:	8a3b      	ldrh	r3, [r7, #16]
 8002baa:	f083 0310 	eor.w	r3, r3, #16
 8002bae:	823b      	strh	r3, [r7, #16]
 8002bb0:	8a3b      	ldrh	r3, [r7, #16]
 8002bb2:	f083 0320 	eor.w	r3, r3, #32
 8002bb6:	823b      	strh	r3, [r7, #16]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	441a      	add	r2, r3
 8002bc6:	8a3b      	ldrh	r3, [r7, #16]
 8002bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3788      	adds	r7, #136	; 0x88
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b087      	sub	sp, #28
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	607b      	str	r3, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	817b      	strh	r3, [r7, #10]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002bf8:	897b      	ldrh	r3, [r7, #10]
 8002bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00b      	beq.n	8002c1c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c04:	897b      	ldrh	r3, [r7, #10]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	4413      	add	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	e009      	b.n	8002c30 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c1c:	897a      	ldrh	r2, [r7, #10]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c30:	893b      	ldrh	r3, [r7, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d107      	bne.n	8002c46 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	80da      	strh	r2, [r3, #6]
 8002c44:	e00b      	b.n	8002c5e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	0c1b      	lsrs	r3, r3, #16
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	371c      	adds	r7, #28
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr
	...

08002c6c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002c70:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]
}
 8002c76:	bf00      	nop
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	420e0020 	.word	0x420e0020

08002c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e26c      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 8087 	beq.w	8002db2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ca4:	4b92      	ldr	r3, [pc, #584]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 030c 	and.w	r3, r3, #12
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d00c      	beq.n	8002cca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cb0:	4b8f      	ldr	r3, [pc, #572]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 030c 	and.w	r3, r3, #12
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d112      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x5e>
 8002cbc:	4b8c      	ldr	r3, [pc, #560]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc8:	d10b      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cca:	4b89      	ldr	r3, [pc, #548]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d06c      	beq.n	8002db0 <HAL_RCC_OscConfig+0x12c>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d168      	bne.n	8002db0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e246      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cea:	d106      	bne.n	8002cfa <HAL_RCC_OscConfig+0x76>
 8002cec:	4b80      	ldr	r3, [pc, #512]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a7f      	ldr	r2, [pc, #508]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	e02e      	b.n	8002d58 <HAL_RCC_OscConfig+0xd4>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10c      	bne.n	8002d1c <HAL_RCC_OscConfig+0x98>
 8002d02:	4b7b      	ldr	r3, [pc, #492]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a7a      	ldr	r2, [pc, #488]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	4b78      	ldr	r3, [pc, #480]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a77      	ldr	r2, [pc, #476]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	e01d      	b.n	8002d58 <HAL_RCC_OscConfig+0xd4>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0xbc>
 8002d26:	4b72      	ldr	r3, [pc, #456]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a71      	ldr	r2, [pc, #452]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b6f      	ldr	r3, [pc, #444]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a6e      	ldr	r2, [pc, #440]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e00b      	b.n	8002d58 <HAL_RCC_OscConfig+0xd4>
 8002d40:	4b6b      	ldr	r3, [pc, #428]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a6a      	ldr	r2, [pc, #424]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	4b68      	ldr	r3, [pc, #416]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a67      	ldr	r2, [pc, #412]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d013      	beq.n	8002d88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7fd fdb4 	bl	80008cc <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d68:	f7fd fdb0 	bl	80008cc <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	; 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e1fa      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	4b5d      	ldr	r3, [pc, #372]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0xe4>
 8002d86:	e014      	b.n	8002db2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fd fda0 	bl	80008cc <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d90:	f7fd fd9c 	bl	80008cc <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	; 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e1e6      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da2:	4b53      	ldr	r3, [pc, #332]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x10c>
 8002dae:	e000      	b.n	8002db2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d063      	beq.n	8002e86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dbe:	4b4c      	ldr	r3, [pc, #304]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00b      	beq.n	8002de2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002dca:	4b49      	ldr	r3, [pc, #292]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f003 030c 	and.w	r3, r3, #12
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d11c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x18c>
 8002dd6:	4b46      	ldr	r3, [pc, #280]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d116      	bne.n	8002e10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de2:	4b43      	ldr	r3, [pc, #268]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d005      	beq.n	8002dfa <HAL_RCC_OscConfig+0x176>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d001      	beq.n	8002dfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e1ba      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfa:	4b3d      	ldr	r3, [pc, #244]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4939      	ldr	r1, [pc, #228]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0e:	e03a      	b.n	8002e86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d020      	beq.n	8002e5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e18:	4b36      	ldr	r3, [pc, #216]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1e:	f7fd fd55 	bl	80008cc <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e26:	f7fd fd51 	bl	80008cc <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e19b      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e38:	4b2d      	ldr	r3, [pc, #180]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e44:	4b2a      	ldr	r3, [pc, #168]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4927      	ldr	r1, [pc, #156]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	600b      	str	r3, [r1, #0]
 8002e58:	e015      	b.n	8002e86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e5a:	4b26      	ldr	r3, [pc, #152]	; (8002ef4 <HAL_RCC_OscConfig+0x270>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7fd fd34 	bl	80008cc <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e68:	f7fd fd30 	bl	80008cc <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e17a      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7a:	4b1d      	ldr	r3, [pc, #116]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d03a      	beq.n	8002f08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d019      	beq.n	8002ece <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9a:	4b17      	ldr	r3, [pc, #92]	; (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea0:	f7fd fd14 	bl	80008cc <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea8:	f7fd fd10 	bl	80008cc <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e15a      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eba:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ec6:	2001      	movs	r0, #1
 8002ec8:	f000 fad8 	bl	800347c <RCC_Delay>
 8002ecc:	e01c      	b.n	8002f08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <HAL_RCC_OscConfig+0x274>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed4:	f7fd fcfa 	bl	80008cc <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eda:	e00f      	b.n	8002efc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002edc:	f7fd fcf6 	bl	80008cc <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d908      	bls.n	8002efc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e140      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	42420000 	.word	0x42420000
 8002ef8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002efc:	4b9e      	ldr	r3, [pc, #632]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1e9      	bne.n	8002edc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 80a6 	beq.w	8003062 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f16:	2300      	movs	r3, #0
 8002f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f1a:	4b97      	ldr	r3, [pc, #604]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10d      	bne.n	8002f42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f26:	4b94      	ldr	r3, [pc, #592]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	4a93      	ldr	r2, [pc, #588]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f30:	61d3      	str	r3, [r2, #28]
 8002f32:	4b91      	ldr	r3, [pc, #580]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	60bb      	str	r3, [r7, #8]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f42:	4b8e      	ldr	r3, [pc, #568]	; (800317c <HAL_RCC_OscConfig+0x4f8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d118      	bne.n	8002f80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f4e:	4b8b      	ldr	r3, [pc, #556]	; (800317c <HAL_RCC_OscConfig+0x4f8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a8a      	ldr	r2, [pc, #552]	; (800317c <HAL_RCC_OscConfig+0x4f8>)
 8002f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5a:	f7fd fcb7 	bl	80008cc <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f62:	f7fd fcb3 	bl	80008cc <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b64      	cmp	r3, #100	; 0x64
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e0fd      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f74:	4b81      	ldr	r3, [pc, #516]	; (800317c <HAL_RCC_OscConfig+0x4f8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d106      	bne.n	8002f96 <HAL_RCC_OscConfig+0x312>
 8002f88:	4b7b      	ldr	r3, [pc, #492]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	4a7a      	ldr	r2, [pc, #488]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	6213      	str	r3, [r2, #32]
 8002f94:	e02d      	b.n	8002ff2 <HAL_RCC_OscConfig+0x36e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x334>
 8002f9e:	4b76      	ldr	r3, [pc, #472]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	4a75      	ldr	r2, [pc, #468]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fa4:	f023 0301 	bic.w	r3, r3, #1
 8002fa8:	6213      	str	r3, [r2, #32]
 8002faa:	4b73      	ldr	r3, [pc, #460]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	4a72      	ldr	r2, [pc, #456]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fb0:	f023 0304 	bic.w	r3, r3, #4
 8002fb4:	6213      	str	r3, [r2, #32]
 8002fb6:	e01c      	b.n	8002ff2 <HAL_RCC_OscConfig+0x36e>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b05      	cmp	r3, #5
 8002fbe:	d10c      	bne.n	8002fda <HAL_RCC_OscConfig+0x356>
 8002fc0:	4b6d      	ldr	r3, [pc, #436]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	4a6c      	ldr	r2, [pc, #432]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fc6:	f043 0304 	orr.w	r3, r3, #4
 8002fca:	6213      	str	r3, [r2, #32]
 8002fcc:	4b6a      	ldr	r3, [pc, #424]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	4a69      	ldr	r2, [pc, #420]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6213      	str	r3, [r2, #32]
 8002fd8:	e00b      	b.n	8002ff2 <HAL_RCC_OscConfig+0x36e>
 8002fda:	4b67      	ldr	r3, [pc, #412]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	4a66      	ldr	r2, [pc, #408]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fe0:	f023 0301 	bic.w	r3, r3, #1
 8002fe4:	6213      	str	r3, [r2, #32]
 8002fe6:	4b64      	ldr	r3, [pc, #400]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	4a63      	ldr	r2, [pc, #396]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8002fec:	f023 0304 	bic.w	r3, r3, #4
 8002ff0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d015      	beq.n	8003026 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffa:	f7fd fc67 	bl	80008cc <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003000:	e00a      	b.n	8003018 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003002:	f7fd fc63 	bl	80008cc <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003010:	4293      	cmp	r3, r2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e0ab      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003018:	4b57      	ldr	r3, [pc, #348]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0ee      	beq.n	8003002 <HAL_RCC_OscConfig+0x37e>
 8003024:	e014      	b.n	8003050 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003026:	f7fd fc51 	bl	80008cc <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800302c:	e00a      	b.n	8003044 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302e:	f7fd fc4d 	bl	80008cc <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f241 3288 	movw	r2, #5000	; 0x1388
 800303c:	4293      	cmp	r3, r2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e095      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003044:	4b4c      	ldr	r3, [pc, #304]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1ee      	bne.n	800302e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003050:	7dfb      	ldrb	r3, [r7, #23]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d105      	bne.n	8003062 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003056:	4b48      	ldr	r3, [pc, #288]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	4a47      	ldr	r2, [pc, #284]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 800305c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003060:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 8081 	beq.w	800316e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800306c:	4b42      	ldr	r3, [pc, #264]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 030c 	and.w	r3, r3, #12
 8003074:	2b08      	cmp	r3, #8
 8003076:	d061      	beq.n	800313c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	2b02      	cmp	r3, #2
 800307e:	d146      	bne.n	800310e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003080:	4b3f      	ldr	r3, [pc, #252]	; (8003180 <HAL_RCC_OscConfig+0x4fc>)
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003086:	f7fd fc21 	bl	80008cc <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308e:	f7fd fc1d 	bl	80008cc <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e067      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a0:	4b35      	ldr	r3, [pc, #212]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1f0      	bne.n	800308e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b4:	d108      	bne.n	80030c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030b6:	4b30      	ldr	r3, [pc, #192]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	492d      	ldr	r1, [pc, #180]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030c8:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a19      	ldr	r1, [r3, #32]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	430b      	orrs	r3, r1
 80030da:	4927      	ldr	r1, [pc, #156]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e0:	4b27      	ldr	r3, [pc, #156]	; (8003180 <HAL_RCC_OscConfig+0x4fc>)
 80030e2:	2201      	movs	r2, #1
 80030e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e6:	f7fd fbf1 	bl	80008cc <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ee:	f7fd fbed 	bl	80008cc <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e037      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003100:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x46a>
 800310c:	e02f      	b.n	800316e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310e:	4b1c      	ldr	r3, [pc, #112]	; (8003180 <HAL_RCC_OscConfig+0x4fc>)
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fd fbda 	bl	80008cc <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311c:	f7fd fbd6 	bl	80008cc <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e020      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800312e:	4b12      	ldr	r3, [pc, #72]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x498>
 800313a:	e018      	b.n	800316e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e013      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <HAL_RCC_OscConfig+0x4f4>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	429a      	cmp	r2, r3
 800315a:	d106      	bne.n	800316a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003166:	429a      	cmp	r2, r3
 8003168:	d001      	beq.n	800316e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40021000 	.word	0x40021000
 800317c:	40007000 	.word	0x40007000
 8003180:	42420060 	.word	0x42420060

08003184 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0d0      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003198:	4b6a      	ldr	r3, [pc, #424]	; (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d910      	bls.n	80031c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a6:	4b67      	ldr	r3, [pc, #412]	; (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 0207 	bic.w	r2, r3, #7
 80031ae:	4965      	ldr	r1, [pc, #404]	; (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b6:	4b63      	ldr	r3, [pc, #396]	; (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0b8      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d020      	beq.n	8003216 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e0:	4b59      	ldr	r3, [pc, #356]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	4a58      	ldr	r2, [pc, #352]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80031e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f8:	4b53      	ldr	r3, [pc, #332]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4a52      	ldr	r2, [pc, #328]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80031fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003202:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003204:	4b50      	ldr	r3, [pc, #320]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	494d      	ldr	r1, [pc, #308]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003212:	4313      	orrs	r3, r2
 8003214:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d040      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d107      	bne.n	800323a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322a:	4b47      	ldr	r3, [pc, #284]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d115      	bne.n	8003262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e07f      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d107      	bne.n	8003252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003242:	4b41      	ldr	r3, [pc, #260]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d109      	bne.n	8003262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e073      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003252:	4b3d      	ldr	r3, [pc, #244]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e06b      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003262:	4b39      	ldr	r3, [pc, #228]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f023 0203 	bic.w	r2, r3, #3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	4936      	ldr	r1, [pc, #216]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	4313      	orrs	r3, r2
 8003272:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003274:	f7fd fb2a 	bl	80008cc <HAL_GetTick>
 8003278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327a:	e00a      	b.n	8003292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800327c:	f7fd fb26 	bl	80008cc <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	f241 3288 	movw	r2, #5000	; 0x1388
 800328a:	4293      	cmp	r3, r2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e053      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003292:	4b2d      	ldr	r3, [pc, #180]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f003 020c 	and.w	r2, r3, #12
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d1eb      	bne.n	800327c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032a4:	4b27      	ldr	r3, [pc, #156]	; (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d210      	bcs.n	80032d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b2:	4b24      	ldr	r3, [pc, #144]	; (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 0207 	bic.w	r2, r3, #7
 80032ba:	4922      	ldr	r1, [pc, #136]	; (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	4313      	orrs	r3, r2
 80032c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c2:	4b20      	ldr	r3, [pc, #128]	; (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e032      	b.n	800333a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d008      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e0:	4b19      	ldr	r3, [pc, #100]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4916      	ldr	r1, [pc, #88]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d009      	beq.n	8003312 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032fe:	4b12      	ldr	r3, [pc, #72]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	490e      	ldr	r1, [pc, #56]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 800330e:	4313      	orrs	r3, r2
 8003310:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003312:	f000 f821 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 8003316:	4602      	mov	r2, r0
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	091b      	lsrs	r3, r3, #4
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	490a      	ldr	r1, [pc, #40]	; (800334c <HAL_RCC_ClockConfig+0x1c8>)
 8003324:	5ccb      	ldrb	r3, [r1, r3]
 8003326:	fa22 f303 	lsr.w	r3, r2, r3
 800332a:	4a09      	ldr	r2, [pc, #36]	; (8003350 <HAL_RCC_ClockConfig+0x1cc>)
 800332c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800332e:	4b09      	ldr	r3, [pc, #36]	; (8003354 <HAL_RCC_ClockConfig+0x1d0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7fd fa88 	bl	8000848 <HAL_InitTick>

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40022000 	.word	0x40022000
 8003348:	40021000 	.word	0x40021000
 800334c:	08009720 	.word	0x08009720
 8003350:	20000000 	.word	0x20000000
 8003354:	20000004 	.word	0x20000004

08003358 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003358:	b490      	push	{r4, r7}
 800335a:	b08a      	sub	sp, #40	; 0x28
 800335c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800335e:	4b2a      	ldr	r3, [pc, #168]	; (8003408 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003360:	1d3c      	adds	r4, r7, #4
 8003362:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003364:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003368:	f240 2301 	movw	r3, #513	; 0x201
 800336c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
 8003372:	2300      	movs	r3, #0
 8003374:	61bb      	str	r3, [r7, #24]
 8003376:	2300      	movs	r3, #0
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003382:	4b22      	ldr	r3, [pc, #136]	; (800340c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	2b04      	cmp	r3, #4
 8003390:	d002      	beq.n	8003398 <HAL_RCC_GetSysClockFreq+0x40>
 8003392:	2b08      	cmp	r3, #8
 8003394:	d003      	beq.n	800339e <HAL_RCC_GetSysClockFreq+0x46>
 8003396:	e02d      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003398:	4b1d      	ldr	r3, [pc, #116]	; (8003410 <HAL_RCC_GetSysClockFreq+0xb8>)
 800339a:	623b      	str	r3, [r7, #32]
      break;
 800339c:	e02d      	b.n	80033fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	0c9b      	lsrs	r3, r3, #18
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033aa:	4413      	add	r3, r2
 80033ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d013      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033bc:	4b13      	ldr	r3, [pc, #76]	; (800340c <HAL_RCC_GetSysClockFreq+0xb4>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	0c5b      	lsrs	r3, r3, #17
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033ca:	4413      	add	r3, r2
 80033cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80033d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	4a0e      	ldr	r2, [pc, #56]	; (8003410 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033d6:	fb02 f203 	mul.w	r2, r2, r3
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
 80033e2:	e004      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	4a0b      	ldr	r2, [pc, #44]	; (8003414 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033e8:	fb02 f303 	mul.w	r3, r2, r3
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	623b      	str	r3, [r7, #32]
      break;
 80033f2:	e002      	b.n	80033fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033f4:	4b06      	ldr	r3, [pc, #24]	; (8003410 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033f6:	623b      	str	r3, [r7, #32]
      break;
 80033f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033fa:	6a3b      	ldr	r3, [r7, #32]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3728      	adds	r7, #40	; 0x28
 8003400:	46bd      	mov	sp, r7
 8003402:	bc90      	pop	{r4, r7}
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	080096bc 	.word	0x080096bc
 800340c:	40021000 	.word	0x40021000
 8003410:	007a1200 	.word	0x007a1200
 8003414:	003d0900 	.word	0x003d0900

08003418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800341c:	4b02      	ldr	r3, [pc, #8]	; (8003428 <HAL_RCC_GetHCLKFreq+0x10>)
 800341e:	681b      	ldr	r3, [r3, #0]
}
 8003420:	4618      	mov	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr
 8003428:	20000000 	.word	0x20000000

0800342c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003430:	f7ff fff2 	bl	8003418 <HAL_RCC_GetHCLKFreq>
 8003434:	4602      	mov	r2, r0
 8003436:	4b05      	ldr	r3, [pc, #20]	; (800344c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	0a1b      	lsrs	r3, r3, #8
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	4903      	ldr	r1, [pc, #12]	; (8003450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003442:	5ccb      	ldrb	r3, [r1, r3]
 8003444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003448:	4618      	mov	r0, r3
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40021000 	.word	0x40021000
 8003450:	08009730 	.word	0x08009730

08003454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003458:	f7ff ffde 	bl	8003418 <HAL_RCC_GetHCLKFreq>
 800345c:	4602      	mov	r2, r0
 800345e:	4b05      	ldr	r3, [pc, #20]	; (8003474 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	0adb      	lsrs	r3, r3, #11
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	4903      	ldr	r1, [pc, #12]	; (8003478 <HAL_RCC_GetPCLK2Freq+0x24>)
 800346a:	5ccb      	ldrb	r3, [r1, r3]
 800346c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003470:	4618      	mov	r0, r3
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40021000 	.word	0x40021000
 8003478:	08009730 	.word	0x08009730

0800347c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003484:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <RCC_Delay+0x34>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a0a      	ldr	r2, [pc, #40]	; (80034b4 <RCC_Delay+0x38>)
 800348a:	fba2 2303 	umull	r2, r3, r2, r3
 800348e:	0a5b      	lsrs	r3, r3, #9
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	fb02 f303 	mul.w	r3, r2, r3
 8003496:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003498:	bf00      	nop
  }
  while (Delay --);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	1e5a      	subs	r2, r3, #1
 800349e:	60fa      	str	r2, [r7, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1f9      	bne.n	8003498 <RCC_Delay+0x1c>
}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr
 80034b0:	20000000 	.word	0x20000000
 80034b4:	10624dd3 	.word	0x10624dd3

080034b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	2300      	movs	r3, #0
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d07d      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80034d4:	2300      	movs	r3, #0
 80034d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034d8:	4b4f      	ldr	r3, [pc, #316]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10d      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e4:	4b4c      	ldr	r3, [pc, #304]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	4a4b      	ldr	r2, [pc, #300]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ee:	61d3      	str	r3, [r2, #28]
 80034f0:	4b49      	ldr	r3, [pc, #292]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034fc:	2301      	movs	r3, #1
 80034fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003500:	4b46      	ldr	r3, [pc, #280]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d118      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800350c:	4b43      	ldr	r3, [pc, #268]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a42      	ldr	r2, [pc, #264]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003516:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003518:	f7fd f9d8 	bl	80008cc <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351e:	e008      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003520:	f7fd f9d4 	bl	80008cc <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b64      	cmp	r3, #100	; 0x64
 800352c:	d901      	bls.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e06d      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003532:	4b3a      	ldr	r3, [pc, #232]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800353e:	4b36      	ldr	r3, [pc, #216]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003546:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d02e      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	429a      	cmp	r2, r3
 800355a:	d027      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800355c:	4b2e      	ldr	r3, [pc, #184]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003564:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003566:	4b2e      	ldr	r3, [pc, #184]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003568:	2201      	movs	r2, #1
 800356a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800356c:	4b2c      	ldr	r3, [pc, #176]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003572:	4a29      	ldr	r2, [pc, #164]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d014      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003582:	f7fd f9a3 	bl	80008cc <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003588:	e00a      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358a:	f7fd f99f 	bl	80008cc <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	f241 3288 	movw	r2, #5000	; 0x1388
 8003598:	4293      	cmp	r3, r2
 800359a:	d901      	bls.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e036      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a0:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0ee      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035ac:	4b1a      	ldr	r3, [pc, #104]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	4917      	ldr	r1, [pc, #92]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035be:	7dfb      	ldrb	r3, [r7, #23]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d105      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c4:	4b14      	ldr	r3, [pc, #80]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	4a13      	ldr	r2, [pc, #76]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035dc:	4b0e      	ldr	r3, [pc, #56]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	490b      	ldr	r1, [pc, #44]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0310 	and.w	r3, r3, #16
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d008      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035fa:	4b07      	ldr	r3, [pc, #28]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	4904      	ldr	r1, [pc, #16]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003608:	4313      	orrs	r3, r2
 800360a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40021000 	.word	0x40021000
 800361c:	40007000 	.word	0x40007000
 8003620:	42420440 	.word	0x42420440

08003624 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003624:	b590      	push	{r4, r7, lr}
 8003626:	b08d      	sub	sp, #52	; 0x34
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800362c:	4b5a      	ldr	r3, [pc, #360]	; (8003798 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800362e:	f107 040c 	add.w	r4, r7, #12
 8003632:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003634:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003638:	f240 2301 	movw	r3, #513	; 0x201
 800363c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
 8003642:	2300      	movs	r3, #0
 8003644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003646:	2300      	movs	r3, #0
 8003648:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]
 800364e:	2300      	movs	r3, #0
 8003650:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b10      	cmp	r3, #16
 8003656:	d00a      	beq.n	800366e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b10      	cmp	r3, #16
 800365c:	f200 8091 	bhi.w	8003782 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d04c      	beq.n	8003700 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d07c      	beq.n	8003766 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800366c:	e089      	b.n	8003782 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 800366e:	4b4b      	ldr	r3, [pc, #300]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003674:	4b49      	ldr	r3, [pc, #292]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 8082 	beq.w	8003786 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	0c9b      	lsrs	r3, r3, #18
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800368e:	4413      	add	r3, r2
 8003690:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003694:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d018      	beq.n	80036d2 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036a0:	4b3e      	ldr	r3, [pc, #248]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	0c5b      	lsrs	r3, r3, #17
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80036ae:	4413      	add	r3, r2
 80036b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00d      	beq.n	80036dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80036c0:	4a37      	ldr	r2, [pc, #220]	; (80037a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	fb02 f303 	mul.w	r3, r2, r3
 80036ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036d0:	e004      	b.n	80036dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	4a33      	ldr	r2, [pc, #204]	; (80037a4 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80036d6:	fb02 f303 	mul.w	r3, r2, r3
 80036da:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80036dc:	4b2f      	ldr	r3, [pc, #188]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036e8:	d102      	bne.n	80036f0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80036ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ec:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80036ee:	e04a      	b.n	8003786 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80036f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	4a2c      	ldr	r2, [pc, #176]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80036f6:	fba2 2303 	umull	r2, r3, r2, r3
 80036fa:	085b      	lsrs	r3, r3, #1
 80036fc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80036fe:	e042      	b.n	8003786 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8003700:	4b26      	ldr	r3, [pc, #152]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800370c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003710:	d108      	bne.n	8003724 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 800371c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003720:	62bb      	str	r3, [r7, #40]	; 0x28
 8003722:	e01f      	b.n	8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800372e:	d109      	bne.n	8003744 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003730:	4b1a      	ldr	r3, [pc, #104]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 800373c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003740:	62bb      	str	r3, [r7, #40]	; 0x28
 8003742:	e00f      	b.n	8003764 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800374e:	d11c      	bne.n	800378a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003750:	4b12      	ldr	r3, [pc, #72]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d016      	beq.n	800378a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 800375c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003760:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003762:	e012      	b.n	800378a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003764:	e011      	b.n	800378a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003766:	f7ff fe75 	bl	8003454 <HAL_RCC_GetPCLK2Freq>
 800376a:	4602      	mov	r2, r0
 800376c:	4b0b      	ldr	r3, [pc, #44]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	0b9b      	lsrs	r3, r3, #14
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	3301      	adds	r3, #1
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	fbb2 f3f3 	udiv	r3, r2, r3
 800377e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003780:	e004      	b.n	800378c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003782:	bf00      	nop
 8003784:	e002      	b.n	800378c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003786:	bf00      	nop
 8003788:	e000      	b.n	800378c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800378a:	bf00      	nop
    }
  }
  return (frequency);
 800378c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800378e:	4618      	mov	r0, r3
 8003790:	3734      	adds	r7, #52	; 0x34
 8003792:	46bd      	mov	sp, r7
 8003794:	bd90      	pop	{r4, r7, pc}
 8003796:	bf00      	nop
 8003798:	080096cc 	.word	0x080096cc
 800379c:	40021000 	.word	0x40021000
 80037a0:	007a1200 	.word	0x007a1200
 80037a4:	003d0900 	.word	0x003d0900
 80037a8:	aaaaaaab 	.word	0xaaaaaaab

080037ac <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e084      	b.n	80038cc <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	7c5b      	ldrb	r3, [r3, #17]
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d105      	bne.n	80037d8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7fc ff0a 	bl	80005ec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f9c8 	bl	8003b74 <HAL_RTC_WaitForSynchro>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d004      	beq.n	80037f4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2204      	movs	r2, #4
 80037ee:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e06b      	b.n	80038cc <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 fa81 	bl	8003cfc <RTC_EnterInitMode>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d004      	beq.n	800380a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2204      	movs	r2, #4
 8003804:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e060      	b.n	80038cc <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0207 	bic.w	r2, r2, #7
 8003818:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d005      	beq.n	800382e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003822:	4b2c      	ldr	r3, [pc, #176]	; (80038d4 <HAL_RTC_Init+0x128>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	4a2b      	ldr	r2, [pc, #172]	; (80038d4 <HAL_RTC_Init+0x128>)
 8003828:	f023 0301 	bic.w	r3, r3, #1
 800382c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800382e:	4b29      	ldr	r3, [pc, #164]	; (80038d4 <HAL_RTC_Init+0x128>)
 8003830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003832:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	4926      	ldr	r1, [pc, #152]	; (80038d4 <HAL_RTC_Init+0x128>)
 800383c:	4313      	orrs	r3, r2
 800383e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d003      	beq.n	8003852 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	e00e      	b.n	8003870 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003852:	2001      	movs	r0, #1
 8003854:	f7ff fee6 	bl	8003624 <HAL_RCCEx_GetPeriphCLKFreq>
 8003858:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d104      	bne.n	800386a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2204      	movs	r2, #4
 8003864:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e030      	b.n	80038cc <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	3b01      	subs	r3, #1
 800386e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f023 010f 	bic.w	r1, r3, #15
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	0c1a      	lsrs	r2, r3, #16
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	0c1b      	lsrs	r3, r3, #16
 800388e:	041b      	lsls	r3, r3, #16
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	b291      	uxth	r1, r2
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	430b      	orrs	r3, r1
 800389a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 fa55 	bl	8003d4c <RTC_ExitInitMode>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d004      	beq.n	80038b2 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2204      	movs	r2, #4
 80038ac:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e00c      	b.n	80038cc <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80038ca:	2300      	movs	r3, #0
  }
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40006c00 	.word	0x40006c00

080038d8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80038d8:	b590      	push	{r4, r7, lr}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	2300      	movs	r3, #0
 80038ea:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <HAL_RTC_SetTime+0x20>
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e080      	b.n	80039fe <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	7c1b      	ldrb	r3, [r3, #16]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d101      	bne.n	8003908 <HAL_RTC_SetTime+0x30>
 8003904:	2302      	movs	r3, #2
 8003906:	e07a      	b.n	80039fe <HAL_RTC_SetTime+0x126>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2201      	movs	r2, #1
 800390c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2202      	movs	r2, #2
 8003912:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d113      	bne.n	8003942 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	461a      	mov	r2, r3
 8003920:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003924:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	785b      	ldrb	r3, [r3, #1]
 800392c:	4619      	mov	r1, r3
 800392e:	460b      	mov	r3, r1
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	1a5b      	subs	r3, r3, r1
 8003934:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003936:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800393c:	4413      	add	r3, r2
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	e01e      	b.n	8003980 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fa28 	bl	8003d9c <RTC_Bcd2ToByte>
 800394c:	4603      	mov	r3, r0
 800394e:	461a      	mov	r2, r3
 8003950:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003954:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	785b      	ldrb	r3, [r3, #1]
 800395c:	4618      	mov	r0, r3
 800395e:	f000 fa1d 	bl	8003d9c <RTC_Bcd2ToByte>
 8003962:	4603      	mov	r3, r0
 8003964:	461a      	mov	r2, r3
 8003966:	4613      	mov	r3, r2
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	1a9b      	subs	r3, r3, r2
 800396c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800396e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	789b      	ldrb	r3, [r3, #2]
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fa11 	bl	8003d9c <RTC_Bcd2ToByte>
 800397a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800397c:	4423      	add	r3, r4
 800397e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003980:	6979      	ldr	r1, [r7, #20]
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 f953 	bl	8003c2e <RTC_WriteTimeCounter>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d007      	beq.n	800399e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2204      	movs	r2, #4
 8003992:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e02f      	b.n	80039fe <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0205 	bic.w	r2, r2, #5
 80039ac:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 f964 	bl	8003c7c <RTC_ReadAlarmCounter>
 80039b4:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039bc:	d018      	beq.n	80039f0 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d214      	bcs.n	80039f0 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80039cc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80039d0:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80039d2:	6939      	ldr	r1, [r7, #16]
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 f96a 	bl	8003cae <RTC_WriteAlarmCounter>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d007      	beq.n	80039f0 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2204      	movs	r2, #4
 80039e4:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e006      	b.n	80039fe <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2201      	movs	r2, #1
 80039f4:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80039fc:	2300      	movs	r3, #0
  }
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	371c      	adds	r7, #28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd90      	pop	{r4, r7, pc}
	...

08003a08 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	61fb      	str	r3, [r7, #28]
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61bb      	str	r3, [r7, #24]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <HAL_RTC_SetDate+0x24>
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e097      	b.n	8003b60 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	7c1b      	ldrb	r3, [r3, #16]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_RTC_SetDate+0x34>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e091      	b.n	8003b60 <HAL_RTC_SetDate+0x158>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2202      	movs	r2, #2
 8003a46:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10c      	bne.n	8003a68 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	78da      	ldrb	r2, [r3, #3]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	785a      	ldrb	r2, [r3, #1]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	789a      	ldrb	r2, [r3, #2]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	739a      	strb	r2, [r3, #14]
 8003a66:	e01a      	b.n	8003a9e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	78db      	ldrb	r3, [r3, #3]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 f995 	bl	8003d9c <RTC_Bcd2ToByte>
 8003a72:	4603      	mov	r3, r0
 8003a74:	461a      	mov	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	785b      	ldrb	r3, [r3, #1]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 f98c 	bl	8003d9c <RTC_Bcd2ToByte>
 8003a84:	4603      	mov	r3, r0
 8003a86:	461a      	mov	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	789b      	ldrb	r3, [r3, #2]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 f983 	bl	8003d9c <RTC_Bcd2ToByte>
 8003a96:	4603      	mov	r3, r0
 8003a98:	461a      	mov	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	7bdb      	ldrb	r3, [r3, #15]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	7b59      	ldrb	r1, [r3, #13]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	7b9b      	ldrb	r3, [r3, #14]
 8003aac:	461a      	mov	r2, r3
 8003aae:	f000 f993 	bl	8003dd8 <RTC_WeekDayNum>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	7b1a      	ldrb	r2, [r3, #12]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 f883 	bl	8003bce <RTC_ReadTimeCounter>
 8003ac8:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	4a26      	ldr	r2, [pc, #152]	; (8003b68 <HAL_RTC_SetDate+0x160>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	0adb      	lsrs	r3, r3, #11
 8003ad4:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2b18      	cmp	r3, #24
 8003ada:	d93a      	bls.n	8003b52 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	4a23      	ldr	r2, [pc, #140]	; (8003b6c <HAL_RTC_SetDate+0x164>)
 8003ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae4:	091b      	lsrs	r3, r3, #4
 8003ae6:	4a22      	ldr	r2, [pc, #136]	; (8003b70 <HAL_RTC_SetDate+0x168>)
 8003ae8:	fb02 f303 	mul.w	r3, r2, r3
 8003aec:	69fa      	ldr	r2, [r7, #28]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003af2:	69f9      	ldr	r1, [r7, #28]
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f89a 	bl	8003c2e <RTC_WriteTimeCounter>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d007      	beq.n	8003b10 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2204      	movs	r2, #4
 8003b04:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e027      	b.n	8003b60 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f8b3 	bl	8003c7c <RTC_ReadAlarmCounter>
 8003b16:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1e:	d018      	beq.n	8003b52 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d214      	bcs.n	8003b52 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003b2e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003b32:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003b34:	69b9      	ldr	r1, [r7, #24]
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 f8b9 	bl	8003cae <RTC_WriteAlarmCounter>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d007      	beq.n	8003b52 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2204      	movs	r2, #4
 8003b46:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e006      	b.n	8003b60 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2201      	movs	r2, #1
 8003b56:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3720      	adds	r7, #32
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	91a2b3c5 	.word	0x91a2b3c5
 8003b6c:	aaaaaaab 	.word	0xaaaaaaab
 8003b70:	00015180 	.word	0x00015180

08003b74 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e01d      	b.n	8003bc6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0208 	bic.w	r2, r2, #8
 8003b98:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003b9a:	f7fc fe97 	bl	80008cc <HAL_GetTick>
 8003b9e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003ba0:	e009      	b.n	8003bb6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003ba2:	f7fc fe93 	bl	80008cc <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e007      	b.n	8003bc6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0ee      	beq.n	8003ba2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b087      	sub	sp, #28
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	827b      	strh	r3, [r7, #18]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	823b      	strh	r3, [r7, #16]
 8003bde:	2300      	movs	r3, #0
 8003be0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003bfe:	8a7a      	ldrh	r2, [r7, #18]
 8003c00:	8a3b      	ldrh	r3, [r7, #16]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d008      	beq.n	8003c18 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003c06:	8a3b      	ldrh	r3, [r7, #16]
 8003c08:	041a      	lsls	r2, r3, #16
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	e004      	b.n	8003c22 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003c18:	8a7b      	ldrh	r3, [r7, #18]
 8003c1a:	041a      	lsls	r2, r3, #16
 8003c1c:	89fb      	ldrh	r3, [r7, #14]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003c22:	697b      	ldr	r3, [r7, #20]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	371c      	adds	r7, #28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	4770      	bx	lr

08003c2e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b084      	sub	sp, #16
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f85d 	bl	8003cfc <RTC_EnterInitMode>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	73fb      	strb	r3, [r7, #15]
 8003c4c:	e011      	b.n	8003c72 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	0c12      	lsrs	r2, r2, #16
 8003c56:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	b292      	uxth	r2, r2
 8003c60:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f872 	bl	8003d4c <RTC_ExitInitMode>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	81fb      	strh	r3, [r7, #14]
 8003c88:	2300      	movs	r3, #0
 8003c8a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003c9c:	89fb      	ldrh	r3, [r7, #14]
 8003c9e:	041a      	lsls	r2, r3, #16
 8003ca0:	89bb      	ldrh	r3, [r7, #12]
 8003ca2:	4313      	orrs	r3, r2
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr

08003cae <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b084      	sub	sp, #16
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f81d 	bl	8003cfc <RTC_EnterInitMode>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	73fb      	strb	r3, [r7, #15]
 8003ccc:	e011      	b.n	8003cf2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	0c12      	lsrs	r2, r2, #16
 8003cd6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	b292      	uxth	r2, r2
 8003ce0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f832 	bl	8003d4c <RTC_ExitInitMode>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003d08:	f7fc fde0 	bl	80008cc <HAL_GetTick>
 8003d0c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003d0e:	e009      	b.n	8003d24 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003d10:	f7fc fddc 	bl	80008cc <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d1e:	d901      	bls.n	8003d24 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e00f      	b.n	8003d44 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0ee      	beq.n	8003d10 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f042 0210 	orr.w	r2, r2, #16
 8003d40:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0210 	bic.w	r2, r2, #16
 8003d66:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003d68:	f7fc fdb0 	bl	80008cc <HAL_GetTick>
 8003d6c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003d6e:	e009      	b.n	8003d84 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003d70:	f7fc fdac 	bl	80008cc <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d7e:	d901      	bls.n	8003d84 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e007      	b.n	8003d94 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0ee      	beq.n	8003d70 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	4603      	mov	r3, r0
 8003da4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	461a      	mov	r2, r3
 8003db2:	4613      	mov	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	4413      	add	r3, r2
 8003dca:	b2db      	uxtb	r3, r3
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr
	...

08003dd8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	70fb      	strb	r3, [r7, #3]
 8003de4:	4613      	mov	r3, r2
 8003de6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60bb      	str	r3, [r7, #8]
 8003dec:	2300      	movs	r3, #0
 8003dee:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003df6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003df8:	78fb      	ldrb	r3, [r7, #3]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d82d      	bhi.n	8003e5a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003dfe:	78fa      	ldrb	r2, [r7, #3]
 8003e00:	4613      	mov	r3, r2
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	4413      	add	r3, r2
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	1a9b      	subs	r3, r3, r2
 8003e0a:	4a2c      	ldr	r2, [pc, #176]	; (8003ebc <RTC_WeekDayNum+0xe4>)
 8003e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e10:	085a      	lsrs	r2, r3, #1
 8003e12:	78bb      	ldrb	r3, [r7, #2]
 8003e14:	441a      	add	r2, r3
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	441a      	add	r2, r3
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	089b      	lsrs	r3, r3, #2
 8003e20:	441a      	add	r2, r3
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	3b01      	subs	r3, #1
 8003e26:	4926      	ldr	r1, [pc, #152]	; (8003ec0 <RTC_WeekDayNum+0xe8>)
 8003e28:	fba1 1303 	umull	r1, r3, r1, r3
 8003e2c:	095b      	lsrs	r3, r3, #5
 8003e2e:	1ad2      	subs	r2, r2, r3
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	4922      	ldr	r1, [pc, #136]	; (8003ec0 <RTC_WeekDayNum+0xe8>)
 8003e36:	fba1 1303 	umull	r1, r3, r1, r3
 8003e3a:	09db      	lsrs	r3, r3, #7
 8003e3c:	4413      	add	r3, r2
 8003e3e:	1d1a      	adds	r2, r3, #4
 8003e40:	4b20      	ldr	r3, [pc, #128]	; (8003ec4 <RTC_WeekDayNum+0xec>)
 8003e42:	fba3 1302 	umull	r1, r3, r3, r2
 8003e46:	1ad1      	subs	r1, r2, r3
 8003e48:	0849      	lsrs	r1, r1, #1
 8003e4a:	440b      	add	r3, r1
 8003e4c:	0899      	lsrs	r1, r3, #2
 8003e4e:	460b      	mov	r3, r1
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	1a5b      	subs	r3, r3, r1
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	e029      	b.n	8003eae <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003e5a:	78fa      	ldrb	r2, [r7, #3]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	4413      	add	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	4a15      	ldr	r2, [pc, #84]	; (8003ebc <RTC_WeekDayNum+0xe4>)
 8003e68:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6c:	085a      	lsrs	r2, r3, #1
 8003e6e:	78bb      	ldrb	r3, [r7, #2]
 8003e70:	441a      	add	r2, r3
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	441a      	add	r2, r3
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	089b      	lsrs	r3, r3, #2
 8003e7a:	441a      	add	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4910      	ldr	r1, [pc, #64]	; (8003ec0 <RTC_WeekDayNum+0xe8>)
 8003e80:	fba1 1303 	umull	r1, r3, r1, r3
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	1ad2      	subs	r2, r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	490d      	ldr	r1, [pc, #52]	; (8003ec0 <RTC_WeekDayNum+0xe8>)
 8003e8c:	fba1 1303 	umull	r1, r3, r1, r3
 8003e90:	09db      	lsrs	r3, r3, #7
 8003e92:	4413      	add	r3, r2
 8003e94:	1c9a      	adds	r2, r3, #2
 8003e96:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <RTC_WeekDayNum+0xec>)
 8003e98:	fba3 1302 	umull	r1, r3, r3, r2
 8003e9c:	1ad1      	subs	r1, r2, r3
 8003e9e:	0849      	lsrs	r1, r1, #1
 8003ea0:	440b      	add	r3, r1
 8003ea2:	0899      	lsrs	r1, r3, #2
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	1a5b      	subs	r3, r3, r1
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	b2db      	uxtb	r3, r3
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr
 8003ebc:	38e38e39 	.word	0x38e38e39
 8003ec0:	51eb851f 	.word	0x51eb851f
 8003ec4:	24924925 	.word	0x24924925

08003ec8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e076      	b.n	8003fc8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d108      	bne.n	8003ef4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eea:	d009      	beq.n	8003f00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	61da      	str	r2, [r3, #28]
 8003ef2:	e005      	b.n	8003f00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fc fb8a 	bl	8000634 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f84:	ea42 0103 	orr.w	r1, r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	0c1a      	lsrs	r2, r3, #16
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f002 0204 	and.w	r2, r2, #4
 8003fa6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69da      	ldr	r2, [r3, #28]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fb6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e03f      	b.n	8004062 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7fc fb68 	bl	80006cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2224      	movs	r2, #36	; 0x24
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004012:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f829 	bl	800406c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	691a      	ldr	r2, [r3, #16]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004028:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695a      	ldr	r2, [r3, #20]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004038:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004048:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689a      	ldr	r2, [r3, #8]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80040a6:	f023 030c 	bic.w	r3, r3, #12
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6812      	ldr	r2, [r2, #0]
 80040ae:	68b9      	ldr	r1, [r7, #8]
 80040b0:	430b      	orrs	r3, r1
 80040b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a2c      	ldr	r2, [pc, #176]	; (8004180 <UART_SetConfig+0x114>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d103      	bne.n	80040dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040d4:	f7ff f9be 	bl	8003454 <HAL_RCC_GetPCLK2Freq>
 80040d8:	60f8      	str	r0, [r7, #12]
 80040da:	e002      	b.n	80040e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040dc:	f7ff f9a6 	bl	800342c <HAL_RCC_GetPCLK1Freq>
 80040e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	009a      	lsls	r2, r3, #2
 80040ec:	441a      	add	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f8:	4a22      	ldr	r2, [pc, #136]	; (8004184 <UART_SetConfig+0x118>)
 80040fa:	fba2 2303 	umull	r2, r3, r2, r3
 80040fe:	095b      	lsrs	r3, r3, #5
 8004100:	0119      	lsls	r1, r3, #4
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	009a      	lsls	r2, r3, #2
 800410c:	441a      	add	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	fbb2 f2f3 	udiv	r2, r2, r3
 8004118:	4b1a      	ldr	r3, [pc, #104]	; (8004184 <UART_SetConfig+0x118>)
 800411a:	fba3 0302 	umull	r0, r3, r3, r2
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	2064      	movs	r0, #100	; 0x64
 8004122:	fb00 f303 	mul.w	r3, r0, r3
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	3332      	adds	r3, #50	; 0x32
 800412c:	4a15      	ldr	r2, [pc, #84]	; (8004184 <UART_SetConfig+0x118>)
 800412e:	fba2 2303 	umull	r2, r3, r2, r3
 8004132:	095b      	lsrs	r3, r3, #5
 8004134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004138:	4419      	add	r1, r3
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4613      	mov	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	009a      	lsls	r2, r3, #2
 8004144:	441a      	add	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004150:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <UART_SetConfig+0x118>)
 8004152:	fba3 0302 	umull	r0, r3, r3, r2
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	2064      	movs	r0, #100	; 0x64
 800415a:	fb00 f303 	mul.w	r3, r0, r3
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	3332      	adds	r3, #50	; 0x32
 8004164:	4a07      	ldr	r2, [pc, #28]	; (8004184 <UART_SetConfig+0x118>)
 8004166:	fba2 2303 	umull	r2, r3, r2, r3
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	f003 020f 	and.w	r2, r3, #15
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	440a      	add	r2, r1
 8004176:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004178:	bf00      	nop
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40013800 	.word	0x40013800
 8004184:	51eb851f 	.word	0x51eb851f

08004188 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004188:	b084      	sub	sp, #16
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
 8004192:	f107 0014 	add.w	r0, r7, #20
 8004196:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	b004      	add	sp, #16
 80041a6:	4770      	bx	lr

080041a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80041b8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80041bc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr

080041d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80041dc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80041e0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	43db      	mvns	r3, r3
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	4013      	ands	r3, r2
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	bc80      	pop	{r7}
 8004206:	4770      	bx	lr

08004208 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	460b      	mov	r3, r1
 8004212:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr

08004220 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004220:	b084      	sub	sp, #16
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	f107 0014 	add.w	r0, r7, #20
 800422e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	bc80      	pop	{r7}
 800425c:	b004      	add	sp, #16
 800425e:	4770      	bx	lr

08004260 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef *USBx, uint32_t num)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	bc80      	pop	{r7}
 8004274:	4770      	bx	lr

08004276 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef *USBx)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr
	...

0800428c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800428c:	b480      	push	{r7}
 800428e:	b09b      	sub	sp, #108	; 0x6c
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80042ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	78db      	ldrb	r3, [r3, #3]
 80042ba:	2b03      	cmp	r3, #3
 80042bc:	d81f      	bhi.n	80042fe <USB_ActivateEndpoint+0x72>
 80042be:	a201      	add	r2, pc, #4	; (adr r2, 80042c4 <USB_ActivateEndpoint+0x38>)
 80042c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c4:	080042d5 	.word	0x080042d5
 80042c8:	080042f1 	.word	0x080042f1
 80042cc:	08004307 	.word	0x08004307
 80042d0:	080042e3 	.word	0x080042e3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80042d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80042d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042dc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80042e0:	e012      	b.n	8004308 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80042e2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80042e6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80042ea:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80042ee:	e00b      	b.n	8004308 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80042f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80042f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042f8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80042fc:	e004      	b.n	8004308 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004304:	e000      	b.n	8004308 <USB_ActivateEndpoint+0x7c>
      break;
 8004306:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	441a      	add	r2, r3
 8004312:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800431a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800431e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004326:	b29b      	uxth	r3, r3
 8004328:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	b29b      	uxth	r3, r3
 8004338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004340:	b29a      	uxth	r2, r3
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	b29b      	uxth	r3, r3
 8004348:	4313      	orrs	r3, r2
 800434a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	441a      	add	r2, r3
 8004358:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800435c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800436c:	b29b      	uxth	r3, r3
 800436e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	7b1b      	ldrb	r3, [r3, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	f040 8149 	bne.w	800460c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	785b      	ldrb	r3, [r3, #1]
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 8084 	beq.w	800448c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800438e:	b29b      	uxth	r3, r3
 8004390:	461a      	mov	r2, r3
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	4413      	add	r3, r2
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	011a      	lsls	r2, r3, #4
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043a6:	613b      	str	r3, [r7, #16]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	88db      	ldrh	r3, [r3, #6]
 80043ac:	085b      	lsrs	r3, r3, #1
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	881b      	ldrh	r3, [r3, #0]
 80043c4:	81fb      	strh	r3, [r7, #14]
 80043c6:	89fb      	ldrh	r3, [r7, #14]
 80043c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d01b      	beq.n	8004408 <USB_ActivateEndpoint+0x17c>
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	b29b      	uxth	r3, r3
 80043de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e6:	81bb      	strh	r3, [r7, #12]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	441a      	add	r2, r3
 80043f2:	89bb      	ldrh	r3, [r7, #12]
 80043f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004400:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004404:	b29b      	uxth	r3, r3
 8004406:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	78db      	ldrb	r3, [r3, #3]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d020      	beq.n	8004452 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	b29b      	uxth	r3, r3
 800441e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004422:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004426:	813b      	strh	r3, [r7, #8]
 8004428:	893b      	ldrh	r3, [r7, #8]
 800442a:	f083 0320 	eor.w	r3, r3, #32
 800442e:	813b      	strh	r3, [r7, #8]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	441a      	add	r2, r3
 800443a:	893b      	ldrh	r3, [r7, #8]
 800443c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004440:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800444c:	b29b      	uxth	r3, r3
 800444e:	8013      	strh	r3, [r2, #0]
 8004450:	e27f      	b.n	8004952 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	b29b      	uxth	r3, r3
 8004460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004468:	817b      	strh	r3, [r7, #10]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	441a      	add	r2, r3
 8004474:	897b      	ldrh	r3, [r7, #10]
 8004476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800447a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800447e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004486:	b29b      	uxth	r3, r3
 8004488:	8013      	strh	r3, [r2, #0]
 800448a:	e262      	b.n	8004952 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004496:	b29b      	uxth	r3, r3
 8004498:	461a      	mov	r2, r3
 800449a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449c:	4413      	add	r3, r2
 800449e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	011a      	lsls	r2, r3, #4
 80044a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80044ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	88db      	ldrh	r3, [r3, #6]
 80044b4:	085b      	lsrs	r3, r3, #1
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044be:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	461a      	mov	r2, r3
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	4413      	add	r3, r2
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	011a      	lsls	r2, r3, #4
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	4413      	add	r3, r2
 80044de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044e2:	623b      	str	r3, [r7, #32]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d112      	bne.n	8004512 <USB_ActivateEndpoint+0x286>
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	881b      	ldrh	r3, [r3, #0]
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	801a      	strh	r2, [r3, #0]
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	b29b      	uxth	r3, r3
 8004502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800450a:	b29a      	uxth	r2, r3
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	801a      	strh	r2, [r3, #0]
 8004510:	e02f      	b.n	8004572 <USB_ActivateEndpoint+0x2e6>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	2b3e      	cmp	r3, #62	; 0x3e
 8004518:	d813      	bhi.n	8004542 <USB_ActivateEndpoint+0x2b6>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	085b      	lsrs	r3, r3, #1
 8004520:	663b      	str	r3, [r7, #96]	; 0x60
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <USB_ActivateEndpoint+0x2a8>
 800452e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004530:	3301      	adds	r3, #1
 8004532:	663b      	str	r3, [r7, #96]	; 0x60
 8004534:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004536:	b29b      	uxth	r3, r3
 8004538:	029b      	lsls	r3, r3, #10
 800453a:	b29a      	uxth	r2, r3
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	801a      	strh	r2, [r3, #0]
 8004540:	e017      	b.n	8004572 <USB_ActivateEndpoint+0x2e6>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	663b      	str	r3, [r7, #96]	; 0x60
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	f003 031f 	and.w	r3, r3, #31
 8004552:	2b00      	cmp	r3, #0
 8004554:	d102      	bne.n	800455c <USB_ActivateEndpoint+0x2d0>
 8004556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004558:	3b01      	subs	r3, #1
 800455a:	663b      	str	r3, [r7, #96]	; 0x60
 800455c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800455e:	b29b      	uxth	r3, r3
 8004560:	029b      	lsls	r3, r3, #10
 8004562:	b29b      	uxth	r3, r3
 8004564:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004568:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800456c:	b29a      	uxth	r2, r3
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	83fb      	strh	r3, [r7, #30]
 8004580:	8bfb      	ldrh	r3, [r7, #30]
 8004582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d01b      	beq.n	80045c2 <USB_ActivateEndpoint+0x336>
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	b29b      	uxth	r3, r3
 8004598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800459c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a0:	83bb      	strh	r3, [r7, #28]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	441a      	add	r2, r3
 80045ac:	8bbb      	ldrh	r3, [r7, #28]
 80045ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045be:	b29b      	uxth	r3, r3
 80045c0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d8:	837b      	strh	r3, [r7, #26]
 80045da:	8b7b      	ldrh	r3, [r7, #26]
 80045dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80045e0:	837b      	strh	r3, [r7, #26]
 80045e2:	8b7b      	ldrh	r3, [r7, #26]
 80045e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80045e8:	837b      	strh	r3, [r7, #26]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	441a      	add	r2, r3
 80045f4:	8b7b      	ldrh	r3, [r7, #26]
 80045f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004606:	b29b      	uxth	r3, r3
 8004608:	8013      	strh	r3, [r2, #0]
 800460a:	e1a2      	b.n	8004952 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	b29b      	uxth	r3, r3
 800461a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800461e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004622:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	441a      	add	r2, r3
 8004630:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800463c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004644:	b29b      	uxth	r3, r3
 8004646:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	65bb      	str	r3, [r7, #88]	; 0x58
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004652:	b29b      	uxth	r3, r3
 8004654:	461a      	mov	r2, r3
 8004656:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004658:	4413      	add	r3, r2
 800465a:	65bb      	str	r3, [r7, #88]	; 0x58
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	011a      	lsls	r2, r3, #4
 8004662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004664:	4413      	add	r3, r2
 8004666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800466a:	657b      	str	r3, [r7, #84]	; 0x54
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	891b      	ldrh	r3, [r3, #8]
 8004670:	085b      	lsrs	r3, r3, #1
 8004672:	b29b      	uxth	r3, r3
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800467a:	801a      	strh	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	653b      	str	r3, [r7, #80]	; 0x50
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004686:	b29b      	uxth	r3, r3
 8004688:	461a      	mov	r2, r3
 800468a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800468c:	4413      	add	r3, r2
 800468e:	653b      	str	r3, [r7, #80]	; 0x50
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	011a      	lsls	r2, r3, #4
 8004696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004698:	4413      	add	r3, r2
 800469a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800469e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	895b      	ldrh	r3, [r3, #10]
 80046a4:	085b      	lsrs	r3, r3, #1
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	785b      	ldrb	r3, [r3, #1]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f040 8091 	bne.w	80047dc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80046c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80046ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d01b      	beq.n	800470a <USB_ActivateEndpoint+0x47e>
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	441a      	add	r2, r3
 80046f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80046f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004706:	b29b      	uxth	r3, r3
 8004708:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	873b      	strh	r3, [r7, #56]	; 0x38
 8004718:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800471a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471e:	2b00      	cmp	r3, #0
 8004720:	d01b      	beq.n	800475a <USB_ActivateEndpoint+0x4ce>
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	881b      	ldrh	r3, [r3, #0]
 800472e:	b29b      	uxth	r3, r3
 8004730:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004738:	86fb      	strh	r3, [r7, #54]	; 0x36
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	441a      	add	r2, r3
 8004744:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800474a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800474e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004752:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004756:	b29b      	uxth	r3, r3
 8004758:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	b29b      	uxth	r3, r3
 8004768:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800476c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004770:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004772:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004774:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004778:	86bb      	strh	r3, [r7, #52]	; 0x34
 800477a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800477c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004780:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	441a      	add	r2, r3
 800478c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800478e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800479a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800479e:	b29b      	uxth	r3, r3
 80047a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047b8:	867b      	strh	r3, [r7, #50]	; 0x32
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	441a      	add	r2, r3
 80047c4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80047c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	8013      	strh	r3, [r2, #0]
 80047da:	e0ba      	b.n	8004952 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80047ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80047f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d01d      	beq.n	8004834 <USB_ActivateEndpoint+0x5a8>
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	b29b      	uxth	r3, r3
 8004806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800480a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	441a      	add	r2, r3
 800481c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004828:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800482c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004830:	b29b      	uxth	r3, r3
 8004832:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004844:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01d      	beq.n	800488c <USB_ActivateEndpoint+0x600>
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	b29b      	uxth	r3, r3
 800485e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004866:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	441a      	add	r2, r3
 8004874:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800487c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004884:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004888:	b29b      	uxth	r3, r3
 800488a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	78db      	ldrb	r3, [r3, #3]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d024      	beq.n	80048de <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80048ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80048b2:	f083 0320 	eor.w	r3, r3, #32
 80048b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	441a      	add	r2, r3
 80048c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80048c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d8:	b29b      	uxth	r3, r3
 80048da:	8013      	strh	r3, [r2, #0]
 80048dc:	e01d      	b.n	800491a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	441a      	add	r2, r3
 8004902:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800490a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800490e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004916:	b29b      	uxth	r3, r3
 8004918:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	b29b      	uxth	r3, r3
 8004928:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800492c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004930:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	441a      	add	r2, r3
 800493c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800493e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800494a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800494e:	b29b      	uxth	r3, r3
 8004950:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004952:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004956:	4618      	mov	r0, r3
 8004958:	376c      	adds	r7, #108	; 0x6c
 800495a:	46bd      	mov	sp, r7
 800495c:	bc80      	pop	{r7}
 800495e:	4770      	bx	lr

08004960 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004960:	b480      	push	{r7}
 8004962:	b08d      	sub	sp, #52	; 0x34
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	7b1b      	ldrb	r3, [r3, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	f040 808e 	bne.w	8004a90 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	785b      	ldrb	r3, [r3, #1]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d044      	beq.n	8004a06 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	81bb      	strh	r3, [r7, #12]
 800498a:	89bb      	ldrh	r3, [r7, #12]
 800498c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004990:	2b00      	cmp	r3, #0
 8004992:	d01b      	beq.n	80049cc <USB_DeactivateEndpoint+0x6c>
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049aa:	817b      	strh	r3, [r7, #10]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	441a      	add	r2, r3
 80049b6:	897b      	ldrh	r3, [r7, #10]
 80049b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	881b      	ldrh	r3, [r3, #0]
 80049d8:	b29b      	uxth	r3, r3
 80049da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e2:	813b      	strh	r3, [r7, #8]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	441a      	add	r2, r3
 80049ee:	893b      	ldrh	r3, [r7, #8]
 80049f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	8013      	strh	r3, [r2, #0]
 8004a04:	e192      	b.n	8004d2c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	827b      	strh	r3, [r7, #18]
 8004a14:	8a7b      	ldrh	r3, [r7, #18]
 8004a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d01b      	beq.n	8004a56 <USB_DeactivateEndpoint+0xf6>
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a34:	823b      	strh	r3, [r7, #16]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	441a      	add	r2, r3
 8004a40:	8a3b      	ldrh	r3, [r7, #16]
 8004a42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6c:	81fb      	strh	r3, [r7, #14]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	441a      	add	r2, r3
 8004a78:	89fb      	ldrh	r3, [r7, #14]
 8004a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	8013      	strh	r3, [r2, #0]
 8004a8e:	e14d      	b.n	8004d2c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	785b      	ldrb	r3, [r3, #1]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f040 80a5 	bne.w	8004be4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	843b      	strh	r3, [r7, #32]
 8004aa8:	8c3b      	ldrh	r3, [r7, #32]
 8004aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d01b      	beq.n	8004aea <USB_DeactivateEndpoint+0x18a>
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac8:	83fb      	strh	r3, [r7, #30]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	441a      	add	r2, r3
 8004ad4:	8bfb      	ldrh	r3, [r7, #30]
 8004ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ade:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	83bb      	strh	r3, [r7, #28]
 8004af8:	8bbb      	ldrh	r3, [r7, #28]
 8004afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d01b      	beq.n	8004b3a <USB_DeactivateEndpoint+0x1da>
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	881b      	ldrh	r3, [r3, #0]
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b18:	837b      	strh	r3, [r7, #26]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	441a      	add	r2, r3
 8004b24:	8b7b      	ldrh	r3, [r7, #26]
 8004b26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b50:	833b      	strh	r3, [r7, #24]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	441a      	add	r2, r3
 8004b5c:	8b3b      	ldrh	r3, [r7, #24]
 8004b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b88:	82fb      	strh	r3, [r7, #22]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	441a      	add	r2, r3
 8004b94:	8afb      	ldrh	r3, [r7, #22]
 8004b96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bc0:	82bb      	strh	r3, [r7, #20]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	441a      	add	r2, r3
 8004bcc:	8abb      	ldrh	r3, [r7, #20]
 8004bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	8013      	strh	r3, [r2, #0]
 8004be2:	e0a3      	b.n	8004d2c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	881b      	ldrh	r3, [r3, #0]
 8004bf0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004bf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01b      	beq.n	8004c34 <USB_DeactivateEndpoint+0x2d4>
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c12:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	441a      	add	r2, r3
 8004c1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004c42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d01b      	beq.n	8004c84 <USB_DeactivateEndpoint+0x324>
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c62:	853b      	strh	r3, [r7, #40]	; 0x28
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	441a      	add	r2, r3
 8004c6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	441a      	add	r2, r3
 8004ca6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cd2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	441a      	add	r2, r3
 8004cde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0a:	847b      	strh	r3, [r7, #34]	; 0x22
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	441a      	add	r2, r3
 8004d16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3734      	adds	r7, #52	; 0x34
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b0cc      	sub	sp, #304	; 0x130
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	1d3b      	adds	r3, r7, #4
 8004d40:	6018      	str	r0, [r3, #0]
 8004d42:	463b      	mov	r3, r7
 8004d44:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d46:	463b      	mov	r3, r7
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	785b      	ldrb	r3, [r3, #1]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	f040 872e 	bne.w	8005bae <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004d52:	463b      	mov	r3, r7
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	699a      	ldr	r2, [r3, #24]
 8004d58:	463b      	mov	r3, r7
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d905      	bls.n	8004d6e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004d62:	463b      	mov	r3, r7
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004d6c:	e004      	b.n	8004d78 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004d6e:	463b      	mov	r3, r7
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004d78:	463b      	mov	r3, r7
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	7b1b      	ldrb	r3, [r3, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d134      	bne.n	8004dec <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004d82:	463b      	mov	r3, r7
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6959      	ldr	r1, [r3, #20]
 8004d88:	463b      	mov	r3, r7
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	88da      	ldrh	r2, [r3, #6]
 8004d8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	1d38      	adds	r0, r7, #4
 8004d96:	6800      	ldr	r0, [r0, #0]
 8004d98:	f001 fc03 	bl	80065a2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d9c:	f107 0310 	add.w	r3, r7, #16
 8004da0:	1d3a      	adds	r2, r7, #4
 8004da2:	6812      	ldr	r2, [r2, #0]
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	1d3b      	adds	r3, r7, #4
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	4619      	mov	r1, r3
 8004db2:	f107 0310 	add.w	r3, r7, #16
 8004db6:	f107 0210 	add.w	r2, r7, #16
 8004dba:	6812      	ldr	r2, [r2, #0]
 8004dbc:	440a      	add	r2, r1
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	463b      	mov	r3, r7
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	011a      	lsls	r2, r3, #4
 8004dc8:	f107 0310 	add.w	r3, r7, #16
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004dd4:	f107 030c 	add.w	r3, r7, #12
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	f107 030c 	add.w	r3, r7, #12
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	801a      	strh	r2, [r3, #0]
 8004de8:	f000 beac 	b.w	8005b44 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004dec:	463b      	mov	r3, r7
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	78db      	ldrb	r3, [r3, #3]
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	f040 838c 	bne.w	8005510 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004df8:	463b      	mov	r3, r7
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6a1a      	ldr	r2, [r3, #32]
 8004dfe:	463b      	mov	r3, r7
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	f240 8330 	bls.w	800546a <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004e0a:	1d3b      	adds	r3, r7, #4
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	463b      	mov	r3, r7
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e24:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004e28:	1d3b      	adds	r3, r7, #4
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	463b      	mov	r3, r7
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	441a      	add	r2, r3
 8004e36:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004e3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e42:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004e4e:	463b      	mov	r3, r7
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6a1a      	ldr	r2, [r3, #32]
 8004e54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e58:	1ad2      	subs	r2, r2, r3
 8004e5a:	463b      	mov	r3, r7
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004e60:	1d3b      	adds	r3, r7, #4
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	463b      	mov	r3, r7
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 819e 	beq.w	80051b8 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e80:	1d3a      	adds	r2, r7, #4
 8004e82:	6812      	ldr	r2, [r2, #0]
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	463b      	mov	r3, r7
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	785b      	ldrb	r3, [r3, #1]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d17a      	bne.n	8004f86 <USB_EPStartXfer+0x24e>
 8004e90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e94:	1d3a      	adds	r2, r7, #4
 8004e96:	6812      	ldr	r2, [r2, #0]
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	1d3b      	adds	r3, r7, #4
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004eaa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004eae:	6812      	ldr	r2, [r2, #0]
 8004eb0:	440a      	add	r2, r1
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	463b      	mov	r3, r7
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	011a      	lsls	r2, r3, #4
 8004ebc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d11a      	bne.n	8004f0c <USB_EPStartXfer+0x1d4>
 8004ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	801a      	strh	r2, [r3, #0]
 8004eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004efc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	801a      	strh	r2, [r3, #0]
 8004f0a:	e062      	b.n	8004fd2 <USB_EPStartXfer+0x29a>
 8004f0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f10:	2b3e      	cmp	r3, #62	; 0x3e
 8004f12:	d819      	bhi.n	8004f48 <USB_EPStartXfer+0x210>
 8004f14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f18:	085b      	lsrs	r3, r3, #1
 8004f1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d004      	beq.n	8004f34 <USB_EPStartXfer+0x1fc>
 8004f2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f2e:	3301      	adds	r3, #1
 8004f30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	029b      	lsls	r3, r3, #10
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	801a      	strh	r2, [r3, #0]
 8004f46:	e044      	b.n	8004fd2 <USB_EPStartXfer+0x29a>
 8004f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f4c:	095b      	lsrs	r3, r3, #5
 8004f4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f56:	f003 031f 	and.w	r3, r3, #31
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d104      	bne.n	8004f68 <USB_EPStartXfer+0x230>
 8004f5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f62:	3b01      	subs	r3, #1
 8004f64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	029b      	lsls	r3, r3, #10
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	801a      	strh	r2, [r3, #0]
 8004f84:	e025      	b.n	8004fd2 <USB_EPStartXfer+0x29a>
 8004f86:	463b      	mov	r3, r7
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	785b      	ldrb	r3, [r3, #1]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d120      	bne.n	8004fd2 <USB_EPStartXfer+0x29a>
 8004f90:	1d3b      	adds	r3, r7, #4
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004fa0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004fa4:	6812      	ldr	r2, [r2, #0]
 8004fa6:	440a      	add	r2, r1
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	463b      	mov	r3, r7
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	011a      	lsls	r2, r3, #4
 8004fb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004fbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004fd2:	463b      	mov	r3, r7
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	895b      	ldrh	r3, [r3, #10]
 8004fd8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fdc:	463b      	mov	r3, r7
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6959      	ldr	r1, [r3, #20]
 8004fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004fec:	1d38      	adds	r0, r7, #4
 8004fee:	6800      	ldr	r0, [r0, #0]
 8004ff0:	f001 fad7 	bl	80065a2 <USB_WritePMA>
            ep->xfer_buff += len;
 8004ff4:	463b      	mov	r3, r7
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695a      	ldr	r2, [r3, #20]
 8004ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ffe:	441a      	add	r2, r3
 8005000:	463b      	mov	r3, r7
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005006:	463b      	mov	r3, r7
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6a1a      	ldr	r2, [r3, #32]
 800500c:	463b      	mov	r3, r7
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	429a      	cmp	r2, r3
 8005014:	d909      	bls.n	800502a <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8005016:	463b      	mov	r3, r7
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6a1a      	ldr	r2, [r3, #32]
 800501c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005020:	1ad2      	subs	r2, r2, r3
 8005022:	463b      	mov	r3, r7
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	621a      	str	r2, [r3, #32]
 8005028:	e008      	b.n	800503c <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800502a:	463b      	mov	r3, r7
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005034:	463b      	mov	r3, r7
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2200      	movs	r2, #0
 800503a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800503c:	463b      	mov	r3, r7
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	785b      	ldrb	r3, [r3, #1]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d17a      	bne.n	800513c <USB_EPStartXfer+0x404>
 8005046:	f107 0318 	add.w	r3, r7, #24
 800504a:	1d3a      	adds	r2, r7, #4
 800504c:	6812      	ldr	r2, [r2, #0]
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	1d3b      	adds	r3, r7, #4
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005058:	b29b      	uxth	r3, r3
 800505a:	4619      	mov	r1, r3
 800505c:	f107 0318 	add.w	r3, r7, #24
 8005060:	f107 0218 	add.w	r2, r7, #24
 8005064:	6812      	ldr	r2, [r2, #0]
 8005066:	440a      	add	r2, r1
 8005068:	601a      	str	r2, [r3, #0]
 800506a:	463b      	mov	r3, r7
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	011a      	lsls	r2, r3, #4
 8005072:	f107 0318 	add.w	r3, r7, #24
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4413      	add	r3, r2
 800507a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800507e:	f107 0314 	add.w	r3, r7, #20
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005088:	2b00      	cmp	r3, #0
 800508a:	d11a      	bne.n	80050c2 <USB_EPStartXfer+0x38a>
 800508c:	f107 0314 	add.w	r3, r7, #20
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	b29b      	uxth	r3, r3
 8005096:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800509a:	b29a      	uxth	r2, r3
 800509c:	f107 0314 	add.w	r3, r7, #20
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	801a      	strh	r2, [r3, #0]
 80050a4:	f107 0314 	add.w	r3, r7, #20
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	f107 0314 	add.w	r3, r7, #20
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	801a      	strh	r2, [r3, #0]
 80050c0:	e067      	b.n	8005192 <USB_EPStartXfer+0x45a>
 80050c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050c6:	2b3e      	cmp	r3, #62	; 0x3e
 80050c8:	d819      	bhi.n	80050fe <USB_EPStartXfer+0x3c6>
 80050ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ce:	085b      	lsrs	r3, r3, #1
 80050d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80050d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d004      	beq.n	80050ea <USB_EPStartXfer+0x3b2>
 80050e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80050e4:	3301      	adds	r3, #1
 80050e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80050ea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	029b      	lsls	r3, r3, #10
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	f107 0314 	add.w	r3, r7, #20
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	801a      	strh	r2, [r3, #0]
 80050fc:	e049      	b.n	8005192 <USB_EPStartXfer+0x45a>
 80050fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800510c:	f003 031f 	and.w	r3, r3, #31
 8005110:	2b00      	cmp	r3, #0
 8005112:	d104      	bne.n	800511e <USB_EPStartXfer+0x3e6>
 8005114:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005118:	3b01      	subs	r3, #1
 800511a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800511e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005122:	b29b      	uxth	r3, r3
 8005124:	029b      	lsls	r3, r3, #10
 8005126:	b29b      	uxth	r3, r3
 8005128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800512c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005130:	b29a      	uxth	r2, r3
 8005132:	f107 0314 	add.w	r3, r7, #20
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	801a      	strh	r2, [r3, #0]
 800513a:	e02a      	b.n	8005192 <USB_EPStartXfer+0x45a>
 800513c:	463b      	mov	r3, r7
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	785b      	ldrb	r3, [r3, #1]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d125      	bne.n	8005192 <USB_EPStartXfer+0x45a>
 8005146:	f107 0320 	add.w	r3, r7, #32
 800514a:	1d3a      	adds	r2, r7, #4
 800514c:	6812      	ldr	r2, [r2, #0]
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	1d3b      	adds	r3, r7, #4
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005158:	b29b      	uxth	r3, r3
 800515a:	4619      	mov	r1, r3
 800515c:	f107 0320 	add.w	r3, r7, #32
 8005160:	f107 0220 	add.w	r2, r7, #32
 8005164:	6812      	ldr	r2, [r2, #0]
 8005166:	440a      	add	r2, r1
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	463b      	mov	r3, r7
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	011a      	lsls	r2, r3, #4
 8005172:	f107 0320 	add.w	r3, r7, #32
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4413      	add	r3, r2
 800517a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800517e:	f107 031c 	add.w	r3, r7, #28
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005188:	b29a      	uxth	r2, r3
 800518a:	f107 031c 	add.w	r3, r7, #28
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005192:	463b      	mov	r3, r7
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	891b      	ldrh	r3, [r3, #8]
 8005198:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800519c:	463b      	mov	r3, r7
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6959      	ldr	r1, [r3, #20]
 80051a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80051ac:	1d38      	adds	r0, r7, #4
 80051ae:	6800      	ldr	r0, [r0, #0]
 80051b0:	f001 f9f7 	bl	80065a2 <USB_WritePMA>
 80051b4:	f000 bcc6 	b.w	8005b44 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051b8:	463b      	mov	r3, r7
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	785b      	ldrb	r3, [r3, #1]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d164      	bne.n	800528c <USB_EPStartXfer+0x554>
 80051c2:	1d3b      	adds	r3, r7, #4
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80051c8:	1d3b      	adds	r3, r7, #4
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051d6:	4413      	add	r3, r2
 80051d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80051da:	463b      	mov	r3, r7
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	011a      	lsls	r2, r3, #4
 80051e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051e4:	4413      	add	r3, r2
 80051e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051ea:	647b      	str	r3, [r7, #68]	; 0x44
 80051ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d112      	bne.n	800521a <USB_EPStartXfer+0x4e2>
 80051f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051f6:	881b      	ldrh	r3, [r3, #0]
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051fe:	b29a      	uxth	r2, r3
 8005200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005202:	801a      	strh	r2, [r3, #0]
 8005204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	b29b      	uxth	r3, r3
 800520a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800520e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005212:	b29a      	uxth	r2, r3
 8005214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005216:	801a      	strh	r2, [r3, #0]
 8005218:	e057      	b.n	80052ca <USB_EPStartXfer+0x592>
 800521a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800521e:	2b3e      	cmp	r3, #62	; 0x3e
 8005220:	d817      	bhi.n	8005252 <USB_EPStartXfer+0x51a>
 8005222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005226:	085b      	lsrs	r3, r3, #1
 8005228:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800522c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b00      	cmp	r3, #0
 8005236:	d004      	beq.n	8005242 <USB_EPStartXfer+0x50a>
 8005238:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800523c:	3301      	adds	r3, #1
 800523e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005242:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005246:	b29b      	uxth	r3, r3
 8005248:	029b      	lsls	r3, r3, #10
 800524a:	b29a      	uxth	r2, r3
 800524c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800524e:	801a      	strh	r2, [r3, #0]
 8005250:	e03b      	b.n	80052ca <USB_EPStartXfer+0x592>
 8005252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800525c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005260:	f003 031f 	and.w	r3, r3, #31
 8005264:	2b00      	cmp	r3, #0
 8005266:	d104      	bne.n	8005272 <USB_EPStartXfer+0x53a>
 8005268:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800526c:	3b01      	subs	r3, #1
 800526e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005272:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005276:	b29b      	uxth	r3, r3
 8005278:	029b      	lsls	r3, r3, #10
 800527a:	b29b      	uxth	r3, r3
 800527c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005284:	b29a      	uxth	r2, r3
 8005286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005288:	801a      	strh	r2, [r3, #0]
 800528a:	e01e      	b.n	80052ca <USB_EPStartXfer+0x592>
 800528c:	463b      	mov	r3, r7
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	785b      	ldrb	r3, [r3, #1]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d119      	bne.n	80052ca <USB_EPStartXfer+0x592>
 8005296:	1d3b      	adds	r3, r7, #4
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	653b      	str	r3, [r7, #80]	; 0x50
 800529c:	1d3b      	adds	r3, r7, #4
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	461a      	mov	r2, r3
 80052a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052aa:	4413      	add	r3, r2
 80052ac:	653b      	str	r3, [r7, #80]	; 0x50
 80052ae:	463b      	mov	r3, r7
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	011a      	lsls	r2, r3, #4
 80052b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052b8:	4413      	add	r3, r2
 80052ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052ca:	463b      	mov	r3, r7
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	891b      	ldrh	r3, [r3, #8]
 80052d0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052d4:	463b      	mov	r3, r7
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6959      	ldr	r1, [r3, #20]
 80052da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052de:	b29b      	uxth	r3, r3
 80052e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80052e4:	1d38      	adds	r0, r7, #4
 80052e6:	6800      	ldr	r0, [r0, #0]
 80052e8:	f001 f95b 	bl	80065a2 <USB_WritePMA>
            ep->xfer_buff += len;
 80052ec:	463b      	mov	r3, r7
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	695a      	ldr	r2, [r3, #20]
 80052f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052f6:	441a      	add	r2, r3
 80052f8:	463b      	mov	r3, r7
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80052fe:	463b      	mov	r3, r7
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6a1a      	ldr	r2, [r3, #32]
 8005304:	463b      	mov	r3, r7
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	429a      	cmp	r2, r3
 800530c:	d909      	bls.n	8005322 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800530e:	463b      	mov	r3, r7
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6a1a      	ldr	r2, [r3, #32]
 8005314:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005318:	1ad2      	subs	r2, r2, r3
 800531a:	463b      	mov	r3, r7
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	621a      	str	r2, [r3, #32]
 8005320:	e008      	b.n	8005334 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005322:	463b      	mov	r3, r7
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800532c:	463b      	mov	r3, r7
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2200      	movs	r2, #0
 8005332:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005334:	1d3b      	adds	r3, r7, #4
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	643b      	str	r3, [r7, #64]	; 0x40
 800533a:	463b      	mov	r3, r7
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	785b      	ldrb	r3, [r3, #1]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d164      	bne.n	800540e <USB_EPStartXfer+0x6d6>
 8005344:	1d3b      	adds	r3, r7, #4
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	63bb      	str	r3, [r7, #56]	; 0x38
 800534a:	1d3b      	adds	r3, r7, #4
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005352:	b29b      	uxth	r3, r3
 8005354:	461a      	mov	r2, r3
 8005356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005358:	4413      	add	r3, r2
 800535a:	63bb      	str	r3, [r7, #56]	; 0x38
 800535c:	463b      	mov	r3, r7
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	011a      	lsls	r2, r3, #4
 8005364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005366:	4413      	add	r3, r2
 8005368:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800536c:	637b      	str	r3, [r7, #52]	; 0x34
 800536e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005372:	2b00      	cmp	r3, #0
 8005374:	d112      	bne.n	800539c <USB_EPStartXfer+0x664>
 8005376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	b29b      	uxth	r3, r3
 800537c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005380:	b29a      	uxth	r2, r3
 8005382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005384:	801a      	strh	r2, [r3, #0]
 8005386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	b29b      	uxth	r3, r3
 800538c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005394:	b29a      	uxth	r2, r3
 8005396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005398:	801a      	strh	r2, [r3, #0]
 800539a:	e054      	b.n	8005446 <USB_EPStartXfer+0x70e>
 800539c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053a0:	2b3e      	cmp	r3, #62	; 0x3e
 80053a2:	d817      	bhi.n	80053d4 <USB_EPStartXfer+0x69c>
 80053a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053a8:	085b      	lsrs	r3, r3, #1
 80053aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80053ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d004      	beq.n	80053c4 <USB_EPStartXfer+0x68c>
 80053ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053be:	3301      	adds	r3, #1
 80053c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80053c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	029b      	lsls	r3, r3, #10
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d0:	801a      	strh	r2, [r3, #0]
 80053d2:	e038      	b.n	8005446 <USB_EPStartXfer+0x70e>
 80053d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053d8:	095b      	lsrs	r3, r3, #5
 80053da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80053de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053e2:	f003 031f 	and.w	r3, r3, #31
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d104      	bne.n	80053f4 <USB_EPStartXfer+0x6bc>
 80053ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053ee:	3b01      	subs	r3, #1
 80053f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80053f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	029b      	lsls	r3, r3, #10
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005406:	b29a      	uxth	r2, r3
 8005408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540a:	801a      	strh	r2, [r3, #0]
 800540c:	e01b      	b.n	8005446 <USB_EPStartXfer+0x70e>
 800540e:	463b      	mov	r3, r7
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	785b      	ldrb	r3, [r3, #1]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d116      	bne.n	8005446 <USB_EPStartXfer+0x70e>
 8005418:	1d3b      	adds	r3, r7, #4
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005420:	b29b      	uxth	r3, r3
 8005422:	461a      	mov	r2, r3
 8005424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005426:	4413      	add	r3, r2
 8005428:	643b      	str	r3, [r7, #64]	; 0x40
 800542a:	463b      	mov	r3, r7
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	011a      	lsls	r2, r3, #4
 8005432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005434:	4413      	add	r3, r2
 8005436:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800543a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800543c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005440:	b29a      	uxth	r2, r3
 8005442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005444:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005446:	463b      	mov	r3, r7
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	895b      	ldrh	r3, [r3, #10]
 800544c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005450:	463b      	mov	r3, r7
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6959      	ldr	r1, [r3, #20]
 8005456:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800545a:	b29b      	uxth	r3, r3
 800545c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005460:	1d38      	adds	r0, r7, #4
 8005462:	6800      	ldr	r0, [r0, #0]
 8005464:	f001 f89d 	bl	80065a2 <USB_WritePMA>
 8005468:	e36c      	b.n	8005b44 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800546a:	463b      	mov	r3, r7
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005474:	1d3b      	adds	r3, r7, #4
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	463b      	mov	r3, r7
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	b29b      	uxth	r3, r3
 8005486:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800548a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005492:	1d3b      	adds	r3, r7, #4
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	463b      	mov	r3, r7
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	441a      	add	r2, r3
 80054a0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80054a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80054b8:	1d3b      	adds	r3, r7, #4
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054be:	1d3b      	adds	r3, r7, #4
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	461a      	mov	r2, r3
 80054ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054cc:	4413      	add	r3, r2
 80054ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054d0:	463b      	mov	r3, r7
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	011a      	lsls	r2, r3, #4
 80054d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054da:	4413      	add	r3, r2
 80054dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80054e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80054ec:	463b      	mov	r3, r7
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	891b      	ldrh	r3, [r3, #8]
 80054f2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054f6:	463b      	mov	r3, r7
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6959      	ldr	r1, [r3, #20]
 80054fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005500:	b29b      	uxth	r3, r3
 8005502:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005506:	1d38      	adds	r0, r7, #4
 8005508:	6800      	ldr	r0, [r0, #0]
 800550a:	f001 f84a 	bl	80065a2 <USB_WritePMA>
 800550e:	e319      	b.n	8005b44 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005510:	1d3b      	adds	r3, r7, #4
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	463b      	mov	r3, r7
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	b29b      	uxth	r3, r3
 8005522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800552e:	1d3b      	adds	r3, r7, #4
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	463b      	mov	r3, r7
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	441a      	add	r2, r3
 800553c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005540:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005544:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005548:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800554c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005550:	b29b      	uxth	r3, r3
 8005552:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005554:	463b      	mov	r3, r7
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6a1a      	ldr	r2, [r3, #32]
 800555a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800555e:	1ad2      	subs	r2, r2, r3
 8005560:	463b      	mov	r3, r7
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005566:	1d3b      	adds	r3, r7, #4
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	463b      	mov	r3, r7
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	b29b      	uxth	r3, r3
 8005578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 8162 	beq.w	8005846 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005582:	1d3b      	adds	r3, r7, #4
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800558a:	463b      	mov	r3, r7
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	785b      	ldrb	r3, [r3, #1]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d164      	bne.n	800565e <USB_EPStartXfer+0x926>
 8005594:	1d3b      	adds	r3, r7, #4
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	67bb      	str	r3, [r7, #120]	; 0x78
 800559a:	1d3b      	adds	r3, r7, #4
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	461a      	mov	r2, r3
 80055a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055a8:	4413      	add	r3, r2
 80055aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80055ac:	463b      	mov	r3, r7
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	011a      	lsls	r2, r3, #4
 80055b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055b6:	4413      	add	r3, r2
 80055b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055bc:	677b      	str	r3, [r7, #116]	; 0x74
 80055be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d112      	bne.n	80055ec <USB_EPStartXfer+0x8b4>
 80055c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055d4:	801a      	strh	r2, [r3, #0]
 80055d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	b29b      	uxth	r3, r3
 80055dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055e8:	801a      	strh	r2, [r3, #0]
 80055ea:	e057      	b.n	800569c <USB_EPStartXfer+0x964>
 80055ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f0:	2b3e      	cmp	r3, #62	; 0x3e
 80055f2:	d817      	bhi.n	8005624 <USB_EPStartXfer+0x8ec>
 80055f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f8:	085b      	lsrs	r3, r3, #1
 80055fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80055fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d004      	beq.n	8005614 <USB_EPStartXfer+0x8dc>
 800560a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800560e:	3301      	adds	r3, #1
 8005610:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005614:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005618:	b29b      	uxth	r3, r3
 800561a:	029b      	lsls	r3, r3, #10
 800561c:	b29a      	uxth	r2, r3
 800561e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005620:	801a      	strh	r2, [r3, #0]
 8005622:	e03b      	b.n	800569c <USB_EPStartXfer+0x964>
 8005624:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005628:	095b      	lsrs	r3, r3, #5
 800562a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800562e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005632:	f003 031f 	and.w	r3, r3, #31
 8005636:	2b00      	cmp	r3, #0
 8005638:	d104      	bne.n	8005644 <USB_EPStartXfer+0x90c>
 800563a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800563e:	3b01      	subs	r3, #1
 8005640:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005644:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005648:	b29b      	uxth	r3, r3
 800564a:	029b      	lsls	r3, r3, #10
 800564c:	b29b      	uxth	r3, r3
 800564e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005656:	b29a      	uxth	r2, r3
 8005658:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800565a:	801a      	strh	r2, [r3, #0]
 800565c:	e01e      	b.n	800569c <USB_EPStartXfer+0x964>
 800565e:	463b      	mov	r3, r7
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	785b      	ldrb	r3, [r3, #1]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d119      	bne.n	800569c <USB_EPStartXfer+0x964>
 8005668:	1d3b      	adds	r3, r7, #4
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005670:	b29b      	uxth	r3, r3
 8005672:	461a      	mov	r2, r3
 8005674:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005678:	4413      	add	r3, r2
 800567a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800567e:	463b      	mov	r3, r7
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	011a      	lsls	r2, r3, #4
 8005686:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800568a:	4413      	add	r3, r2
 800568c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005690:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005692:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005696:	b29a      	uxth	r2, r3
 8005698:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800569a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800569c:	463b      	mov	r3, r7
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	895b      	ldrh	r3, [r3, #10]
 80056a2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056a6:	463b      	mov	r3, r7
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6959      	ldr	r1, [r3, #20]
 80056ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80056b6:	1d38      	adds	r0, r7, #4
 80056b8:	6800      	ldr	r0, [r0, #0]
 80056ba:	f000 ff72 	bl	80065a2 <USB_WritePMA>
          ep->xfer_buff += len;
 80056be:	463b      	mov	r3, r7
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	695a      	ldr	r2, [r3, #20]
 80056c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056c8:	441a      	add	r2, r3
 80056ca:	463b      	mov	r3, r7
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80056d0:	463b      	mov	r3, r7
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6a1a      	ldr	r2, [r3, #32]
 80056d6:	463b      	mov	r3, r7
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d909      	bls.n	80056f4 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 80056e0:	463b      	mov	r3, r7
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6a1a      	ldr	r2, [r3, #32]
 80056e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ea:	1ad2      	subs	r2, r2, r3
 80056ec:	463b      	mov	r3, r7
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	621a      	str	r2, [r3, #32]
 80056f2:	e008      	b.n	8005706 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 80056f4:	463b      	mov	r3, r7
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80056fe:	463b      	mov	r3, r7
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2200      	movs	r2, #0
 8005704:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005706:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800570a:	2b00      	cmp	r3, #0
 800570c:	f000 821a 	beq.w	8005b44 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005710:	463b      	mov	r3, r7
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	785b      	ldrb	r3, [r3, #1]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d164      	bne.n	80057e4 <USB_EPStartXfer+0xaac>
 800571a:	1d3b      	adds	r3, r7, #4
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005720:	1d3b      	adds	r3, r7, #4
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005728:	b29b      	uxth	r3, r3
 800572a:	461a      	mov	r2, r3
 800572c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800572e:	4413      	add	r3, r2
 8005730:	66bb      	str	r3, [r7, #104]	; 0x68
 8005732:	463b      	mov	r3, r7
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	011a      	lsls	r2, r3, #4
 800573a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800573c:	4413      	add	r3, r2
 800573e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005742:	667b      	str	r3, [r7, #100]	; 0x64
 8005744:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005748:	2b00      	cmp	r3, #0
 800574a:	d112      	bne.n	8005772 <USB_EPStartXfer+0xa3a>
 800574c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	b29b      	uxth	r3, r3
 8005752:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005756:	b29a      	uxth	r2, r3
 8005758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800575a:	801a      	strh	r2, [r3, #0]
 800575c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	b29b      	uxth	r3, r3
 8005762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800576a:	b29a      	uxth	r2, r3
 800576c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800576e:	801a      	strh	r2, [r3, #0]
 8005770:	e057      	b.n	8005822 <USB_EPStartXfer+0xaea>
 8005772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005776:	2b3e      	cmp	r3, #62	; 0x3e
 8005778:	d817      	bhi.n	80057aa <USB_EPStartXfer+0xa72>
 800577a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800577e:	085b      	lsrs	r3, r3, #1
 8005780:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005784:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b00      	cmp	r3, #0
 800578e:	d004      	beq.n	800579a <USB_EPStartXfer+0xa62>
 8005790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005794:	3301      	adds	r3, #1
 8005796:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800579a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800579e:	b29b      	uxth	r3, r3
 80057a0:	029b      	lsls	r3, r3, #10
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057a6:	801a      	strh	r2, [r3, #0]
 80057a8:	e03b      	b.n	8005822 <USB_EPStartXfer+0xaea>
 80057aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ae:	095b      	lsrs	r3, r3, #5
 80057b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80057b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057b8:	f003 031f 	and.w	r3, r3, #31
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d104      	bne.n	80057ca <USB_EPStartXfer+0xa92>
 80057c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c4:	3b01      	subs	r3, #1
 80057c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80057ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	029b      	lsls	r3, r3, #10
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057dc:	b29a      	uxth	r2, r3
 80057de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057e0:	801a      	strh	r2, [r3, #0]
 80057e2:	e01e      	b.n	8005822 <USB_EPStartXfer+0xaea>
 80057e4:	463b      	mov	r3, r7
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	785b      	ldrb	r3, [r3, #1]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d119      	bne.n	8005822 <USB_EPStartXfer+0xaea>
 80057ee:	1d3b      	adds	r3, r7, #4
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	673b      	str	r3, [r7, #112]	; 0x70
 80057f4:	1d3b      	adds	r3, r7, #4
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	461a      	mov	r2, r3
 8005800:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005802:	4413      	add	r3, r2
 8005804:	673b      	str	r3, [r7, #112]	; 0x70
 8005806:	463b      	mov	r3, r7
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	011a      	lsls	r2, r3, #4
 800580e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005810:	4413      	add	r3, r2
 8005812:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005816:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005818:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800581c:	b29a      	uxth	r2, r3
 800581e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005820:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005822:	463b      	mov	r3, r7
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	891b      	ldrh	r3, [r3, #8]
 8005828:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800582c:	463b      	mov	r3, r7
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6959      	ldr	r1, [r3, #20]
 8005832:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005836:	b29b      	uxth	r3, r3
 8005838:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800583c:	1d38      	adds	r0, r7, #4
 800583e:	6800      	ldr	r0, [r0, #0]
 8005840:	f000 feaf 	bl	80065a2 <USB_WritePMA>
 8005844:	e17e      	b.n	8005b44 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005846:	463b      	mov	r3, r7
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	785b      	ldrb	r3, [r3, #1]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d16f      	bne.n	8005930 <USB_EPStartXfer+0xbf8>
 8005850:	1d3b      	adds	r3, r7, #4
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005858:	1d3b      	adds	r3, r7, #4
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005860:	b29b      	uxth	r3, r3
 8005862:	461a      	mov	r2, r3
 8005864:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005868:	4413      	add	r3, r2
 800586a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800586e:	463b      	mov	r3, r7
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	011a      	lsls	r2, r3, #4
 8005876:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800587a:	4413      	add	r3, r2
 800587c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005888:	2b00      	cmp	r3, #0
 800588a:	d116      	bne.n	80058ba <USB_EPStartXfer+0xb82>
 800588c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	b29b      	uxth	r3, r3
 8005894:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005898:	b29a      	uxth	r2, r3
 800589a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800589e:	801a      	strh	r2, [r3, #0]
 80058a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058b6:	801a      	strh	r2, [r3, #0]
 80058b8:	e05f      	b.n	800597a <USB_EPStartXfer+0xc42>
 80058ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058be:	2b3e      	cmp	r3, #62	; 0x3e
 80058c0:	d818      	bhi.n	80058f4 <USB_EPStartXfer+0xbbc>
 80058c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058c6:	085b      	lsrs	r3, r3, #1
 80058c8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80058cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d004      	beq.n	80058e2 <USB_EPStartXfer+0xbaa>
 80058d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80058dc:	3301      	adds	r3, #1
 80058de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80058e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	029b      	lsls	r3, r3, #10
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058f0:	801a      	strh	r2, [r3, #0]
 80058f2:	e042      	b.n	800597a <USB_EPStartXfer+0xc42>
 80058f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058f8:	095b      	lsrs	r3, r3, #5
 80058fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80058fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005902:	f003 031f 	and.w	r3, r3, #31
 8005906:	2b00      	cmp	r3, #0
 8005908:	d104      	bne.n	8005914 <USB_EPStartXfer+0xbdc>
 800590a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800590e:	3b01      	subs	r3, #1
 8005910:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005914:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005918:	b29b      	uxth	r3, r3
 800591a:	029b      	lsls	r3, r3, #10
 800591c:	b29b      	uxth	r3, r3
 800591e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005926:	b29a      	uxth	r2, r3
 8005928:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800592c:	801a      	strh	r2, [r3, #0]
 800592e:	e024      	b.n	800597a <USB_EPStartXfer+0xc42>
 8005930:	463b      	mov	r3, r7
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	785b      	ldrb	r3, [r3, #1]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d11f      	bne.n	800597a <USB_EPStartXfer+0xc42>
 800593a:	1d3b      	adds	r3, r7, #4
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005942:	1d3b      	adds	r3, r7, #4
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800594a:	b29b      	uxth	r3, r3
 800594c:	461a      	mov	r2, r3
 800594e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005952:	4413      	add	r3, r2
 8005954:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005958:	463b      	mov	r3, r7
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	011a      	lsls	r2, r3, #4
 8005960:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005964:	4413      	add	r3, r2
 8005966:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800596a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800596e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005972:	b29a      	uxth	r2, r3
 8005974:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005978:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800597a:	463b      	mov	r3, r7
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	891b      	ldrh	r3, [r3, #8]
 8005980:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005984:	463b      	mov	r3, r7
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6959      	ldr	r1, [r3, #20]
 800598a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800598e:	b29b      	uxth	r3, r3
 8005990:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005994:	1d38      	adds	r0, r7, #4
 8005996:	6800      	ldr	r0, [r0, #0]
 8005998:	f000 fe03 	bl	80065a2 <USB_WritePMA>
          ep->xfer_buff += len;
 800599c:	463b      	mov	r3, r7
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	695a      	ldr	r2, [r3, #20]
 80059a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059a6:	441a      	add	r2, r3
 80059a8:	463b      	mov	r3, r7
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80059ae:	463b      	mov	r3, r7
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6a1a      	ldr	r2, [r3, #32]
 80059b4:	463b      	mov	r3, r7
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d909      	bls.n	80059d2 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80059be:	463b      	mov	r3, r7
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6a1a      	ldr	r2, [r3, #32]
 80059c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c8:	1ad2      	subs	r2, r2, r3
 80059ca:	463b      	mov	r3, r7
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	621a      	str	r2, [r3, #32]
 80059d0:	e008      	b.n	80059e4 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80059d2:	463b      	mov	r3, r7
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80059dc:	463b      	mov	r3, r7
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2200      	movs	r2, #0
 80059e2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80059e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 80ab 	beq.w	8005b44 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80059ee:	1d3b      	adds	r3, r7, #4
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059f6:	463b      	mov	r3, r7
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	785b      	ldrb	r3, [r3, #1]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d16f      	bne.n	8005ae0 <USB_EPStartXfer+0xda8>
 8005a00:	1d3b      	adds	r3, r7, #4
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a08:	1d3b      	adds	r3, r7, #4
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	461a      	mov	r2, r3
 8005a14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a18:	4413      	add	r3, r2
 8005a1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a1e:	463b      	mov	r3, r7
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	011a      	lsls	r2, r3, #4
 8005a26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d116      	bne.n	8005a6a <USB_EPStartXfer+0xd32>
 8005a3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a4e:	801a      	strh	r2, [r3, #0]
 8005a50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a66:	801a      	strh	r2, [r3, #0]
 8005a68:	e05b      	b.n	8005b22 <USB_EPStartXfer+0xdea>
 8005a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a6e:	2b3e      	cmp	r3, #62	; 0x3e
 8005a70:	d818      	bhi.n	8005aa4 <USB_EPStartXfer+0xd6c>
 8005a72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a76:	085b      	lsrs	r3, r3, #1
 8005a78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005a7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d004      	beq.n	8005a92 <USB_EPStartXfer+0xd5a>
 8005a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	029b      	lsls	r3, r3, #10
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005aa0:	801a      	strh	r2, [r3, #0]
 8005aa2:	e03e      	b.n	8005b22 <USB_EPStartXfer+0xdea>
 8005aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aa8:	095b      	lsrs	r3, r3, #5
 8005aaa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab2:	f003 031f 	and.w	r3, r3, #31
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d104      	bne.n	8005ac4 <USB_EPStartXfer+0xd8c>
 8005aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	029b      	lsls	r3, r3, #10
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005adc:	801a      	strh	r2, [r3, #0]
 8005ade:	e020      	b.n	8005b22 <USB_EPStartXfer+0xdea>
 8005ae0:	463b      	mov	r3, r7
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	785b      	ldrb	r3, [r3, #1]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d11b      	bne.n	8005b22 <USB_EPStartXfer+0xdea>
 8005aea:	1d3b      	adds	r3, r7, #4
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	461a      	mov	r2, r3
 8005af6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005afa:	4413      	add	r3, r2
 8005afc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b00:	463b      	mov	r3, r7
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	011a      	lsls	r2, r3, #4
 8005b08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b22:	463b      	mov	r3, r7
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	895b      	ldrh	r3, [r3, #10]
 8005b28:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b2c:	463b      	mov	r3, r7
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6959      	ldr	r1, [r3, #20]
 8005b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b3c:	1d38      	adds	r0, r7, #4
 8005b3e:	6800      	ldr	r0, [r0, #0]
 8005b40:	f000 fd2f 	bl	80065a2 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005b44:	1d3b      	adds	r3, r7, #4
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	463b      	mov	r3, r7
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	f107 020a 	add.w	r2, r7, #10
 8005b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b62:	8013      	strh	r3, [r2, #0]
 8005b64:	f107 030a 	add.w	r3, r7, #10
 8005b68:	f107 020a 	add.w	r2, r7, #10
 8005b6c:	8812      	ldrh	r2, [r2, #0]
 8005b6e:	f082 0210 	eor.w	r2, r2, #16
 8005b72:	801a      	strh	r2, [r3, #0]
 8005b74:	f107 030a 	add.w	r3, r7, #10
 8005b78:	f107 020a 	add.w	r2, r7, #10
 8005b7c:	8812      	ldrh	r2, [r2, #0]
 8005b7e:	f082 0220 	eor.w	r2, r2, #32
 8005b82:	801a      	strh	r2, [r3, #0]
 8005b84:	1d3b      	adds	r3, r7, #4
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	463b      	mov	r3, r7
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	441a      	add	r2, r3
 8005b92:	f107 030a 	add.w	r3, r7, #10
 8005b96:	881b      	ldrh	r3, [r3, #0]
 8005b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	8013      	strh	r3, [r2, #0]
 8005bac:	e3b5      	b.n	800631a <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005bae:	463b      	mov	r3, r7
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	7b1b      	ldrb	r3, [r3, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f040 8090 	bne.w	8005cda <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005bba:	463b      	mov	r3, r7
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	699a      	ldr	r2, [r3, #24]
 8005bc0:	463b      	mov	r3, r7
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d90e      	bls.n	8005be8 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8005bca:	463b      	mov	r3, r7
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005bd4:	463b      	mov	r3, r7
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699a      	ldr	r2, [r3, #24]
 8005bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bde:	1ad2      	subs	r2, r2, r3
 8005be0:	463b      	mov	r3, r7
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	619a      	str	r2, [r3, #24]
 8005be6:	e008      	b.n	8005bfa <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8005be8:	463b      	mov	r3, r7
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005bf2:	463b      	mov	r3, r7
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005bfa:	1d3b      	adds	r3, r7, #4
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c02:	1d3b      	adds	r3, r7, #4
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005c12:	4413      	add	r3, r2
 8005c14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c18:	463b      	mov	r3, r7
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	011a      	lsls	r2, r3, #4
 8005c20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005c24:	4413      	add	r3, r2
 8005c26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d116      	bne.n	8005c64 <USB_EPStartXfer+0xf2c>
 8005c36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c48:	801a      	strh	r2, [r3, #0]
 8005c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c60:	801a      	strh	r2, [r3, #0]
 8005c62:	e32c      	b.n	80062be <USB_EPStartXfer+0x1586>
 8005c64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c68:	2b3e      	cmp	r3, #62	; 0x3e
 8005c6a:	d818      	bhi.n	8005c9e <USB_EPStartXfer+0xf66>
 8005c6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c70:	085b      	lsrs	r3, r3, #1
 8005c72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d004      	beq.n	8005c8c <USB_EPStartXfer+0xf54>
 8005c82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c86:	3301      	adds	r3, #1
 8005c88:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	029b      	lsls	r3, r3, #10
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c9a:	801a      	strh	r2, [r3, #0]
 8005c9c:	e30f      	b.n	80062be <USB_EPStartXfer+0x1586>
 8005c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca2:	095b      	lsrs	r3, r3, #5
 8005ca4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005ca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cac:	f003 031f 	and.w	r3, r3, #31
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d104      	bne.n	8005cbe <USB_EPStartXfer+0xf86>
 8005cb4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005cbe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	029b      	lsls	r3, r3, #10
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cd6:	801a      	strh	r2, [r3, #0]
 8005cd8:	e2f1      	b.n	80062be <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005cda:	463b      	mov	r3, r7
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	78db      	ldrb	r3, [r3, #3]
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	f040 818f 	bne.w	8006004 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005ce6:	463b      	mov	r3, r7
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	785b      	ldrb	r3, [r3, #1]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d175      	bne.n	8005ddc <USB_EPStartXfer+0x10a4>
 8005cf0:	1d3b      	adds	r3, r7, #4
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cf8:	1d3b      	adds	r3, r7, #4
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	461a      	mov	r2, r3
 8005d04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d08:	4413      	add	r3, r2
 8005d0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d0e:	463b      	mov	r3, r7
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	011a      	lsls	r2, r3, #4
 8005d16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d24:	463b      	mov	r3, r7
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d116      	bne.n	8005d5c <USB_EPStartXfer+0x1024>
 8005d2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d40:	801a      	strh	r2, [r3, #0]
 8005d42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d58:	801a      	strh	r2, [r3, #0]
 8005d5a:	e065      	b.n	8005e28 <USB_EPStartXfer+0x10f0>
 8005d5c:	463b      	mov	r3, r7
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	2b3e      	cmp	r3, #62	; 0x3e
 8005d64:	d81a      	bhi.n	8005d9c <USB_EPStartXfer+0x1064>
 8005d66:	463b      	mov	r3, r7
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	085b      	lsrs	r3, r3, #1
 8005d6e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d72:	463b      	mov	r3, r7
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d004      	beq.n	8005d8a <USB_EPStartXfer+0x1052>
 8005d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d84:	3301      	adds	r3, #1
 8005d86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	029b      	lsls	r3, r3, #10
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d98:	801a      	strh	r2, [r3, #0]
 8005d9a:	e045      	b.n	8005e28 <USB_EPStartXfer+0x10f0>
 8005d9c:	463b      	mov	r3, r7
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	095b      	lsrs	r3, r3, #5
 8005da4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005da8:	463b      	mov	r3, r7
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f003 031f 	and.w	r3, r3, #31
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d104      	bne.n	8005dc0 <USB_EPStartXfer+0x1088>
 8005db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	029b      	lsls	r3, r3, #10
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005dd8:	801a      	strh	r2, [r3, #0]
 8005dda:	e025      	b.n	8005e28 <USB_EPStartXfer+0x10f0>
 8005ddc:	463b      	mov	r3, r7
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	785b      	ldrb	r3, [r3, #1]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d120      	bne.n	8005e28 <USB_EPStartXfer+0x10f0>
 8005de6:	1d3b      	adds	r3, r7, #4
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005dee:	1d3b      	adds	r3, r7, #4
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	461a      	mov	r2, r3
 8005dfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dfe:	4413      	add	r3, r2
 8005e00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005e04:	463b      	mov	r3, r7
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	011a      	lsls	r2, r3, #4
 8005e0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e10:	4413      	add	r3, r2
 8005e12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e1a:	463b      	mov	r3, r7
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005e26:	801a      	strh	r2, [r3, #0]
 8005e28:	1d3b      	adds	r3, r7, #4
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e30:	463b      	mov	r3, r7
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	785b      	ldrb	r3, [r3, #1]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d175      	bne.n	8005f26 <USB_EPStartXfer+0x11ee>
 8005e3a:	1d3b      	adds	r3, r7, #4
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e42:	1d3b      	adds	r3, r7, #4
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e52:	4413      	add	r3, r2
 8005e54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e58:	463b      	mov	r3, r7
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	011a      	lsls	r2, r3, #4
 8005e60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e64:	4413      	add	r3, r2
 8005e66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e6e:	463b      	mov	r3, r7
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d116      	bne.n	8005ea6 <USB_EPStartXfer+0x116e>
 8005e78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e7c:	881b      	ldrh	r3, [r3, #0]
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e8a:	801a      	strh	r2, [r3, #0]
 8005e8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ea2:	801a      	strh	r2, [r3, #0]
 8005ea4:	e061      	b.n	8005f6a <USB_EPStartXfer+0x1232>
 8005ea6:	463b      	mov	r3, r7
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	2b3e      	cmp	r3, #62	; 0x3e
 8005eae:	d81a      	bhi.n	8005ee6 <USB_EPStartXfer+0x11ae>
 8005eb0:	463b      	mov	r3, r7
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	085b      	lsrs	r3, r3, #1
 8005eb8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ebc:	463b      	mov	r3, r7
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d004      	beq.n	8005ed4 <USB_EPStartXfer+0x119c>
 8005eca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ece:	3301      	adds	r3, #1
 8005ed0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ed4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	029b      	lsls	r3, r3, #10
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ee2:	801a      	strh	r2, [r3, #0]
 8005ee4:	e041      	b.n	8005f6a <USB_EPStartXfer+0x1232>
 8005ee6:	463b      	mov	r3, r7
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	095b      	lsrs	r3, r3, #5
 8005eee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ef2:	463b      	mov	r3, r7
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	f003 031f 	and.w	r3, r3, #31
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d104      	bne.n	8005f0a <USB_EPStartXfer+0x11d2>
 8005f00:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f04:	3b01      	subs	r3, #1
 8005f06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	029b      	lsls	r3, r3, #10
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f22:	801a      	strh	r2, [r3, #0]
 8005f24:	e021      	b.n	8005f6a <USB_EPStartXfer+0x1232>
 8005f26:	463b      	mov	r3, r7
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	785b      	ldrb	r3, [r3, #1]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d11c      	bne.n	8005f6a <USB_EPStartXfer+0x1232>
 8005f30:	1d3b      	adds	r3, r7, #4
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f40:	4413      	add	r3, r2
 8005f42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f46:	463b      	mov	r3, r7
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	011a      	lsls	r2, r3, #4
 8005f4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f52:	4413      	add	r3, r2
 8005f54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f5c:	463b      	mov	r3, r7
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f68:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005f6a:	463b      	mov	r3, r7
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 81a4 	beq.w	80062be <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005f76:	1d3b      	adds	r3, r7, #4
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	463b      	mov	r3, r7
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005f8a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d005      	beq.n	8005fa2 <USB_EPStartXfer+0x126a>
 8005f96:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10d      	bne.n	8005fbe <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005fa2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f040 8187 	bne.w	80062be <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005fb0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f040 8180 	bne.w	80062be <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005fbe:	1d3b      	adds	r3, r7, #4
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	463b      	mov	r3, r7
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005fdc:	1d3b      	adds	r3, r7, #4
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	463b      	mov	r3, r7
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	441a      	add	r2, r3
 8005fea:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005fee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ff2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ffa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	8013      	strh	r3, [r2, #0]
 8006002:	e15c      	b.n	80062be <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006004:	463b      	mov	r3, r7
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	78db      	ldrb	r3, [r3, #3]
 800600a:	2b01      	cmp	r3, #1
 800600c:	f040 8155 	bne.w	80062ba <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006010:	463b      	mov	r3, r7
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699a      	ldr	r2, [r3, #24]
 8006016:	463b      	mov	r3, r7
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	429a      	cmp	r2, r3
 800601e:	d90e      	bls.n	800603e <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8006020:	463b      	mov	r3, r7
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800602a:	463b      	mov	r3, r7
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	699a      	ldr	r2, [r3, #24]
 8006030:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006034:	1ad2      	subs	r2, r2, r3
 8006036:	463b      	mov	r3, r7
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	619a      	str	r2, [r3, #24]
 800603c:	e008      	b.n	8006050 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800603e:	463b      	mov	r3, r7
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006048:	463b      	mov	r3, r7
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2200      	movs	r2, #0
 800604e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006050:	463b      	mov	r3, r7
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	785b      	ldrb	r3, [r3, #1]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d16f      	bne.n	800613a <USB_EPStartXfer+0x1402>
 800605a:	1d3b      	adds	r3, r7, #4
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006062:	1d3b      	adds	r3, r7, #4
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800606a:	b29b      	uxth	r3, r3
 800606c:	461a      	mov	r2, r3
 800606e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006072:	4413      	add	r3, r2
 8006074:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006078:	463b      	mov	r3, r7
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	011a      	lsls	r2, r3, #4
 8006080:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006084:	4413      	add	r3, r2
 8006086:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800608a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800608e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006092:	2b00      	cmp	r3, #0
 8006094:	d116      	bne.n	80060c4 <USB_EPStartXfer+0x138c>
 8006096:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800609a:	881b      	ldrh	r3, [r3, #0]
 800609c:	b29b      	uxth	r3, r3
 800609e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060a8:	801a      	strh	r2, [r3, #0]
 80060aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060c0:	801a      	strh	r2, [r3, #0]
 80060c2:	e05f      	b.n	8006184 <USB_EPStartXfer+0x144c>
 80060c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060c8:	2b3e      	cmp	r3, #62	; 0x3e
 80060ca:	d818      	bhi.n	80060fe <USB_EPStartXfer+0x13c6>
 80060cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060d0:	085b      	lsrs	r3, r3, #1
 80060d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80060d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d004      	beq.n	80060ec <USB_EPStartXfer+0x13b4>
 80060e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060e6:	3301      	adds	r3, #1
 80060e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80060ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	029b      	lsls	r3, r3, #10
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060fa:	801a      	strh	r2, [r3, #0]
 80060fc:	e042      	b.n	8006184 <USB_EPStartXfer+0x144c>
 80060fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006102:	095b      	lsrs	r3, r3, #5
 8006104:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800610c:	f003 031f 	and.w	r3, r3, #31
 8006110:	2b00      	cmp	r3, #0
 8006112:	d104      	bne.n	800611e <USB_EPStartXfer+0x13e6>
 8006114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006118:	3b01      	subs	r3, #1
 800611a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800611e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006122:	b29b      	uxth	r3, r3
 8006124:	029b      	lsls	r3, r3, #10
 8006126:	b29b      	uxth	r3, r3
 8006128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800612c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006130:	b29a      	uxth	r2, r3
 8006132:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006136:	801a      	strh	r2, [r3, #0]
 8006138:	e024      	b.n	8006184 <USB_EPStartXfer+0x144c>
 800613a:	463b      	mov	r3, r7
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	785b      	ldrb	r3, [r3, #1]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d11f      	bne.n	8006184 <USB_EPStartXfer+0x144c>
 8006144:	1d3b      	adds	r3, r7, #4
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800614c:	1d3b      	adds	r3, r7, #4
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006154:	b29b      	uxth	r3, r3
 8006156:	461a      	mov	r2, r3
 8006158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800615c:	4413      	add	r3, r2
 800615e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006162:	463b      	mov	r3, r7
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	011a      	lsls	r2, r3, #4
 800616a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800616e:	4413      	add	r3, r2
 8006170:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006174:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800617c:	b29a      	uxth	r2, r3
 800617e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006182:	801a      	strh	r2, [r3, #0]
 8006184:	1d3b      	adds	r3, r7, #4
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800618c:	463b      	mov	r3, r7
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	785b      	ldrb	r3, [r3, #1]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d16f      	bne.n	8006276 <USB_EPStartXfer+0x153e>
 8006196:	1d3b      	adds	r3, r7, #4
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800619e:	1d3b      	adds	r3, r7, #4
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	461a      	mov	r2, r3
 80061aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061ae:	4413      	add	r3, r2
 80061b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80061b4:	463b      	mov	r3, r7
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	011a      	lsls	r2, r3, #4
 80061bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061c0:	4413      	add	r3, r2
 80061c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d116      	bne.n	8006200 <USB_EPStartXfer+0x14c8>
 80061d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	b29b      	uxth	r3, r3
 80061da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061de:	b29a      	uxth	r2, r3
 80061e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061e4:	801a      	strh	r2, [r3, #0]
 80061e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061fc:	801a      	strh	r2, [r3, #0]
 80061fe:	e05e      	b.n	80062be <USB_EPStartXfer+0x1586>
 8006200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006204:	2b3e      	cmp	r3, #62	; 0x3e
 8006206:	d818      	bhi.n	800623a <USB_EPStartXfer+0x1502>
 8006208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800620c:	085b      	lsrs	r3, r3, #1
 800620e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d004      	beq.n	8006228 <USB_EPStartXfer+0x14f0>
 800621e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006222:	3301      	adds	r3, #1
 8006224:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006228:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800622c:	b29b      	uxth	r3, r3
 800622e:	029b      	lsls	r3, r3, #10
 8006230:	b29a      	uxth	r2, r3
 8006232:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006236:	801a      	strh	r2, [r3, #0]
 8006238:	e041      	b.n	80062be <USB_EPStartXfer+0x1586>
 800623a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800623e:	095b      	lsrs	r3, r3, #5
 8006240:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006248:	f003 031f 	and.w	r3, r3, #31
 800624c:	2b00      	cmp	r3, #0
 800624e:	d104      	bne.n	800625a <USB_EPStartXfer+0x1522>
 8006250:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006254:	3b01      	subs	r3, #1
 8006256:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800625a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800625e:	b29b      	uxth	r3, r3
 8006260:	029b      	lsls	r3, r3, #10
 8006262:	b29b      	uxth	r3, r3
 8006264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800626c:	b29a      	uxth	r2, r3
 800626e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006272:	801a      	strh	r2, [r3, #0]
 8006274:	e023      	b.n	80062be <USB_EPStartXfer+0x1586>
 8006276:	463b      	mov	r3, r7
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	785b      	ldrb	r3, [r3, #1]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d11e      	bne.n	80062be <USB_EPStartXfer+0x1586>
 8006280:	1d3b      	adds	r3, r7, #4
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006288:	b29b      	uxth	r3, r3
 800628a:	461a      	mov	r2, r3
 800628c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006290:	4413      	add	r3, r2
 8006292:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006296:	463b      	mov	r3, r7
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	011a      	lsls	r2, r3, #4
 800629e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a2:	4413      	add	r3, r2
 80062a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b6:	801a      	strh	r2, [r3, #0]
 80062b8:	e001      	b.n	80062be <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e02e      	b.n	800631c <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062be:	1d3b      	adds	r3, r7, #4
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	463b      	mov	r3, r7
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	881b      	ldrh	r3, [r3, #0]
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80062dc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80062e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80062e4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80062e8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80062ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062f0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80062f4:	1d3b      	adds	r3, r7, #4
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	463b      	mov	r3, r7
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	441a      	add	r2, r3
 8006302:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800630a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800630e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006316:	b29b      	uxth	r3, r3
 8006318:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006326:	b480      	push	{r7}
 8006328:	b085      	sub	sp, #20
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	785b      	ldrb	r3, [r3, #1]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d020      	beq.n	800637a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	881b      	ldrh	r3, [r3, #0]
 8006344:	b29b      	uxth	r3, r3
 8006346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800634a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800634e:	81bb      	strh	r3, [r7, #12]
 8006350:	89bb      	ldrh	r3, [r7, #12]
 8006352:	f083 0310 	eor.w	r3, r3, #16
 8006356:	81bb      	strh	r3, [r7, #12]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	441a      	add	r2, r3
 8006362:	89bb      	ldrh	r3, [r7, #12]
 8006364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800636c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006374:	b29b      	uxth	r3, r3
 8006376:	8013      	strh	r3, [r2, #0]
 8006378:	e01f      	b.n	80063ba <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	881b      	ldrh	r3, [r3, #0]
 8006386:	b29b      	uxth	r3, r3
 8006388:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800638c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006390:	81fb      	strh	r3, [r7, #14]
 8006392:	89fb      	ldrh	r3, [r7, #14]
 8006394:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006398:	81fb      	strh	r3, [r7, #14]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	441a      	add	r2, r3
 80063a4:	89fb      	ldrh	r3, [r7, #14]
 80063a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bc80      	pop	{r7}
 80063c4:	4770      	bx	lr

080063c6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b087      	sub	sp, #28
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	7b1b      	ldrb	r3, [r3, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f040 809d 	bne.w	8006514 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	785b      	ldrb	r3, [r3, #1]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d04c      	beq.n	800647c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	823b      	strh	r3, [r7, #16]
 80063f0:	8a3b      	ldrh	r3, [r7, #16]
 80063f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d01b      	beq.n	8006432 <USB_EPClearStall+0x6c>
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	b29b      	uxth	r3, r3
 8006408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800640c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006410:	81fb      	strh	r3, [r7, #14]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	441a      	add	r2, r3
 800641c:	89fb      	ldrh	r3, [r7, #14]
 800641e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800642a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800642e:	b29b      	uxth	r3, r3
 8006430:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	78db      	ldrb	r3, [r3, #3]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d06c      	beq.n	8006514 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	b29b      	uxth	r3, r3
 8006448:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800644c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006450:	81bb      	strh	r3, [r7, #12]
 8006452:	89bb      	ldrh	r3, [r7, #12]
 8006454:	f083 0320 	eor.w	r3, r3, #32
 8006458:	81bb      	strh	r3, [r7, #12]
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	441a      	add	r2, r3
 8006464:	89bb      	ldrh	r3, [r7, #12]
 8006466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800646a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800646e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006476:	b29b      	uxth	r3, r3
 8006478:	8013      	strh	r3, [r2, #0]
 800647a:	e04b      	b.n	8006514 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	82fb      	strh	r3, [r7, #22]
 800648a:	8afb      	ldrh	r3, [r7, #22]
 800648c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d01b      	beq.n	80064cc <USB_EPClearStall+0x106>
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064aa:	82bb      	strh	r3, [r7, #20]
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	441a      	add	r2, r3
 80064b6:	8abb      	ldrh	r3, [r7, #20]
 80064b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	b29b      	uxth	r3, r3
 80064da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e2:	827b      	strh	r3, [r7, #18]
 80064e4:	8a7b      	ldrh	r3, [r7, #18]
 80064e6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80064ea:	827b      	strh	r3, [r7, #18]
 80064ec:	8a7b      	ldrh	r3, [r7, #18]
 80064ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80064f2:	827b      	strh	r3, [r7, #18]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	441a      	add	r2, r3
 80064fe:	8a7b      	ldrh	r3, [r7, #18]
 8006500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800650c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006510:	b29b      	uxth	r3, r3
 8006512:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	371c      	adds	r7, #28
 800651a:	46bd      	mov	sp, r7
 800651c:	bc80      	pop	{r7}
 800651e:	4770      	bx	lr

08006520 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	460b      	mov	r3, r1
 800652a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800652c:	78fb      	ldrb	r3, [r7, #3]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d103      	bne.n	800653a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2280      	movs	r2, #128	; 0x80
 8006536:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	bc80      	pop	{r7}
 8006544:	4770      	bx	lr

08006546 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006546:	b480      	push	{r7}
 8006548:	b083      	sub	sp, #12
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	bc80      	pop	{r7}
 8006558:	4770      	bx	lr

0800655a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	bc80      	pop	{r7}
 800656c:	4770      	bx	lr

0800656e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800656e:	b480      	push	{r7}
 8006570:	b085      	sub	sp, #20
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800657c:	b29b      	uxth	r3, r3
 800657e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006580:	68fb      	ldr	r3, [r7, #12]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	bc80      	pop	{r7}
 800658a:	4770      	bx	lr

0800658c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	bc80      	pop	{r7}
 80065a0:	4770      	bx	lr

080065a2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b08d      	sub	sp, #52	; 0x34
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	60f8      	str	r0, [r7, #12]
 80065aa:	60b9      	str	r1, [r7, #8]
 80065ac:	4611      	mov	r1, r2
 80065ae:	461a      	mov	r2, r3
 80065b0:	460b      	mov	r3, r1
 80065b2:	80fb      	strh	r3, [r7, #6]
 80065b4:	4613      	mov	r3, r2
 80065b6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80065b8:	88bb      	ldrh	r3, [r7, #4]
 80065ba:	3301      	adds	r3, #1
 80065bc:	085b      	lsrs	r3, r3, #1
 80065be:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80065c8:	88fb      	ldrh	r3, [r7, #6]
 80065ca:	005a      	lsls	r2, r3, #1
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065d4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80065d6:	6a3b      	ldr	r3, [r7, #32]
 80065d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065da:	e01e      	b.n	800661a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	3301      	adds	r3, #1
 80065e6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	021b      	lsls	r3, r3, #8
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	461a      	mov	r2, r3
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006600:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006604:	3302      	adds	r3, #2
 8006606:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660a:	3302      	adds	r3, #2
 800660c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006610:	3301      	adds	r3, #1
 8006612:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006616:	3b01      	subs	r3, #1
 8006618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800661a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1dd      	bne.n	80065dc <USB_WritePMA+0x3a>
  }
}
 8006620:	bf00      	nop
 8006622:	bf00      	nop
 8006624:	3734      	adds	r7, #52	; 0x34
 8006626:	46bd      	mov	sp, r7
 8006628:	bc80      	pop	{r7}
 800662a:	4770      	bx	lr

0800662c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800662c:	b480      	push	{r7}
 800662e:	b08b      	sub	sp, #44	; 0x2c
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	4611      	mov	r1, r2
 8006638:	461a      	mov	r2, r3
 800663a:	460b      	mov	r3, r1
 800663c:	80fb      	strh	r3, [r7, #6]
 800663e:	4613      	mov	r3, r2
 8006640:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006642:	88bb      	ldrh	r3, [r7, #4]
 8006644:	085b      	lsrs	r3, r3, #1
 8006646:	b29b      	uxth	r3, r3
 8006648:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006652:	88fb      	ldrh	r3, [r7, #6]
 8006654:	005a      	lsls	r2, r3, #1
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	4413      	add	r3, r2
 800665a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800665e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
 8006664:	e01b      	b.n	800669e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	b29b      	uxth	r3, r3
 800666c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	3302      	adds	r3, #2
 8006672:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	b2da      	uxtb	r2, r3
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	3301      	adds	r3, #1
 8006680:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	0a1b      	lsrs	r3, r3, #8
 8006686:	b2da      	uxtb	r2, r3
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	3301      	adds	r3, #1
 8006690:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	3302      	adds	r3, #2
 8006696:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	3b01      	subs	r3, #1
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e0      	bne.n	8006666 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80066a4:	88bb      	ldrh	r3, [r7, #4]
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d007      	beq.n	80066c0 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80066b0:	6a3b      	ldr	r3, [r7, #32]
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	701a      	strb	r2, [r3, #0]
  }
}
 80066c0:	bf00      	nop
 80066c2:	372c      	adds	r7, #44	; 0x2c
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bc80      	pop	{r7}
 80066c8:	4770      	bx	lr
	...

080066cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80066d0:	4904      	ldr	r1, [pc, #16]	; (80066e4 <MX_FATFS_Init+0x18>)
 80066d2:	4805      	ldr	r0, [pc, #20]	; (80066e8 <MX_FATFS_Init+0x1c>)
 80066d4:	f002 fb4e 	bl	8008d74 <FATFS_LinkDriver>
 80066d8:	4603      	mov	r3, r0
 80066da:	461a      	mov	r2, r3
 80066dc:	4b03      	ldr	r3, [pc, #12]	; (80066ec <MX_FATFS_Init+0x20>)
 80066de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80066e0:	bf00      	nop
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	200004b4 	.word	0x200004b4
 80066e8:	2000000c 	.word	0x2000000c
 80066ec:	200004b8 	.word	0x200004b8

080066f0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	4603      	mov	r3, r0
 80066f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80066fa:	4b05      	ldr	r3, [pc, #20]	; (8006710 <USER_initialize+0x20>)
 80066fc:	2201      	movs	r2, #1
 80066fe:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006700:	4b03      	ldr	r3, [pc, #12]	; (8006710 <USER_initialize+0x20>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006706:	4618      	mov	r0, r3
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	bc80      	pop	{r7}
 800670e:	4770      	bx	lr
 8006710:	20000009 	.word	0x20000009

08006714 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	4603      	mov	r3, r0
 800671c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800671e:	4b05      	ldr	r3, [pc, #20]	; (8006734 <USER_status+0x20>)
 8006720:	2201      	movs	r2, #1
 8006722:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006724:	4b03      	ldr	r3, [pc, #12]	; (8006734 <USER_status+0x20>)
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800672a:	4618      	mov	r0, r3
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	bc80      	pop	{r7}
 8006732:	4770      	bx	lr
 8006734:	20000009 	.word	0x20000009

08006738 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	60b9      	str	r1, [r7, #8]
 8006740:	607a      	str	r2, [r7, #4]
 8006742:	603b      	str	r3, [r7, #0]
 8006744:	4603      	mov	r3, r0
 8006746:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8006748:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800674a:	4618      	mov	r0, r3
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	bc80      	pop	{r7}
 8006752:	4770      	bx	lr

08006754 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	607a      	str	r2, [r7, #4]
 800675e:	603b      	str	r3, [r7, #0]
 8006760:	4603      	mov	r3, r0
 8006762:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8006764:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8006766:	4618      	mov	r0, r3
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	bc80      	pop	{r7}
 800676e:	4770      	bx	lr

08006770 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	4603      	mov	r3, r0
 8006778:	603a      	str	r2, [r7, #0]
 800677a:	71fb      	strb	r3, [r7, #7]
 800677c:	460b      	mov	r3, r1
 800677e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	73fb      	strb	r3, [r7, #15]
    return res;
 8006784:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8006786:	4618      	mov	r0, r3
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	bc80      	pop	{r7}
 800678e:	4770      	bx	lr

08006790 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	7c1b      	ldrb	r3, [r3, #16]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d115      	bne.n	80067d0 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80067a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067a8:	2202      	movs	r2, #2
 80067aa:	2101      	movs	r1, #1
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f002 fdba 	bl	8009326 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80067ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067be:	2202      	movs	r2, #2
 80067c0:	2181      	movs	r1, #129	; 0x81
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f002 fdaf 	bl	8009326 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80067ce:	e012      	b.n	80067f6 <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80067d0:	2340      	movs	r3, #64	; 0x40
 80067d2:	2202      	movs	r2, #2
 80067d4:	2101      	movs	r1, #1
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f002 fda5 	bl	8009326 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80067e4:	2340      	movs	r3, #64	; 0x40
 80067e6:	2202      	movs	r2, #2
 80067e8:	2181      	movs	r1, #129	; 0x81
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f002 fd9b 	bl	8009326 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80067f6:	f44f 701b 	mov.w	r0, #620	; 0x26c
 80067fa:	f002 fedb 	bl	80095b4 <USBD_static_malloc>
 80067fe:	4602      	mov	r2, r0
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 8006810:	2302      	movs	r3, #2
 8006812:	e003      	b.n	800681c <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f9d9 	bl	8006bcc <MSC_BOT_Init>

  return USBD_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	460b      	mov	r3, r1
 800682e:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8006830:	2101      	movs	r1, #1
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f002 fd9d 	bl	8009372 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8006840:	2181      	movs	r1, #129	; 0x81
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f002 fd95 	bl	8009372 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fa06 	bl	8006c60 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800685a:	2b00      	cmp	r3, #0
 800685c:	d009      	beq.n	8006872 <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006864:	4618      	mov	r0, r3
 8006866:	f002 feb1 	bl	80095cc <USBD_static_free>
    pdev->pClassData  = NULL;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800688c:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d04d      	beq.n	800693e <USBD_MSC_Setup+0xc2>
 80068a2:	2b20      	cmp	r3, #32
 80068a4:	f040 8113 	bne.w	8006ace <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	785b      	ldrb	r3, [r3, #1]
 80068ac:	2bfe      	cmp	r3, #254	; 0xfe
 80068ae:	d002      	beq.n	80068b6 <USBD_MSC_Setup+0x3a>
 80068b0:	2bff      	cmp	r3, #255	; 0xff
 80068b2:	d024      	beq.n	80068fe <USBD_MSC_Setup+0x82>
 80068b4:	e03b      	b.n	800692e <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	885b      	ldrh	r3, [r3, #2]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d118      	bne.n	80068f0 <USBD_MSC_Setup+0x74>
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	88db      	ldrh	r3, [r3, #6]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d114      	bne.n	80068f0 <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	da0f      	bge.n	80068f0 <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	4798      	blx	r3
 80068da:	4603      	mov	r3, r0
 80068dc:	461a      	mov	r2, r3
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	2201      	movs	r2, #1
 80068e6:	4619      	mov	r1, r3
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f002 f992 	bl	8008c12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068ee:	e025      	b.n	800693c <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 80068f0:	6839      	ldr	r1, [r7, #0]
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f002 f923 	bl	8008b3e <USBD_CtlError>
            ret = USBD_FAIL;
 80068f8:	2302      	movs	r3, #2
 80068fa:	75fb      	strb	r3, [r7, #23]
          break;
 80068fc:	e01e      	b.n	800693c <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	885b      	ldrh	r3, [r3, #2]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10c      	bne.n	8006920 <USBD_MSC_Setup+0xa4>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	88db      	ldrh	r3, [r3, #6]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d108      	bne.n	8006920 <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006914:	2b00      	cmp	r3, #0
 8006916:	db03      	blt.n	8006920 <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f987 	bl	8006c2c <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800691e:	e00d      	b.n	800693c <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8006920:	6839      	ldr	r1, [r7, #0]
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f002 f90b 	bl	8008b3e <USBD_CtlError>
            ret = USBD_FAIL;
 8006928:	2302      	movs	r3, #2
 800692a:	75fb      	strb	r3, [r7, #23]
          break;
 800692c:	e006      	b.n	800693c <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800692e:	6839      	ldr	r1, [r7, #0]
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f002 f904 	bl	8008b3e <USBD_CtlError>
          ret = USBD_FAIL;
 8006936:	2302      	movs	r3, #2
 8006938:	75fb      	strb	r3, [r7, #23]
          break;
 800693a:	bf00      	nop
      }
      break;
 800693c:	e0ce      	b.n	8006adc <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	785b      	ldrb	r3, [r3, #1]
 8006942:	2b0b      	cmp	r3, #11
 8006944:	f200 80bb 	bhi.w	8006abe <USBD_MSC_Setup+0x242>
 8006948:	a201      	add	r2, pc, #4	; (adr r2, 8006950 <USBD_MSC_Setup+0xd4>)
 800694a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694e:	bf00      	nop
 8006950:	08006981 	.word	0x08006981
 8006954:	080069f7 	.word	0x080069f7
 8006958:	08006abf 	.word	0x08006abf
 800695c:	08006abf 	.word	0x08006abf
 8006960:	08006abf 	.word	0x08006abf
 8006964:	08006abf 	.word	0x08006abf
 8006968:	08006abf 	.word	0x08006abf
 800696c:	08006abf 	.word	0x08006abf
 8006970:	08006abf 	.word	0x08006abf
 8006974:	08006abf 	.word	0x08006abf
 8006978:	080069a9 	.word	0x080069a9
 800697c:	080069d1 	.word	0x080069d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006986:	2b03      	cmp	r3, #3
 8006988:	d107      	bne.n	800699a <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800698a:	f107 030e 	add.w	r3, r7, #14
 800698e:	2202      	movs	r2, #2
 8006990:	4619      	mov	r1, r3
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f002 f93d 	bl	8008c12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006998:	e098      	b.n	8006acc <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 800699a:	6839      	ldr	r1, [r7, #0]
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f002 f8ce 	bl	8008b3e <USBD_CtlError>
            ret = USBD_FAIL;
 80069a2:	2302      	movs	r3, #2
 80069a4:	75fb      	strb	r3, [r7, #23]
          break;
 80069a6:	e091      	b.n	8006acc <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ae:	2b03      	cmp	r3, #3
 80069b0:	d107      	bne.n	80069c2 <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	3304      	adds	r3, #4
 80069b6:	2201      	movs	r2, #1
 80069b8:	4619      	mov	r1, r3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f002 f929 	bl	8008c12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069c0:	e084      	b.n	8006acc <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 80069c2:	6839      	ldr	r1, [r7, #0]
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f002 f8ba 	bl	8008b3e <USBD_CtlError>
            ret = USBD_FAIL;
 80069ca:	2302      	movs	r3, #2
 80069cc:	75fb      	strb	r3, [r7, #23]
          break;
 80069ce:	e07d      	b.n	8006acc <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d6:	2b03      	cmp	r3, #3
 80069d8:	d106      	bne.n	80069e8 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	885b      	ldrh	r3, [r3, #2]
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	461a      	mov	r2, r3
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069e6:	e071      	b.n	8006acc <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 80069e8:	6839      	ldr	r1, [r7, #0]
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f002 f8a7 	bl	8008b3e <USBD_CtlError>
            ret = USBD_FAIL;
 80069f0:	2302      	movs	r3, #2
 80069f2:	75fb      	strb	r3, [r7, #23]
          break;
 80069f4:	e06a      	b.n	8006acc <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	889b      	ldrh	r3, [r3, #4]
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	4619      	mov	r1, r3
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f002 fcd6 	bl	80093b0 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	889b      	ldrh	r3, [r3, #4]
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f002 fcb0 	bl	8009372 <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	889b      	ldrh	r3, [r3, #4]
 8006a16:	b25b      	sxtb	r3, r3
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	da23      	bge.n	8006a64 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	889b      	ldrh	r3, [r3, #4]
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	f003 020f 	and.w	r2, r3, #15
 8006a26:	6879      	ldr	r1, [r7, #4]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	440b      	add	r3, r1
 8006a32:	3318      	adds	r3, #24
 8006a34:	2200      	movs	r2, #0
 8006a36:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	7c1b      	ldrb	r3, [r3, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d107      	bne.n	8006a50 <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006a40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a44:	2202      	movs	r2, #2
 8006a46:	2181      	movs	r1, #129	; 0x81
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f002 fc6c 	bl	8009326 <USBD_LL_OpenEP>
 8006a4e:	e005      	b.n	8006a5c <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006a50:	2340      	movs	r3, #64	; 0x40
 8006a52:	2202      	movs	r2, #2
 8006a54:	2181      	movs	r1, #129	; 0x81
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f002 fc65 	bl	8009326 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	62da      	str	r2, [r3, #44]	; 0x2c
 8006a62:	e024      	b.n	8006aae <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	889b      	ldrh	r3, [r3, #4]
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	f003 020f 	and.w	r2, r3, #15
 8006a6e:	6879      	ldr	r1, [r7, #4]
 8006a70:	4613      	mov	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	440b      	add	r3, r1
 8006a7a:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006a7e:	2200      	movs	r2, #0
 8006a80:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	7c1b      	ldrb	r3, [r3, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d107      	bne.n	8006a9a <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006a8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a8e:	2202      	movs	r2, #2
 8006a90:	2101      	movs	r1, #1
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f002 fc47 	bl	8009326 <USBD_LL_OpenEP>
 8006a98:	e005      	b.n	8006aa6 <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006a9a:	2340      	movs	r3, #64	; 0x40
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f002 fc40 	bl	8009326 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	889b      	ldrh	r3, [r3, #4]
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 fa52 	bl	8006f60 <MSC_BOT_CplClrFeature>
          break;
 8006abc:	e006      	b.n	8006acc <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f002 f83c 	bl	8008b3e <USBD_CtlError>
          ret = USBD_FAIL;
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	75fb      	strb	r3, [r7, #23]
          break;
 8006aca:	bf00      	nop
      }
      break;
 8006acc:	e006      	b.n	8006adc <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 8006ace:	6839      	ldr	r1, [r7, #0]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f002 f834 	bl	8008b3e <USBD_CtlError>
      ret = USBD_FAIL;
 8006ad6:	2302      	movs	r3, #2
 8006ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8006ada:	bf00      	nop
  }

  return ret;
 8006adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3718      	adds	r7, #24
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop

08006ae8 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	460b      	mov	r3, r1
 8006af2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8006af4:	78fb      	ldrb	r3, [r7, #3]
 8006af6:	4619      	mov	r1, r3
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f8c1 	bl	8006c80 <MSC_BOT_DataIn>

  return USBD_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3708      	adds	r7, #8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	460b      	mov	r3, r1
 8006b12:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8006b14:	78fb      	ldrb	r3, [r7, #3]
 8006b16:	4619      	mov	r1, r3
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f8e3 	bl	8006ce4 <MSC_BOT_DataOut>

  return USBD_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2220      	movs	r2, #32
 8006b34:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8006b36:	4b03      	ldr	r3, [pc, #12]	; (8006b44 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bc80      	pop	{r7}
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	20000058 	.word	0x20000058

08006b48 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2220      	movs	r2, #32
 8006b54:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8006b56:	4b03      	ldr	r3, [pc, #12]	; (8006b64 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bc80      	pop	{r7}
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	20000078 	.word	0x20000078

08006b68 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2220      	movs	r2, #32
 8006b74:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8006b76:	4b03      	ldr	r3, [pc, #12]	; (8006b84 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bc80      	pop	{r7}
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	20000098 	.word	0x20000098

08006b88 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	220a      	movs	r2, #10
 8006b94:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8006b96:	4b03      	ldr	r3, [pc, #12]	; (8006ba4 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bc80      	pop	{r7}
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	200000b8 	.word	0x200000b8

08006ba8 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bc80      	pop	{r7}
 8006bca:	4770      	bx	lr

08006bcc <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bda:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2000      	movs	r0, #0
 8006c02:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8006c04:	2101      	movs	r1, #1
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f002 fbd2 	bl	80093b0 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8006c0c:	2181      	movs	r1, #129	; 0x81
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f002 fbce 	bl	80093b0 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006c1a:	231f      	movs	r3, #31
 8006c1c:	2101      	movs	r1, #1
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f002 fc91 	bl	8009546 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006c24:	bf00      	nop
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c3a:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2201      	movs	r2, #1
 8006c46:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006c4e:	231f      	movs	r3, #31
 8006c50:	2101      	movs	r1, #1
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f002 fc77 	bl	8009546 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006c58:	bf00      	nop
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c6e:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	721a      	strb	r2, [r3, #8]
}
 8006c76:	bf00      	nop
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bc80      	pop	{r7}
 8006c7e:	4770      	bx	lr

08006c80 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c92:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	7a1b      	ldrb	r3, [r3, #8]
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d005      	beq.n	8006ca8 <MSC_BOT_DataIn+0x28>
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	db1a      	blt.n	8006cd6 <MSC_BOT_DataIn+0x56>
 8006ca0:	3b03      	subs	r3, #3
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d817      	bhi.n	8006cd6 <MSC_BOT_DataIn+0x56>
 8006ca6:	e011      	b.n	8006ccc <MSC_BOT_DataIn+0x4c>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f97a 	bl	8006fb0 <SCSI_ProcessCmd>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	da0b      	bge.n	8006cda <MSC_BOT_DataIn+0x5a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006cc2:	2101      	movs	r1, #1
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f8f1 	bl	8006eac <MSC_BOT_SendCSW>
      }
      break;
 8006cca:	e006      	b.n	8006cda <MSC_BOT_DataIn+0x5a>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006ccc:	2100      	movs	r1, #0
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f8ec 	bl	8006eac <MSC_BOT_SendCSW>
      break;
 8006cd4:	e002      	b.n	8006cdc <MSC_BOT_DataIn+0x5c>

    default:
      break;
 8006cd6:	bf00      	nop
 8006cd8:	e000      	b.n	8006cdc <MSC_BOT_DataIn+0x5c>
      break;
 8006cda:	bf00      	nop
  }
}
 8006cdc:	bf00      	nop
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	460b      	mov	r3, r1
 8006cee:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf6:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	7a1b      	ldrb	r3, [r3, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d002      	beq.n	8006d06 <MSC_BOT_DataOut+0x22>
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d004      	beq.n	8006d0e <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8006d04:	e015      	b.n	8006d32 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f818 	bl	8006d3c <MSC_BOT_CBW_Decode>
      break;
 8006d0c:	e011      	b.n	8006d32 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f947 	bl	8006fb0 <SCSI_ProcessCmd>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	da03      	bge.n	8006d30 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006d28:	2101      	movs	r1, #1
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f8be 	bl	8006eac <MSC_BOT_SendCSW>
      break;
 8006d30:	bf00      	nop
  }
}
 8006d32:	bf00      	nop
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
	...

08006d3c <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d4a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006d64:	2101      	movs	r1, #1
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f002 fc10 	bl	800958c <USBD_LL_GetRxDataSize>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b1f      	cmp	r3, #31
 8006d70:	d114      	bne.n	8006d9c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006d78:	4a32      	ldr	r2, [pc, #200]	; (8006e44 <MSC_BOT_CBW_Decode+0x108>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d10e      	bne.n	8006d9c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d809      	bhi.n	8006d9c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d004      	beq.n	8006d9c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 8006d98:	2b10      	cmp	r3, #16
 8006d9a:	d90e      	bls.n	8006dba <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006da2:	2320      	movs	r3, #32
 8006da4:	2205      	movs	r2, #5
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fc48 	bl	800763c <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2202      	movs	r2, #2
 8006db0:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f8a6 	bl	8006f04 <MSC_BOT_Abort>
 8006db8:	e041      	b.n	8006e3e <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f8f1 	bl	8006fb0 <SCSI_ProcessCmd>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	da0c      	bge.n	8006dee <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	7a1b      	ldrb	r3, [r3, #8]
 8006dd8:	2b05      	cmp	r3, #5
 8006dda:	d104      	bne.n	8006de6 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006ddc:	2101      	movs	r1, #1
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f864 	bl	8006eac <MSC_BOT_SendCSW>
 8006de4:	e02b      	b.n	8006e3e <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f88c 	bl	8006f04 <MSC_BOT_Abort>
 8006dec:	e027      	b.n	8006e3e <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	7a1b      	ldrb	r3, [r3, #8]
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d022      	beq.n	8006e3c <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d01e      	beq.n	8006e3c <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006e02:	2b03      	cmp	r3, #3
 8006e04:	d01a      	beq.n	8006e3c <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	895b      	ldrh	r3, [r3, #10]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d009      	beq.n	8006e22 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f103 010c 	add.w	r1, r3, #12
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	895b      	ldrh	r3, [r3, #10]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f814 	bl	8006e48 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8006e20:	e00d      	b.n	8006e3e <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	895b      	ldrh	r3, [r3, #10]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d104      	bne.n	8006e34 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f83d 	bl	8006eac <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8006e32:	e004      	b.n	8006e3e <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f865 	bl	8006f04 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8006e3a:	e000      	b.n	8006e3e <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8006e3c:	bf00      	nop
    }
  }
}
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	43425355 	.word	0x43425355

08006e48 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	4613      	mov	r3, r2
 8006e54:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e5c:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006e64:	88fb      	ldrh	r3, [r7, #6]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d204      	bcs.n	8006e74 <MSC_BOT_SendData+0x2c>
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	e000      	b.n	8006e76 <MSC_BOT_SendData+0x2e>
 8006e74:	88fb      	ldrh	r3, [r7, #6]
 8006e76:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8006e7e:	88fb      	ldrh	r3, [r7, #6]
 8006e80:	1ad2      	subs	r2, r2, r3
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	2204      	movs	r2, #4
 8006e94:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8006e96:	8a7b      	ldrh	r3, [r7, #18]
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	2181      	movs	r1, #129	; 0x81
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f002 fb2f 	bl	8009500 <USBD_LL_Transmit>
}
 8006ea2:	bf00      	nop
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
	...

08006eac <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ebe:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4a0f      	ldr	r2, [pc, #60]	; (8006f00 <MSC_BOT_SendCSW+0x54>)
 8006ec4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	78fa      	ldrb	r2, [r7, #3]
 8006ecc:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 8006edc:	230d      	movs	r3, #13
 8006ede:	2181      	movs	r1, #129	; 0x81
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f002 fb0d 	bl	8009500 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006eec:	231f      	movs	r3, #31
 8006eee:	2101      	movs	r1, #1
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f002 fb28 	bl	8009546 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006ef6:	bf00      	nop
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	53425355 	.word	0x53425355

08006f04 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f12:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10c      	bne.n	8006f38 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d007      	beq.n	8006f38 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d103      	bne.n	8006f38 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8006f30:	2101      	movs	r1, #1
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f002 fa5b 	bl	80093ee <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006f38:	2181      	movs	r1, #129	; 0x81
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f002 fa57 	bl	80093ee <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	7a5b      	ldrb	r3, [r3, #9]
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d107      	bne.n	8006f58 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006f4e:	231f      	movs	r3, #31
 8006f50:	2101      	movs	r1, #1
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f002 faf7 	bl	8009546 <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8006f58:	bf00      	nop
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	460b      	mov	r3, r1
 8006f6a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f72:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	7a5b      	ldrb	r3, [r3, #9]
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d107      	bne.n	8006f8c <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006f7c:	2181      	movs	r1, #129	; 0x81
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f002 fa35 	bl	80093ee <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	725a      	strb	r2, [r3, #9]
 8006f8a:	e00d      	b.n	8006fa8 <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8006f8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	da08      	bge.n	8006fa6 <MSC_BOT_CplClrFeature+0x46>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	7a5b      	ldrb	r3, [r3, #9]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d004      	beq.n	8006fa6 <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7ff ff84 	bl	8006eac <MSC_BOT_SendCSW>
 8006fa4:	e000      	b.n	8006fa8 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 8006fa6:	bf00      	nop
  }
}
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
	...

08006fb0 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	607a      	str	r2, [r7, #4]
 8006fbc:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	2b5a      	cmp	r3, #90	; 0x5a
 8006fc4:	f200 810e 	bhi.w	80071e4 <SCSI_ProcessCmd+0x234>
 8006fc8:	a201      	add	r2, pc, #4	; (adr r2, 8006fd0 <SCSI_ProcessCmd+0x20>)
 8006fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fce:	bf00      	nop
 8006fd0:	0800713d 	.word	0x0800713d
 8006fd4:	080071e5 	.word	0x080071e5
 8006fd8:	080071e5 	.word	0x080071e5
 8006fdc:	0800714b 	.word	0x0800714b
 8006fe0:	080071e5 	.word	0x080071e5
 8006fe4:	080071e5 	.word	0x080071e5
 8006fe8:	080071e5 	.word	0x080071e5
 8006fec:	080071e5 	.word	0x080071e5
 8006ff0:	080071e5 	.word	0x080071e5
 8006ff4:	080071e5 	.word	0x080071e5
 8006ff8:	080071e5 	.word	0x080071e5
 8006ffc:	080071e5 	.word	0x080071e5
 8007000:	080071e5 	.word	0x080071e5
 8007004:	080071e5 	.word	0x080071e5
 8007008:	080071e5 	.word	0x080071e5
 800700c:	080071e5 	.word	0x080071e5
 8007010:	080071e5 	.word	0x080071e5
 8007014:	080071e5 	.word	0x080071e5
 8007018:	08007159 	.word	0x08007159
 800701c:	080071e5 	.word	0x080071e5
 8007020:	080071e5 	.word	0x080071e5
 8007024:	080071e5 	.word	0x080071e5
 8007028:	080071e5 	.word	0x080071e5
 800702c:	080071e5 	.word	0x080071e5
 8007030:	080071e5 	.word	0x080071e5
 8007034:	080071e5 	.word	0x080071e5
 8007038:	08007183 	.word	0x08007183
 800703c:	08007167 	.word	0x08007167
 8007040:	080071e5 	.word	0x080071e5
 8007044:	080071e5 	.word	0x080071e5
 8007048:	08007175 	.word	0x08007175
 800704c:	080071e5 	.word	0x080071e5
 8007050:	080071e5 	.word	0x080071e5
 8007054:	080071e5 	.word	0x080071e5
 8007058:	080071e5 	.word	0x080071e5
 800705c:	0800719f 	.word	0x0800719f
 8007060:	080071e5 	.word	0x080071e5
 8007064:	080071ad 	.word	0x080071ad
 8007068:	080071e5 	.word	0x080071e5
 800706c:	080071e5 	.word	0x080071e5
 8007070:	080071bb 	.word	0x080071bb
 8007074:	080071e5 	.word	0x080071e5
 8007078:	080071c9 	.word	0x080071c9
 800707c:	080071e5 	.word	0x080071e5
 8007080:	080071e5 	.word	0x080071e5
 8007084:	080071e5 	.word	0x080071e5
 8007088:	080071e5 	.word	0x080071e5
 800708c:	080071d7 	.word	0x080071d7
 8007090:	080071e5 	.word	0x080071e5
 8007094:	080071e5 	.word	0x080071e5
 8007098:	080071e5 	.word	0x080071e5
 800709c:	080071e5 	.word	0x080071e5
 80070a0:	080071e5 	.word	0x080071e5
 80070a4:	080071e5 	.word	0x080071e5
 80070a8:	080071e5 	.word	0x080071e5
 80070ac:	080071e5 	.word	0x080071e5
 80070b0:	080071e5 	.word	0x080071e5
 80070b4:	080071e5 	.word	0x080071e5
 80070b8:	080071e5 	.word	0x080071e5
 80070bc:	080071e5 	.word	0x080071e5
 80070c0:	080071e5 	.word	0x080071e5
 80070c4:	080071e5 	.word	0x080071e5
 80070c8:	080071e5 	.word	0x080071e5
 80070cc:	080071e5 	.word	0x080071e5
 80070d0:	080071e5 	.word	0x080071e5
 80070d4:	080071e5 	.word	0x080071e5
 80070d8:	080071e5 	.word	0x080071e5
 80070dc:	080071e5 	.word	0x080071e5
 80070e0:	080071e5 	.word	0x080071e5
 80070e4:	080071e5 	.word	0x080071e5
 80070e8:	080071e5 	.word	0x080071e5
 80070ec:	080071e5 	.word	0x080071e5
 80070f0:	080071e5 	.word	0x080071e5
 80070f4:	080071e5 	.word	0x080071e5
 80070f8:	080071e5 	.word	0x080071e5
 80070fc:	080071e5 	.word	0x080071e5
 8007100:	080071e5 	.word	0x080071e5
 8007104:	080071e5 	.word	0x080071e5
 8007108:	080071e5 	.word	0x080071e5
 800710c:	080071e5 	.word	0x080071e5
 8007110:	080071e5 	.word	0x080071e5
 8007114:	080071e5 	.word	0x080071e5
 8007118:	080071e5 	.word	0x080071e5
 800711c:	080071e5 	.word	0x080071e5
 8007120:	080071e5 	.word	0x080071e5
 8007124:	080071e5 	.word	0x080071e5
 8007128:	080071e5 	.word	0x080071e5
 800712c:	080071e5 	.word	0x080071e5
 8007130:	080071e5 	.word	0x080071e5
 8007134:	080071e5 	.word	0x080071e5
 8007138:	08007191 	.word	0x08007191
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 800713c:	7afb      	ldrb	r3, [r7, #11]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	4619      	mov	r1, r3
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f000 f85c 	bl	8007200 <SCSI_TestUnitReady>
      break;
 8007148:	e055      	b.n	80071f6 <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 800714a:	7afb      	ldrb	r3, [r7, #11]
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	4619      	mov	r1, r3
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 fa09 	bl	8007568 <SCSI_RequestSense>
      break;
 8007156:	e04e      	b.n	80071f6 <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8007158:	7afb      	ldrb	r3, [r7, #11]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	4619      	mov	r1, r3
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f000 f888 	bl	8007274 <SCSI_Inquiry>
      break;
 8007164:	e047      	b.n	80071f6 <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8007166:	7afb      	ldrb	r3, [r7, #11]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	4619      	mov	r1, r3
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 fa9e 	bl	80076ae <SCSI_StartStopUnit>
      break;
 8007172:	e040      	b.n	80071f6 <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8007174:	7afb      	ldrb	r3, [r7, #11]
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	4619      	mov	r1, r3
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 fa97 	bl	80076ae <SCSI_StartStopUnit>
      break;
 8007180:	e039      	b.n	80071f6 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 8007182:	7afb      	ldrb	r3, [r7, #11]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	4619      	mov	r1, r3
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f000 f99d 	bl	80074c8 <SCSI_ModeSense6>
      break;
 800718e:	e032      	b.n	80071f6 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 8007190:	7afb      	ldrb	r3, [r7, #11]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	4619      	mov	r1, r3
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 f9be 	bl	8007518 <SCSI_ModeSense10>
      break;
 800719c:	e02b      	b.n	80071f6 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800719e:	7afb      	ldrb	r3, [r7, #11]
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	4619      	mov	r1, r3
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f000 f92a 	bl	80073fe <SCSI_ReadFormatCapacity>
      break;
 80071aa:	e024      	b.n	80071f6 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 80071ac:	7afb      	ldrb	r3, [r7, #11]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	4619      	mov	r1, r3
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f000 f8bc 	bl	8007330 <SCSI_ReadCapacity10>
      break;
 80071b8:	e01d      	b.n	80071f6 <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 80071ba:	7afb      	ldrb	r3, [r7, #11]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	4619      	mov	r1, r3
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 fa88 	bl	80076d6 <SCSI_Read10>
      break;
 80071c6:	e016      	b.n	80071f6 <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 80071c8:	7afb      	ldrb	r3, [r7, #11]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	4619      	mov	r1, r3
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 fb0d 	bl	80077ee <SCSI_Write10>
      break;
 80071d4:	e00f      	b.n	80071f6 <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 80071d6:	7afb      	ldrb	r3, [r7, #11]
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	4619      	mov	r1, r3
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f000 fbb6 	bl	800794e <SCSI_Verify10>
      break;
 80071e2:	e008      	b.n	80071f6 <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80071e4:	7af9      	ldrb	r1, [r7, #11]
 80071e6:	2320      	movs	r3, #32
 80071e8:	2205      	movs	r2, #5
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f000 fa26 	bl	800763c <SCSI_SenseCode>
      return -1;
 80071f0:	f04f 33ff 	mov.w	r3, #4294967295
 80071f4:	e000      	b.n	80071f8 <SCSI_ProcessCmd+0x248>
  }

  return 0;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	460b      	mov	r3, r1
 800720a:	607a      	str	r2, [r7, #4]
 800720c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007214:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00a      	beq.n	8007236 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007226:	2320      	movs	r3, #32
 8007228:	2205      	movs	r2, #5
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f000 fa06 	bl	800763c <SCSI_SenseCode>

    return -1;
 8007230:	f04f 33ff 	mov.w	r3, #4294967295
 8007234:	e019      	b.n	800726a <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	7afa      	ldrb	r2, [r7, #11]
 8007240:	4610      	mov	r0, r2
 8007242:	4798      	blx	r3
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00b      	beq.n	8007262 <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800724a:	7af9      	ldrb	r1, [r7, #11]
 800724c:	233a      	movs	r3, #58	; 0x3a
 800724e:	2202      	movs	r2, #2
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 f9f3 	bl	800763c <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	2205      	movs	r2, #5
 800725a:	721a      	strb	r2, [r3, #8]

    return -1;
 800725c:	f04f 33ff 	mov.w	r3, #4294967295
 8007260:	e003      	b.n	800726a <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2200      	movs	r2, #0
 8007266:	815a      	strh	r2, [r3, #10]

  return 0;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3718      	adds	r7, #24
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
	...

08007274 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007274:	b480      	push	{r7}
 8007276:	b089      	sub	sp, #36	; 0x24
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	460b      	mov	r3, r1
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007288:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	3301      	adds	r3, #1
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	f003 0301 	and.w	r3, r3, #1
 8007294:	2b00      	cmp	r3, #0
 8007296:	d014      	beq.n	80072c2 <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 8007298:	2307      	movs	r3, #7
 800729a:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	8bfa      	ldrh	r2, [r7, #30]
 80072a0:	815a      	strh	r2, [r3, #10]

    while (len)
 80072a2:	e00a      	b.n	80072ba <SCSI_Inquiry+0x46>
    {
      len--;
 80072a4:	8bfb      	ldrh	r3, [r7, #30]
 80072a6:	3b01      	subs	r3, #1
 80072a8:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 80072aa:	8bfa      	ldrh	r2, [r7, #30]
 80072ac:	8bfb      	ldrh	r3, [r7, #30]
 80072ae:	491f      	ldr	r1, [pc, #124]	; (800732c <SCSI_Inquiry+0xb8>)
 80072b0:	5c89      	ldrb	r1, [r1, r2]
 80072b2:	69ba      	ldr	r2, [r7, #24]
 80072b4:	4413      	add	r3, r2
 80072b6:	460a      	mov	r2, r1
 80072b8:	731a      	strb	r2, [r3, #12]
    while (len)
 80072ba:	8bfb      	ldrh	r3, [r7, #30]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1f1      	bne.n	80072a4 <SCSI_Inquiry+0x30>
 80072c0:	e02e      	b.n	8007320 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072c8:	69d9      	ldr	r1, [r3, #28]
 80072ca:	7afa      	ldrb	r2, [r7, #11]
 80072cc:	4613      	mov	r3, r2
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	4413      	add	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	440b      	add	r3, r1
 80072d6:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	3304      	adds	r3, #4
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	b29b      	uxth	r3, r3
 80072e0:	3305      	adds	r3, #5
 80072e2:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	3304      	adds	r3, #4
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	8bfa      	ldrh	r2, [r7, #30]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d303      	bcc.n	80072fa <SCSI_Inquiry+0x86>
    {
      len = params[4];
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	3304      	adds	r3, #4
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	8bfa      	ldrh	r2, [r7, #30]
 80072fe:	815a      	strh	r2, [r3, #10]

    while (len)
 8007300:	e00b      	b.n	800731a <SCSI_Inquiry+0xa6>
    {
      len--;
 8007302:	8bfb      	ldrh	r3, [r7, #30]
 8007304:	3b01      	subs	r3, #1
 8007306:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 8007308:	8bfb      	ldrh	r3, [r7, #30]
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	441a      	add	r2, r3
 800730e:	8bfb      	ldrh	r3, [r7, #30]
 8007310:	7811      	ldrb	r1, [r2, #0]
 8007312:	69ba      	ldr	r2, [r7, #24]
 8007314:	4413      	add	r3, r2
 8007316:	460a      	mov	r2, r1
 8007318:	731a      	strb	r2, [r3, #12]
    while (len)
 800731a:	8bfb      	ldrh	r3, [r7, #30]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1f0      	bne.n	8007302 <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3724      	adds	r7, #36	; 0x24
 8007326:	46bd      	mov	sp, r7
 8007328:	bc80      	pop	{r7}
 800732a:	4770      	bx	lr
 800732c:	08009738 	.word	0x08009738

08007330 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	460b      	mov	r3, r1
 800733a:	607a      	str	r2, [r7, #4]
 800733c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007344:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	f502 7118 	add.w	r1, r2, #608	; 0x260
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	f202 225e 	addw	r2, r2, #606	; 0x25e
 800735a:	7af8      	ldrb	r0, [r7, #11]
 800735c:	4798      	blx	r3
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d008      	beq.n	8007376 <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007364:	7af9      	ldrb	r1, [r7, #11]
 8007366:	233a      	movs	r3, #58	; 0x3a
 8007368:	2202      	movs	r2, #2
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f000 f966 	bl	800763c <SCSI_SenseCode>
    return -1;
 8007370:	f04f 33ff 	mov.w	r3, #4294967295
 8007374:	e03f      	b.n	80073f6 <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800737c:	3b01      	subs	r3, #1
 800737e:	0e1b      	lsrs	r3, r3, #24
 8007380:	b2da      	uxtb	r2, r3
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800738c:	3b01      	subs	r3, #1
 800738e:	0c1b      	lsrs	r3, r3, #16
 8007390:	b2da      	uxtb	r2, r3
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800739c:	3b01      	subs	r3, #1
 800739e:	0a1b      	lsrs	r3, r3, #8
 80073a0:	b2da      	uxtb	r2, r3
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	3b01      	subs	r3, #1
 80073b0:	b2da      	uxtb	r2, r3
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80073bc:	161b      	asrs	r3, r3, #24
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80073ca:	141b      	asrs	r3, r3, #16
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80073d8:	0a1b      	lsrs	r3, r3, #8
 80073da:	b29b      	uxth	r3, r3
 80073dc:	b2da      	uxtb	r2, r3
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	2208      	movs	r2, #8
 80073f2:	815a      	strh	r2, [r3, #10]
    return 0;
 80073f4:	2300      	movs	r3, #0
  }
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3718      	adds	r7, #24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b088      	sub	sp, #32
 8007402:	af00      	add	r7, sp, #0
 8007404:	60f8      	str	r0, [r7, #12]
 8007406:	460b      	mov	r3, r1
 8007408:	607a      	str	r2, [r7, #4]
 800740a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007412:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 8007414:	2300      	movs	r3, #0
 8007416:	83fb      	strh	r3, [r7, #30]
 8007418:	e007      	b.n	800742a <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800741a:	8bfb      	ldrh	r3, [r7, #30]
 800741c:	69ba      	ldr	r2, [r7, #24]
 800741e:	4413      	add	r3, r2
 8007420:	2200      	movs	r2, #0
 8007422:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 8007424:	8bfb      	ldrh	r3, [r7, #30]
 8007426:	3301      	adds	r3, #1
 8007428:	83fb      	strh	r3, [r7, #30]
 800742a:	8bfb      	ldrh	r3, [r7, #30]
 800742c:	2b0b      	cmp	r3, #11
 800742e:	d9f4      	bls.n	800741a <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f107 0216 	add.w	r2, r7, #22
 800743c:	f107 0110 	add.w	r1, r7, #16
 8007440:	7af8      	ldrb	r0, [r7, #11]
 8007442:	4798      	blx	r3
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d008      	beq.n	800745c <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800744a:	7af9      	ldrb	r1, [r7, #11]
 800744c:	233a      	movs	r3, #58	; 0x3a
 800744e:	2202      	movs	r2, #2
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f000 f8f3 	bl	800763c <SCSI_SenseCode>
    return -1;
 8007456:	f04f 33ff 	mov.w	r3, #4294967295
 800745a:	e030      	b.n	80074be <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	2208      	movs	r2, #8
 8007460:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	3b01      	subs	r3, #1
 8007466:	0e1b      	lsrs	r3, r3, #24
 8007468:	b2da      	uxtb	r2, r3
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	3b01      	subs	r3, #1
 8007472:	0c1b      	lsrs	r3, r3, #16
 8007474:	b2da      	uxtb	r2, r3
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	3b01      	subs	r3, #1
 800747e:	0a1b      	lsrs	r3, r3, #8
 8007480:	b2da      	uxtb	r2, r3
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	b2db      	uxtb	r3, r3
 800748a:	3b01      	subs	r3, #1
 800748c:	b2da      	uxtb	r2, r3
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	2202      	movs	r2, #2
 8007496:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007498:	8afb      	ldrh	r3, [r7, #22]
 800749a:	141b      	asrs	r3, r3, #16
 800749c:	b2da      	uxtb	r2, r3
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80074a2:	8afb      	ldrh	r3, [r7, #22]
 80074a4:	0a1b      	lsrs	r3, r3, #8
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	b2da      	uxtb	r2, r3
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 80074ae:	8afb      	ldrh	r3, [r7, #22]
 80074b0:	b2da      	uxtb	r2, r3
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	220c      	movs	r2, #12
 80074ba:	815a      	strh	r2, [r3, #10]
    return 0;
 80074bc:	2300      	movs	r3, #0
  }
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3720      	adds	r7, #32
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
	...

080074c8 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b087      	sub	sp, #28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	460b      	mov	r3, r1
 80074d2:	607a      	str	r2, [r7, #4]
 80074d4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074dc:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 80074de:	2308      	movs	r3, #8
 80074e0:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	8afa      	ldrh	r2, [r7, #22]
 80074e6:	815a      	strh	r2, [r3, #10]

  while (len)
 80074e8:	e00a      	b.n	8007500 <SCSI_ModeSense6+0x38>
  {
    len--;
 80074ea:	8afb      	ldrh	r3, [r7, #22]
 80074ec:	3b01      	subs	r3, #1
 80074ee:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 80074f0:	8afa      	ldrh	r2, [r7, #22]
 80074f2:	8afb      	ldrh	r3, [r7, #22]
 80074f4:	4907      	ldr	r1, [pc, #28]	; (8007514 <SCSI_ModeSense6+0x4c>)
 80074f6:	5c89      	ldrb	r1, [r1, r2]
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	4413      	add	r3, r2
 80074fc:	460a      	mov	r2, r1
 80074fe:	731a      	strb	r2, [r3, #12]
  while (len)
 8007500:	8afb      	ldrh	r3, [r7, #22]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1f1      	bne.n	80074ea <SCSI_ModeSense6+0x22>
  }
  return 0;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	371c      	adds	r7, #28
 800750c:	46bd      	mov	sp, r7
 800750e:	bc80      	pop	{r7}
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	08009740 	.word	0x08009740

08007518 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007518:	b480      	push	{r7}
 800751a:	b087      	sub	sp, #28
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	460b      	mov	r3, r1
 8007522:	607a      	str	r2, [r7, #4]
 8007524:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 8007526:	2308      	movs	r3, #8
 8007528:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007530:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	8afa      	ldrh	r2, [r7, #22]
 8007536:	815a      	strh	r2, [r3, #10]

  while (len)
 8007538:	e00a      	b.n	8007550 <SCSI_ModeSense10+0x38>
  {
    len--;
 800753a:	8afb      	ldrh	r3, [r7, #22]
 800753c:	3b01      	subs	r3, #1
 800753e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8007540:	8afa      	ldrh	r2, [r7, #22]
 8007542:	8afb      	ldrh	r3, [r7, #22]
 8007544:	4907      	ldr	r1, [pc, #28]	; (8007564 <SCSI_ModeSense10+0x4c>)
 8007546:	5c89      	ldrb	r1, [r1, r2]
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	4413      	add	r3, r2
 800754c:	460a      	mov	r2, r1
 800754e:	731a      	strb	r2, [r3, #12]
  while (len)
 8007550:	8afb      	ldrh	r3, [r7, #22]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1f1      	bne.n	800753a <SCSI_ModeSense10+0x22>
  }

  return 0;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	371c      	adds	r7, #28
 800755c:	46bd      	mov	sp, r7
 800755e:	bc80      	pop	{r7}
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	08009748 	.word	0x08009748

08007568 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007568:	b480      	push	{r7}
 800756a:	b087      	sub	sp, #28
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	460b      	mov	r3, r1
 8007572:	607a      	str	r2, [r7, #4]
 8007574:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800757c:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 800757e:	2300      	movs	r3, #0
 8007580:	75fb      	strb	r3, [r7, #23]
 8007582:	e007      	b.n	8007594 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8007584:	7dfb      	ldrb	r3, [r7, #23]
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	4413      	add	r3, r2
 800758a:	2200      	movs	r2, #0
 800758c:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 800758e:	7dfb      	ldrb	r3, [r7, #23]
 8007590:	3301      	adds	r3, #1
 8007592:	75fb      	strb	r3, [r7, #23]
 8007594:	7dfb      	ldrb	r3, [r7, #23]
 8007596:	2b11      	cmp	r3, #17
 8007598:	d9f4      	bls.n	8007584 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	2270      	movs	r2, #112	; 0x70
 800759e:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	220c      	movs	r2, #12
 80075a4:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d02e      	beq.n	8007614 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	3347      	adds	r3, #71	; 0x47
 80075c0:	00db      	lsls	r3, r3, #3
 80075c2:	4413      	add	r3, r2
 80075c4:	791a      	ldrb	r2, [r3, #4]
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	3347      	adds	r3, #71	; 0x47
 80075d4:	00db      	lsls	r3, r3, #3
 80075d6:	4413      	add	r3, r2
 80075d8:	7a5a      	ldrb	r2, [r3, #9]
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80075e4:	693a      	ldr	r2, [r7, #16]
 80075e6:	3347      	adds	r3, #71	; 0x47
 80075e8:	00db      	lsls	r3, r3, #3
 80075ea:	4413      	add	r3, r2
 80075ec:	7a1a      	ldrb	r2, [r3, #8]
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80075f8:	3301      	adds	r3, #1
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007608:	2b04      	cmp	r3, #4
 800760a:	d103      	bne.n	8007614 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	2212      	movs	r2, #18
 8007618:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	3304      	adds	r3, #4
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	2b12      	cmp	r3, #18
 8007622:	d805      	bhi.n	8007630 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	3304      	adds	r3, #4
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	b29a      	uxth	r2, r3
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	371c      	adds	r7, #28
 8007636:	46bd      	mov	sp, r7
 8007638:	bc80      	pop	{r7}
 800763a:	4770      	bx	lr

0800763c <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	4608      	mov	r0, r1
 8007646:	4611      	mov	r1, r2
 8007648:	461a      	mov	r2, r3
 800764a:	4603      	mov	r3, r0
 800764c:	70fb      	strb	r3, [r7, #3]
 800764e:	460b      	mov	r3, r1
 8007650:	70bb      	strb	r3, [r7, #2]
 8007652:	4613      	mov	r3, r2
 8007654:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800765c:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	3347      	adds	r3, #71	; 0x47
 8007668:	00db      	lsls	r3, r3, #3
 800766a:	4413      	add	r3, r2
 800766c:	78ba      	ldrb	r2, [r7, #2]
 800766e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	3347      	adds	r3, #71	; 0x47
 800767a:	00db      	lsls	r3, r3, #3
 800767c:	4413      	add	r3, r2
 800767e:	2200      	movs	r2, #0
 8007680:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007688:	3301      	adds	r3, #1
 800768a:	b2da      	uxtb	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007698:	2b04      	cmp	r3, #4
 800769a:	d103      	bne.n	80076a4 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 80076a4:	bf00      	nop
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bc80      	pop	{r7}
 80076ac:	4770      	bx	lr

080076ae <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b087      	sub	sp, #28
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	60f8      	str	r0, [r7, #12]
 80076b6:	460b      	mov	r3, r1
 80076b8:	607a      	str	r2, [r7, #4]
 80076ba:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c2:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	2200      	movs	r2, #0
 80076c8:	815a      	strh	r2, [r3, #10]
  return 0;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	371c      	adds	r7, #28
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bc80      	pop	{r7}
 80076d4:	4770      	bx	lr

080076d6 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b086      	sub	sp, #24
 80076da:	af00      	add	r7, sp, #0
 80076dc:	60f8      	str	r0, [r7, #12]
 80076de:	460b      	mov	r3, r1
 80076e0:	607a      	str	r2, [r7, #4]
 80076e2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ea:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	7a1b      	ldrb	r3, [r3, #8]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d16e      	bne.n	80077d2 <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80076fa:	b25b      	sxtb	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	db0a      	blt.n	8007716 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007706:	2320      	movs	r3, #32
 8007708:	2205      	movs	r2, #5
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f7ff ff96 	bl	800763c <SCSI_SenseCode>
      return -1;
 8007710:	f04f 33ff 	mov.w	r3, #4294967295
 8007714:	e067      	b.n	80077e6 <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	7afa      	ldrb	r2, [r7, #11]
 8007720:	4610      	mov	r0, r2
 8007722:	4798      	blx	r3
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d008      	beq.n	800773c <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800772a:	7af9      	ldrb	r1, [r7, #11]
 800772c:	233a      	movs	r3, #58	; 0x3a
 800772e:	2202      	movs	r2, #2
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f7ff ff83 	bl	800763c <SCSI_SenseCode>
      return -1;
 8007736:	f04f 33ff 	mov.w	r3, #4294967295
 800773a:	e054      	b.n	80077e6 <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	3302      	adds	r3, #2
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	3303      	adds	r3, #3
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800774c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	3304      	adds	r3, #4
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007756:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	3205      	adds	r2, #5
 800775c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800775e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	3307      	adds	r3, #7
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	021b      	lsls	r3, r3, #8
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	3208      	adds	r2, #8
 8007772:	7812      	ldrb	r2, [r2, #0]
 8007774:	431a      	orrs	r2, r3
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007788:	7af9      	ldrb	r1, [r7, #11]
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f000 f912 	bl	80079b4 <SCSI_CheckAddressRange>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	da02      	bge.n	800779c <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007796:	f04f 33ff 	mov.w	r3, #4294967295
 800779a:	e024      	b.n	80077e6 <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	2202      	movs	r2, #2
 80077a0:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80077ae:	6979      	ldr	r1, [r7, #20]
 80077b0:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 80077b4:	fb01 f303 	mul.w	r3, r1, r3
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d00a      	beq.n	80077d2 <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80077c2:	2320      	movs	r3, #32
 80077c4:	2205      	movs	r2, #5
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f7ff ff38 	bl	800763c <SCSI_SenseCode>
      return -1;
 80077cc:	f04f 33ff 	mov.w	r3, #4294967295
 80077d0:	e009      	b.n	80077e6 <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077d8:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 80077da:	7afb      	ldrb	r3, [r7, #11]
 80077dc:	4619      	mov	r1, r3
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f000 f90a 	bl	80079f8 <SCSI_ProcessRead>
 80077e4:	4603      	mov	r3, r0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3718      	adds	r7, #24
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b086      	sub	sp, #24
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	60f8      	str	r0, [r7, #12]
 80077f6:	460b      	mov	r3, r1
 80077f8:	607a      	str	r2, [r7, #4]
 80077fa:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007802:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	7a1b      	ldrb	r3, [r3, #8]
 8007808:	2b00      	cmp	r3, #0
 800780a:	f040 8096 	bne.w	800793a <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007814:	b25b      	sxtb	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	da0a      	bge.n	8007830 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007820:	2320      	movs	r3, #32
 8007822:	2205      	movs	r2, #5
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f7ff ff09 	bl	800763c <SCSI_SenseCode>
      return -1;
 800782a:	f04f 33ff 	mov.w	r3, #4294967295
 800782e:	e08a      	b.n	8007946 <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	7afa      	ldrb	r2, [r7, #11]
 800783a:	4610      	mov	r0, r2
 800783c:	4798      	blx	r3
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d008      	beq.n	8007856 <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007844:	7af9      	ldrb	r1, [r7, #11]
 8007846:	233a      	movs	r3, #58	; 0x3a
 8007848:	2202      	movs	r2, #2
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f7ff fef6 	bl	800763c <SCSI_SenseCode>
      return -1;
 8007850:	f04f 33ff 	mov.w	r3, #4294967295
 8007854:	e077      	b.n	8007946 <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	7afa      	ldrb	r2, [r7, #11]
 8007860:	4610      	mov	r0, r2
 8007862:	4798      	blx	r3
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d008      	beq.n	800787c <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800786a:	7af9      	ldrb	r1, [r7, #11]
 800786c:	2327      	movs	r3, #39	; 0x27
 800786e:	2202      	movs	r2, #2
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f7ff fee3 	bl	800763c <SCSI_SenseCode>
      return -1;
 8007876:	f04f 33ff 	mov.w	r3, #4294967295
 800787a:	e064      	b.n	8007946 <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	3302      	adds	r3, #2
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	3303      	adds	r3, #3
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800788c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	3304      	adds	r3, #4
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007896:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	3205      	adds	r2, #5
 800789c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800789e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	3307      	adds	r3, #7
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	3208      	adds	r2, #8
 80078b2:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80078b4:	431a      	orrs	r2, r3
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80078c8:	7af9      	ldrb	r1, [r7, #11]
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f000 f872 	bl	80079b4 <SCSI_CheckAddressRange>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	da02      	bge.n	80078dc <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80078d6:	f04f 33ff 	mov.w	r3, #4294967295
 80078da:	e034      	b.n	8007946 <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 80078e8:	fb02 f303 	mul.w	r3, r2, r3
 80078ec:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d00a      	beq.n	8007910 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007900:	2320      	movs	r3, #32
 8007902:	2205      	movs	r2, #5
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f7ff fe99 	bl	800763c <SCSI_SenseCode>
      return -1;
 800790a:	f04f 33ff 	mov.w	r3, #4294967295
 800790e:	e01a      	b.n	8007946 <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007916:	bf28      	it	cs
 8007918:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800791c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	2201      	movs	r2, #1
 8007922:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	f103 020c 	add.w	r2, r3, #12
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	b29b      	uxth	r3, r3
 800792e:	2101      	movs	r1, #1
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f001 fe08 	bl	8009546 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 8007936:	2300      	movs	r3, #0
 8007938:	e005      	b.n	8007946 <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 800793a:	7afb      	ldrb	r3, [r7, #11]
 800793c:	4619      	mov	r1, r3
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f000 f8ce 	bl	8007ae0 <SCSI_ProcessWrite>
 8007944:	4603      	mov	r3, r0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3718      	adds	r7, #24
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b086      	sub	sp, #24
 8007952:	af00      	add	r7, sp, #0
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	460b      	mov	r3, r1
 8007958:	607a      	str	r2, [r7, #4]
 800795a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007962:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	3301      	adds	r3, #1
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	f003 0302 	and.w	r3, r3, #2
 800796e:	2b00      	cmp	r3, #0
 8007970:	d008      	beq.n	8007984 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8007972:	7af9      	ldrb	r1, [r7, #11]
 8007974:	2324      	movs	r3, #36	; 0x24
 8007976:	2205      	movs	r2, #5
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f7ff fe5f 	bl	800763c <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800797e:	f04f 33ff 	mov.w	r3, #4294967295
 8007982:	e013      	b.n	80079ac <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007990:	7af9      	ldrb	r1, [r7, #11]
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f000 f80e 	bl	80079b4 <SCSI_CheckAddressRange>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	da02      	bge.n	80079a4 <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 800799e:	f04f 33ff 	mov.w	r3, #4294967295
 80079a2:	e003      	b.n	80079ac <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	2200      	movs	r2, #0
 80079a8:	815a      	strh	r2, [r3, #10]
  return 0;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3718      	adds	r7, #24
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	607a      	str	r2, [r7, #4]
 80079be:	603b      	str	r3, [r7, #0]
 80079c0:	460b      	mov	r3, r1
 80079c2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ca:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	441a      	add	r2, r3
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80079d8:	429a      	cmp	r2, r3
 80079da:	d908      	bls.n	80079ee <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80079dc:	7af9      	ldrb	r1, [r7, #11]
 80079de:	2321      	movs	r3, #33	; 0x21
 80079e0:	2205      	movs	r2, #5
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f7ff fe2a 	bl	800763c <SCSI_SenseCode>
    return -1;
 80079e8:	f04f 33ff 	mov.w	r3, #4294967295
 80079ec:	e000      	b.n	80079f0 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3718      	adds	r7, #24
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 80079f8:	b590      	push	{r4, r7, lr}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	460b      	mov	r3, r1
 8007a02:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a0a:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007a18:	fb02 f303 	mul.w	r3, r2, r3
 8007a1c:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a24:	bf28      	it	cs
 8007a26:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007a2a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a32:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007a46:	4618      	mov	r0, r3
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	78f8      	ldrb	r0, [r7, #3]
 8007a52:	47a0      	blx	r4
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	da08      	bge.n	8007a6c <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8007a5a:	78f9      	ldrb	r1, [r7, #3]
 8007a5c:	2311      	movs	r3, #17
 8007a5e:	2204      	movs	r2, #4
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7ff fdeb 	bl	800763c <SCSI_SenseCode>
    return -1;
 8007a66:	f04f 33ff 	mov.w	r3, #4294967295
 8007a6a:	e035      	b.n	8007ad8 <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f103 020c 	add.w	r2, r3, #12
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	2181      	movs	r1, #129	; 0x81
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f001 fd41 	bl	8009500 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a92:	441a      	add	r2, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8007aae:	1ad2      	subs	r2, r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	1ad2      	subs	r2, r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d102      	bne.n	8007ad6 <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2203      	movs	r2, #3
 8007ad4:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd90      	pop	{r4, r7, pc}

08007ae0 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007ae0:	b590      	push	{r4, r7, lr}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af2:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007b00:	fb02 f303 	mul.w	r3, r2, r3
 8007b04:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b0c:	bf28      	it	cs
 8007b0e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007b12:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b1a:	695c      	ldr	r4, [r3, #20]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f103 010c 	add.w	r1, r3, #12
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007b2e:	4618      	mov	r0, r3
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	78f8      	ldrb	r0, [r7, #3]
 8007b3a:	47a0      	blx	r4
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	da08      	bge.n	8007b54 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8007b42:	78f9      	ldrb	r1, [r7, #3]
 8007b44:	2303      	movs	r3, #3
 8007b46:	2204      	movs	r2, #4
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7ff fd77 	bl	800763c <SCSI_SenseCode>

    return -1;
 8007b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b52:	e045      	b.n	8007be0 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007b60:	4619      	mov	r1, r3
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b68:	441a      	add	r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b84:	1ad2      	subs	r2, r2, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	1ad2      	subs	r2, r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d104      	bne.n	8007bb0 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f7ff f97f 	bl	8006eac <MSC_BOT_SendCSW>
 8007bae:	e016      	b.n	8007bde <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007bbc:	fb02 f303 	mul.w	r3, r2, r3
 8007bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bc4:	bf28      	it	cs
 8007bc6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007bca:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f103 020c 	add.w	r2, r3, #12
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f001 fcb4 	bl	8009546 <USBD_LL_PrepareReceive>
  }

  return 0;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd90      	pop	{r4, r7, pc}

08007be8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d101      	bne.n	8007c00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	e01a      	b.n	8007c36 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d003      	beq.n	8007c12 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d003      	beq.n	8007c20 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	79fa      	ldrb	r2, [r7, #7]
 8007c2c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f001 fb0e 	bl	8009250 <USBD_LL_Init>

  return USBD_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b085      	sub	sp, #20
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d006      	beq.n	8007c60 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	73fb      	strb	r3, [r7, #15]
 8007c5e:	e001      	b.n	8007c64 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007c60:	2302      	movs	r3, #2
 8007c62:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bc80      	pop	{r7}
 8007c6e:	4770      	bx	lr

08007c70 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f001 fb39 	bl	80092f0 <USBD_LL_Start>

  return USBD_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bc80      	pop	{r7}
 8007c9a:	4770      	bx	lr

08007c9c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007ca8:	2302      	movs	r3, #2
 8007caa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00c      	beq.n	8007cd0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	78fa      	ldrb	r2, [r7, #3]
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	4798      	blx	r3
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d101      	bne.n	8007cd0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b082      	sub	sp, #8
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	78fa      	ldrb	r2, [r7, #3]
 8007cf0:	4611      	mov	r1, r2
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	4798      	blx	r3

  return USBD_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d10:	6839      	ldr	r1, [r7, #0]
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 fed7 	bl	8008ac6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d26:	461a      	mov	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007d34:	f003 031f 	and.w	r3, r3, #31
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d016      	beq.n	8007d6a <USBD_LL_SetupStage+0x6a>
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d81c      	bhi.n	8007d7a <USBD_LL_SetupStage+0x7a>
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d002      	beq.n	8007d4a <USBD_LL_SetupStage+0x4a>
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d008      	beq.n	8007d5a <USBD_LL_SetupStage+0x5a>
 8007d48:	e017      	b.n	8007d7a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d50:	4619      	mov	r1, r3
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f9ca 	bl	80080ec <USBD_StdDevReq>
      break;
 8007d58:	e01a      	b.n	8007d90 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d60:	4619      	mov	r1, r3
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 fa2c 	bl	80081c0 <USBD_StdItfReq>
      break;
 8007d68:	e012      	b.n	8007d90 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d70:	4619      	mov	r1, r3
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fa6c 	bl	8008250 <USBD_StdEPReq>
      break;
 8007d78:	e00a      	b.n	8007d90 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007d80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	4619      	mov	r1, r3
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f001 fb30 	bl	80093ee <USBD_LL_StallEP>
      break;
 8007d8e:	bf00      	nop
  }

  return USBD_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b086      	sub	sp, #24
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	60f8      	str	r0, [r7, #12]
 8007da2:	460b      	mov	r3, r1
 8007da4:	607a      	str	r2, [r7, #4]
 8007da6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007da8:	7afb      	ldrb	r3, [r7, #11]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d14b      	bne.n	8007e46 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007db4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007dbc:	2b03      	cmp	r3, #3
 8007dbe:	d134      	bne.n	8007e2a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	68da      	ldr	r2, [r3, #12]
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d919      	bls.n	8007e00 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	68da      	ldr	r2, [r3, #12]
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	1ad2      	subs	r2, r2, r3
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	68da      	ldr	r2, [r3, #12]
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d203      	bcs.n	8007dee <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	e002      	b.n	8007df4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	461a      	mov	r2, r3
 8007df6:	6879      	ldr	r1, [r7, #4]
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 ff38 	bl	8008c6e <USBD_CtlContinueRx>
 8007dfe:	e038      	b.n	8007e72 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00a      	beq.n	8007e22 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e12:	2b03      	cmp	r3, #3
 8007e14:	d105      	bne.n	8007e22 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f000 ff35 	bl	8008c92 <USBD_CtlSendStatus>
 8007e28:	e023      	b.n	8007e72 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e30:	2b05      	cmp	r3, #5
 8007e32:	d11e      	bne.n	8007e72 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f001 fad5 	bl	80093ee <USBD_LL_StallEP>
 8007e44:	e015      	b.n	8007e72 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00d      	beq.n	8007e6e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e58:	2b03      	cmp	r3, #3
 8007e5a:	d108      	bne.n	8007e6e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	7afa      	ldrb	r2, [r7, #11]
 8007e66:	4611      	mov	r1, r2
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	4798      	blx	r3
 8007e6c:	e001      	b.n	8007e72 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e6e:	2302      	movs	r3, #2
 8007e70:	e000      	b.n	8007e74 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3718      	adds	r7, #24
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	460b      	mov	r3, r1
 8007e86:	607a      	str	r2, [r7, #4]
 8007e88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007e8a:	7afb      	ldrb	r3, [r7, #11]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d17f      	bne.n	8007f90 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	3314      	adds	r3, #20
 8007e94:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d15c      	bne.n	8007f5a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	68da      	ldr	r2, [r3, #12]
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d915      	bls.n	8007ed8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	68da      	ldr	r2, [r3, #12]
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	1ad2      	subs	r2, r2, r3
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	6879      	ldr	r1, [r7, #4]
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 fec0 	bl	8008c4a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007eca:	2300      	movs	r3, #0
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2100      	movs	r1, #0
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f001 fb38 	bl	8009546 <USBD_LL_PrepareReceive>
 8007ed6:	e04e      	b.n	8007f76 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	6912      	ldr	r2, [r2, #16]
 8007ee0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ee4:	fb02 f201 	mul.w	r2, r2, r1
 8007ee8:	1a9b      	subs	r3, r3, r2
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d11c      	bne.n	8007f28 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	689a      	ldr	r2, [r3, #8]
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d316      	bcc.n	8007f28 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	689a      	ldr	r2, [r3, #8]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d20f      	bcs.n	8007f28 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f08:	2200      	movs	r2, #0
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 fe9c 	bl	8008c4a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	2100      	movs	r1, #0
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f001 fb10 	bl	8009546 <USBD_LL_PrepareReceive>
 8007f26:	e026      	b.n	8007f76 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00a      	beq.n	8007f4a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f3a:	2b03      	cmp	r3, #3
 8007f3c:	d105      	bne.n	8007f4a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007f4a:	2180      	movs	r1, #128	; 0x80
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f001 fa4e 	bl	80093ee <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f000 feb0 	bl	8008cb8 <USBD_CtlReceiveStatus>
 8007f58:	e00d      	b.n	8007f76 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f60:	2b04      	cmp	r3, #4
 8007f62:	d004      	beq.n	8007f6e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d103      	bne.n	8007f76 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007f6e:	2180      	movs	r1, #128	; 0x80
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f001 fa3c 	bl	80093ee <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d11d      	bne.n	8007fbc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f7ff fe81 	bl	8007c88 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f8e:	e015      	b.n	8007fbc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f96:	695b      	ldr	r3, [r3, #20]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00d      	beq.n	8007fb8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	d108      	bne.n	8007fb8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	7afa      	ldrb	r2, [r7, #11]
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	4798      	blx	r3
 8007fb6:	e001      	b.n	8007fbc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007fb8:	2302      	movs	r3, #2
 8007fba:	e000      	b.n	8007fbe <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3718      	adds	r7, #24
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b082      	sub	sp, #8
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fce:	2340      	movs	r3, #64	; 0x40
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f001 f9a6 	bl	8009326 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2240      	movs	r2, #64	; 0x40
 8007fe6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fea:	2340      	movs	r3, #64	; 0x40
 8007fec:	2200      	movs	r2, #0
 8007fee:	2180      	movs	r1, #128	; 0x80
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f001 f998 	bl	8009326 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2240      	movs	r2, #64	; 0x40
 8008000:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008026:	2b00      	cmp	r3, #0
 8008028:	d009      	beq.n	800803e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	6852      	ldr	r2, [r2, #4]
 8008036:	b2d2      	uxtb	r2, r2
 8008038:	4611      	mov	r1, r2
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	4798      	blx	r3
  }

  return USBD_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	460b      	mov	r3, r1
 8008052:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	78fa      	ldrb	r2, [r7, #3]
 8008058:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	bc80      	pop	{r7}
 8008064:	4770      	bx	lr

08008066 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008066:	b480      	push	{r7}
 8008068:	b083      	sub	sp, #12
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2204      	movs	r2, #4
 800807e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	bc80      	pop	{r7}
 800808c:	4770      	bx	lr

0800808e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800808e:	b480      	push	{r7}
 8008090:	b083      	sub	sp, #12
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800809c:	2b04      	cmp	r3, #4
 800809e:	d105      	bne.n	80080ac <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	370c      	adds	r7, #12
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bc80      	pop	{r7}
 80080b6:	4770      	bx	lr

080080b8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d10b      	bne.n	80080e2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d005      	beq.n	80080e2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080dc:	69db      	ldr	r3, [r3, #28]
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008102:	2b40      	cmp	r3, #64	; 0x40
 8008104:	d005      	beq.n	8008112 <USBD_StdDevReq+0x26>
 8008106:	2b40      	cmp	r3, #64	; 0x40
 8008108:	d84f      	bhi.n	80081aa <USBD_StdDevReq+0xbe>
 800810a:	2b00      	cmp	r3, #0
 800810c:	d009      	beq.n	8008122 <USBD_StdDevReq+0x36>
 800810e:	2b20      	cmp	r3, #32
 8008110:	d14b      	bne.n	80081aa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	6839      	ldr	r1, [r7, #0]
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	4798      	blx	r3
      break;
 8008120:	e048      	b.n	80081b4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	785b      	ldrb	r3, [r3, #1]
 8008126:	2b09      	cmp	r3, #9
 8008128:	d839      	bhi.n	800819e <USBD_StdDevReq+0xb2>
 800812a:	a201      	add	r2, pc, #4	; (adr r2, 8008130 <USBD_StdDevReq+0x44>)
 800812c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008130:	08008181 	.word	0x08008181
 8008134:	08008195 	.word	0x08008195
 8008138:	0800819f 	.word	0x0800819f
 800813c:	0800818b 	.word	0x0800818b
 8008140:	0800819f 	.word	0x0800819f
 8008144:	08008163 	.word	0x08008163
 8008148:	08008159 	.word	0x08008159
 800814c:	0800819f 	.word	0x0800819f
 8008150:	08008177 	.word	0x08008177
 8008154:	0800816d 	.word	0x0800816d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008158:	6839      	ldr	r1, [r7, #0]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f9dc 	bl	8008518 <USBD_GetDescriptor>
          break;
 8008160:	e022      	b.n	80081a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008162:	6839      	ldr	r1, [r7, #0]
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fb3f 	bl	80087e8 <USBD_SetAddress>
          break;
 800816a:	e01d      	b.n	80081a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800816c:	6839      	ldr	r1, [r7, #0]
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fb7e 	bl	8008870 <USBD_SetConfig>
          break;
 8008174:	e018      	b.n	80081a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008176:	6839      	ldr	r1, [r7, #0]
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 fc07 	bl	800898c <USBD_GetConfig>
          break;
 800817e:	e013      	b.n	80081a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008180:	6839      	ldr	r1, [r7, #0]
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fc37 	bl	80089f6 <USBD_GetStatus>
          break;
 8008188:	e00e      	b.n	80081a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800818a:	6839      	ldr	r1, [r7, #0]
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fc65 	bl	8008a5c <USBD_SetFeature>
          break;
 8008192:	e009      	b.n	80081a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fc74 	bl	8008a84 <USBD_ClrFeature>
          break;
 800819c:	e004      	b.n	80081a8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800819e:	6839      	ldr	r1, [r7, #0]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fccc 	bl	8008b3e <USBD_CtlError>
          break;
 80081a6:	bf00      	nop
      }
      break;
 80081a8:	e004      	b.n	80081b4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fcc6 	bl	8008b3e <USBD_CtlError>
      break;
 80081b2:	bf00      	nop
  }

  return ret;
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop

080081c0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081ca:	2300      	movs	r3, #0
 80081cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081d6:	2b40      	cmp	r3, #64	; 0x40
 80081d8:	d005      	beq.n	80081e6 <USBD_StdItfReq+0x26>
 80081da:	2b40      	cmp	r3, #64	; 0x40
 80081dc:	d82e      	bhi.n	800823c <USBD_StdItfReq+0x7c>
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d001      	beq.n	80081e6 <USBD_StdItfReq+0x26>
 80081e2:	2b20      	cmp	r3, #32
 80081e4:	d12a      	bne.n	800823c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ec:	3b01      	subs	r3, #1
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d81d      	bhi.n	800822e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	889b      	ldrh	r3, [r3, #4]
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d813      	bhi.n	8008224 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	4798      	blx	r3
 800820a:	4603      	mov	r3, r0
 800820c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	88db      	ldrh	r3, [r3, #6]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d110      	bne.n	8008238 <USBD_StdItfReq+0x78>
 8008216:	7bfb      	ldrb	r3, [r7, #15]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10d      	bne.n	8008238 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 fd38 	bl	8008c92 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008222:	e009      	b.n	8008238 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fc89 	bl	8008b3e <USBD_CtlError>
          break;
 800822c:	e004      	b.n	8008238 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800822e:	6839      	ldr	r1, [r7, #0]
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fc84 	bl	8008b3e <USBD_CtlError>
          break;
 8008236:	e000      	b.n	800823a <USBD_StdItfReq+0x7a>
          break;
 8008238:	bf00      	nop
      }
      break;
 800823a:	e004      	b.n	8008246 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fc7d 	bl	8008b3e <USBD_CtlError>
      break;
 8008244:	bf00      	nop
  }

  return USBD_OK;
 8008246:	2300      	movs	r3, #0
}
 8008248:	4618      	mov	r0, r3
 800824a:	3710      	adds	r7, #16
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	889b      	ldrh	r3, [r3, #4]
 8008262:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800826c:	2b40      	cmp	r3, #64	; 0x40
 800826e:	d007      	beq.n	8008280 <USBD_StdEPReq+0x30>
 8008270:	2b40      	cmp	r3, #64	; 0x40
 8008272:	f200 8146 	bhi.w	8008502 <USBD_StdEPReq+0x2b2>
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00a      	beq.n	8008290 <USBD_StdEPReq+0x40>
 800827a:	2b20      	cmp	r3, #32
 800827c:	f040 8141 	bne.w	8008502 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	4798      	blx	r3
      break;
 800828e:	e13d      	b.n	800850c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008298:	2b20      	cmp	r3, #32
 800829a:	d10a      	bne.n	80082b2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	6839      	ldr	r1, [r7, #0]
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	4798      	blx	r3
 80082aa:	4603      	mov	r3, r0
 80082ac:	73fb      	strb	r3, [r7, #15]

        return ret;
 80082ae:	7bfb      	ldrb	r3, [r7, #15]
 80082b0:	e12d      	b.n	800850e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	785b      	ldrb	r3, [r3, #1]
 80082b6:	2b03      	cmp	r3, #3
 80082b8:	d007      	beq.n	80082ca <USBD_StdEPReq+0x7a>
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	f300 811b 	bgt.w	80084f6 <USBD_StdEPReq+0x2a6>
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d072      	beq.n	80083aa <USBD_StdEPReq+0x15a>
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d03a      	beq.n	800833e <USBD_StdEPReq+0xee>
 80082c8:	e115      	b.n	80084f6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d002      	beq.n	80082da <USBD_StdEPReq+0x8a>
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	d015      	beq.n	8008304 <USBD_StdEPReq+0xb4>
 80082d8:	e02b      	b.n	8008332 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082da:	7bbb      	ldrb	r3, [r7, #14]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00c      	beq.n	80082fa <USBD_StdEPReq+0xaa>
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
 80082e2:	2b80      	cmp	r3, #128	; 0x80
 80082e4:	d009      	beq.n	80082fa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80082e6:	7bbb      	ldrb	r3, [r7, #14]
 80082e8:	4619      	mov	r1, r3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f001 f87f 	bl	80093ee <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80082f0:	2180      	movs	r1, #128	; 0x80
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f001 f87b 	bl	80093ee <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082f8:	e020      	b.n	800833c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fc1e 	bl	8008b3e <USBD_CtlError>
              break;
 8008302:	e01b      	b.n	800833c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	885b      	ldrh	r3, [r3, #2]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10e      	bne.n	800832a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800830c:	7bbb      	ldrb	r3, [r7, #14]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00b      	beq.n	800832a <USBD_StdEPReq+0xda>
 8008312:	7bbb      	ldrb	r3, [r7, #14]
 8008314:	2b80      	cmp	r3, #128	; 0x80
 8008316:	d008      	beq.n	800832a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	88db      	ldrh	r3, [r3, #6]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d104      	bne.n	800832a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008320:	7bbb      	ldrb	r3, [r7, #14]
 8008322:	4619      	mov	r1, r3
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f001 f862 	bl	80093ee <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fcb1 	bl	8008c92 <USBD_CtlSendStatus>

              break;
 8008330:	e004      	b.n	800833c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008332:	6839      	ldr	r1, [r7, #0]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fc02 	bl	8008b3e <USBD_CtlError>
              break;
 800833a:	bf00      	nop
          }
          break;
 800833c:	e0e0      	b.n	8008500 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008344:	2b02      	cmp	r3, #2
 8008346:	d002      	beq.n	800834e <USBD_StdEPReq+0xfe>
 8008348:	2b03      	cmp	r3, #3
 800834a:	d015      	beq.n	8008378 <USBD_StdEPReq+0x128>
 800834c:	e026      	b.n	800839c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800834e:	7bbb      	ldrb	r3, [r7, #14]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00c      	beq.n	800836e <USBD_StdEPReq+0x11e>
 8008354:	7bbb      	ldrb	r3, [r7, #14]
 8008356:	2b80      	cmp	r3, #128	; 0x80
 8008358:	d009      	beq.n	800836e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800835a:	7bbb      	ldrb	r3, [r7, #14]
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f001 f845 	bl	80093ee <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008364:	2180      	movs	r1, #128	; 0x80
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f001 f841 	bl	80093ee <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800836c:	e01c      	b.n	80083a8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800836e:	6839      	ldr	r1, [r7, #0]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 fbe4 	bl	8008b3e <USBD_CtlError>
              break;
 8008376:	e017      	b.n	80083a8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	885b      	ldrh	r3, [r3, #2]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d112      	bne.n	80083a6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008380:	7bbb      	ldrb	r3, [r7, #14]
 8008382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008386:	2b00      	cmp	r3, #0
 8008388:	d004      	beq.n	8008394 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800838a:	7bbb      	ldrb	r3, [r7, #14]
 800838c:	4619      	mov	r1, r3
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f001 f84c 	bl	800942c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fc7c 	bl	8008c92 <USBD_CtlSendStatus>
              }
              break;
 800839a:	e004      	b.n	80083a6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800839c:	6839      	ldr	r1, [r7, #0]
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fbcd 	bl	8008b3e <USBD_CtlError>
              break;
 80083a4:	e000      	b.n	80083a8 <USBD_StdEPReq+0x158>
              break;
 80083a6:	bf00      	nop
          }
          break;
 80083a8:	e0aa      	b.n	8008500 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d002      	beq.n	80083ba <USBD_StdEPReq+0x16a>
 80083b4:	2b03      	cmp	r3, #3
 80083b6:	d032      	beq.n	800841e <USBD_StdEPReq+0x1ce>
 80083b8:	e097      	b.n	80084ea <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083ba:	7bbb      	ldrb	r3, [r7, #14]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d007      	beq.n	80083d0 <USBD_StdEPReq+0x180>
 80083c0:	7bbb      	ldrb	r3, [r7, #14]
 80083c2:	2b80      	cmp	r3, #128	; 0x80
 80083c4:	d004      	beq.n	80083d0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80083c6:	6839      	ldr	r1, [r7, #0]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fbb8 	bl	8008b3e <USBD_CtlError>
                break;
 80083ce:	e091      	b.n	80084f4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	da0b      	bge.n	80083f0 <USBD_StdEPReq+0x1a0>
 80083d8:	7bbb      	ldrb	r3, [r7, #14]
 80083da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083de:	4613      	mov	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	3310      	adds	r3, #16
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	4413      	add	r3, r2
 80083ec:	3304      	adds	r3, #4
 80083ee:	e00b      	b.n	8008408 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083f0:	7bbb      	ldrb	r3, [r7, #14]
 80083f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083f6:	4613      	mov	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	4413      	add	r3, r2
 8008406:	3304      	adds	r3, #4
 8008408:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	2200      	movs	r2, #0
 800840e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	2202      	movs	r2, #2
 8008414:	4619      	mov	r1, r3
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fbfb 	bl	8008c12 <USBD_CtlSendData>
              break;
 800841c:	e06a      	b.n	80084f4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800841e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008422:	2b00      	cmp	r3, #0
 8008424:	da11      	bge.n	800844a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008426:	7bbb      	ldrb	r3, [r7, #14]
 8008428:	f003 020f 	and.w	r2, r3, #15
 800842c:	6879      	ldr	r1, [r7, #4]
 800842e:	4613      	mov	r3, r2
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	4413      	add	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	440b      	add	r3, r1
 8008438:	3318      	adds	r3, #24
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d117      	bne.n	8008470 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008440:	6839      	ldr	r1, [r7, #0]
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 fb7b 	bl	8008b3e <USBD_CtlError>
                  break;
 8008448:	e054      	b.n	80084f4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800844a:	7bbb      	ldrb	r3, [r7, #14]
 800844c:	f003 020f 	and.w	r2, r3, #15
 8008450:	6879      	ldr	r1, [r7, #4]
 8008452:	4613      	mov	r3, r2
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	4413      	add	r3, r2
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	440b      	add	r3, r1
 800845c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d104      	bne.n	8008470 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008466:	6839      	ldr	r1, [r7, #0]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fb68 	bl	8008b3e <USBD_CtlError>
                  break;
 800846e:	e041      	b.n	80084f4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008470:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008474:	2b00      	cmp	r3, #0
 8008476:	da0b      	bge.n	8008490 <USBD_StdEPReq+0x240>
 8008478:	7bbb      	ldrb	r3, [r7, #14]
 800847a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800847e:	4613      	mov	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4413      	add	r3, r2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	3310      	adds	r3, #16
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	4413      	add	r3, r2
 800848c:	3304      	adds	r3, #4
 800848e:	e00b      	b.n	80084a8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008490:	7bbb      	ldrb	r3, [r7, #14]
 8008492:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008496:	4613      	mov	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4413      	add	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	4413      	add	r3, r2
 80084a6:	3304      	adds	r3, #4
 80084a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80084aa:	7bbb      	ldrb	r3, [r7, #14]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d002      	beq.n	80084b6 <USBD_StdEPReq+0x266>
 80084b0:	7bbb      	ldrb	r3, [r7, #14]
 80084b2:	2b80      	cmp	r3, #128	; 0x80
 80084b4:	d103      	bne.n	80084be <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	2200      	movs	r2, #0
 80084ba:	601a      	str	r2, [r3, #0]
 80084bc:	e00e      	b.n	80084dc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80084be:	7bbb      	ldrb	r3, [r7, #14]
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 ffd1 	bl	800946a <USBD_LL_IsStallEP>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d003      	beq.n	80084d6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	2201      	movs	r2, #1
 80084d2:	601a      	str	r2, [r3, #0]
 80084d4:	e002      	b.n	80084dc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	2200      	movs	r2, #0
 80084da:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	2202      	movs	r2, #2
 80084e0:	4619      	mov	r1, r3
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fb95 	bl	8008c12 <USBD_CtlSendData>
              break;
 80084e8:	e004      	b.n	80084f4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fb26 	bl	8008b3e <USBD_CtlError>
              break;
 80084f2:	bf00      	nop
          }
          break;
 80084f4:	e004      	b.n	8008500 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80084f6:	6839      	ldr	r1, [r7, #0]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fb20 	bl	8008b3e <USBD_CtlError>
          break;
 80084fe:	bf00      	nop
      }
      break;
 8008500:	e004      	b.n	800850c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fb1a 	bl	8008b3e <USBD_CtlError>
      break;
 800850a:	bf00      	nop
  }

  return ret;
 800850c:	7bfb      	ldrb	r3, [r7, #15]
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
	...

08008518 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008522:	2300      	movs	r3, #0
 8008524:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008526:	2300      	movs	r3, #0
 8008528:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800852a:	2300      	movs	r3, #0
 800852c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	885b      	ldrh	r3, [r3, #2]
 8008532:	0a1b      	lsrs	r3, r3, #8
 8008534:	b29b      	uxth	r3, r3
 8008536:	3b01      	subs	r3, #1
 8008538:	2b06      	cmp	r3, #6
 800853a:	f200 8128 	bhi.w	800878e <USBD_GetDescriptor+0x276>
 800853e:	a201      	add	r2, pc, #4	; (adr r2, 8008544 <USBD_GetDescriptor+0x2c>)
 8008540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008544:	08008561 	.word	0x08008561
 8008548:	08008579 	.word	0x08008579
 800854c:	080085b9 	.word	0x080085b9
 8008550:	0800878f 	.word	0x0800878f
 8008554:	0800878f 	.word	0x0800878f
 8008558:	0800872f 	.word	0x0800872f
 800855c:	0800875b 	.word	0x0800875b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	7c12      	ldrb	r2, [r2, #16]
 800856c:	f107 0108 	add.w	r1, r7, #8
 8008570:	4610      	mov	r0, r2
 8008572:	4798      	blx	r3
 8008574:	60f8      	str	r0, [r7, #12]
      break;
 8008576:	e112      	b.n	800879e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	7c1b      	ldrb	r3, [r3, #16]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d10d      	bne.n	800859c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008588:	f107 0208 	add.w	r2, r7, #8
 800858c:	4610      	mov	r0, r2
 800858e:	4798      	blx	r3
 8008590:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	3301      	adds	r3, #1
 8008596:	2202      	movs	r2, #2
 8008598:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800859a:	e100      	b.n	800879e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a4:	f107 0208 	add.w	r2, r7, #8
 80085a8:	4610      	mov	r0, r2
 80085aa:	4798      	blx	r3
 80085ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	3301      	adds	r3, #1
 80085b2:	2202      	movs	r2, #2
 80085b4:	701a      	strb	r2, [r3, #0]
      break;
 80085b6:	e0f2      	b.n	800879e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	885b      	ldrh	r3, [r3, #2]
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b05      	cmp	r3, #5
 80085c0:	f200 80ac 	bhi.w	800871c <USBD_GetDescriptor+0x204>
 80085c4:	a201      	add	r2, pc, #4	; (adr r2, 80085cc <USBD_GetDescriptor+0xb4>)
 80085c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ca:	bf00      	nop
 80085cc:	080085e5 	.word	0x080085e5
 80085d0:	08008619 	.word	0x08008619
 80085d4:	0800864d 	.word	0x0800864d
 80085d8:	08008681 	.word	0x08008681
 80085dc:	080086b5 	.word	0x080086b5
 80085e0:	080086e9 	.word	0x080086e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00b      	beq.n	8008608 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	7c12      	ldrb	r2, [r2, #16]
 80085fc:	f107 0108 	add.w	r1, r7, #8
 8008600:	4610      	mov	r0, r2
 8008602:	4798      	blx	r3
 8008604:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008606:	e091      	b.n	800872c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008608:	6839      	ldr	r1, [r7, #0]
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 fa97 	bl	8008b3e <USBD_CtlError>
            err++;
 8008610:	7afb      	ldrb	r3, [r7, #11]
 8008612:	3301      	adds	r3, #1
 8008614:	72fb      	strb	r3, [r7, #11]
          break;
 8008616:	e089      	b.n	800872c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00b      	beq.n	800863c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	7c12      	ldrb	r2, [r2, #16]
 8008630:	f107 0108 	add.w	r1, r7, #8
 8008634:	4610      	mov	r0, r2
 8008636:	4798      	blx	r3
 8008638:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800863a:	e077      	b.n	800872c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fa7d 	bl	8008b3e <USBD_CtlError>
            err++;
 8008644:	7afb      	ldrb	r3, [r7, #11]
 8008646:	3301      	adds	r3, #1
 8008648:	72fb      	strb	r3, [r7, #11]
          break;
 800864a:	e06f      	b.n	800872c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00b      	beq.n	8008670 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	7c12      	ldrb	r2, [r2, #16]
 8008664:	f107 0108 	add.w	r1, r7, #8
 8008668:	4610      	mov	r0, r2
 800866a:	4798      	blx	r3
 800866c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800866e:	e05d      	b.n	800872c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008670:	6839      	ldr	r1, [r7, #0]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fa63 	bl	8008b3e <USBD_CtlError>
            err++;
 8008678:	7afb      	ldrb	r3, [r7, #11]
 800867a:	3301      	adds	r3, #1
 800867c:	72fb      	strb	r3, [r7, #11]
          break;
 800867e:	e055      	b.n	800872c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00b      	beq.n	80086a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	7c12      	ldrb	r2, [r2, #16]
 8008698:	f107 0108 	add.w	r1, r7, #8
 800869c:	4610      	mov	r0, r2
 800869e:	4798      	blx	r3
 80086a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086a2:	e043      	b.n	800872c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fa49 	bl	8008b3e <USBD_CtlError>
            err++;
 80086ac:	7afb      	ldrb	r3, [r7, #11]
 80086ae:	3301      	adds	r3, #1
 80086b0:	72fb      	strb	r3, [r7, #11]
          break;
 80086b2:	e03b      	b.n	800872c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086ba:	695b      	ldr	r3, [r3, #20]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d00b      	beq.n	80086d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086c6:	695b      	ldr	r3, [r3, #20]
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	7c12      	ldrb	r2, [r2, #16]
 80086cc:	f107 0108 	add.w	r1, r7, #8
 80086d0:	4610      	mov	r0, r2
 80086d2:	4798      	blx	r3
 80086d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086d6:	e029      	b.n	800872c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086d8:	6839      	ldr	r1, [r7, #0]
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fa2f 	bl	8008b3e <USBD_CtlError>
            err++;
 80086e0:	7afb      	ldrb	r3, [r7, #11]
 80086e2:	3301      	adds	r3, #1
 80086e4:	72fb      	strb	r3, [r7, #11]
          break;
 80086e6:	e021      	b.n	800872c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086ee:	699b      	ldr	r3, [r3, #24]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00b      	beq.n	800870c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	7c12      	ldrb	r2, [r2, #16]
 8008700:	f107 0108 	add.w	r1, r7, #8
 8008704:	4610      	mov	r0, r2
 8008706:	4798      	blx	r3
 8008708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800870a:	e00f      	b.n	800872c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fa15 	bl	8008b3e <USBD_CtlError>
            err++;
 8008714:	7afb      	ldrb	r3, [r7, #11]
 8008716:	3301      	adds	r3, #1
 8008718:	72fb      	strb	r3, [r7, #11]
          break;
 800871a:	e007      	b.n	800872c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fa0d 	bl	8008b3e <USBD_CtlError>
          err++;
 8008724:	7afb      	ldrb	r3, [r7, #11]
 8008726:	3301      	adds	r3, #1
 8008728:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800872a:	e038      	b.n	800879e <USBD_GetDescriptor+0x286>
 800872c:	e037      	b.n	800879e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	7c1b      	ldrb	r3, [r3, #16]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d109      	bne.n	800874a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800873c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800873e:	f107 0208 	add.w	r2, r7, #8
 8008742:	4610      	mov	r0, r2
 8008744:	4798      	blx	r3
 8008746:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008748:	e029      	b.n	800879e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800874a:	6839      	ldr	r1, [r7, #0]
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 f9f6 	bl	8008b3e <USBD_CtlError>
        err++;
 8008752:	7afb      	ldrb	r3, [r7, #11]
 8008754:	3301      	adds	r3, #1
 8008756:	72fb      	strb	r3, [r7, #11]
      break;
 8008758:	e021      	b.n	800879e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	7c1b      	ldrb	r3, [r3, #16]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10d      	bne.n	800877e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876a:	f107 0208 	add.w	r2, r7, #8
 800876e:	4610      	mov	r0, r2
 8008770:	4798      	blx	r3
 8008772:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	3301      	adds	r3, #1
 8008778:	2207      	movs	r2, #7
 800877a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800877c:	e00f      	b.n	800879e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f9dc 	bl	8008b3e <USBD_CtlError>
        err++;
 8008786:	7afb      	ldrb	r3, [r7, #11]
 8008788:	3301      	adds	r3, #1
 800878a:	72fb      	strb	r3, [r7, #11]
      break;
 800878c:	e007      	b.n	800879e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f9d4 	bl	8008b3e <USBD_CtlError>
      err++;
 8008796:	7afb      	ldrb	r3, [r7, #11]
 8008798:	3301      	adds	r3, #1
 800879a:	72fb      	strb	r3, [r7, #11]
      break;
 800879c:	bf00      	nop
  }

  if (err != 0U)
 800879e:	7afb      	ldrb	r3, [r7, #11]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d11c      	bne.n	80087de <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80087a4:	893b      	ldrh	r3, [r7, #8]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d011      	beq.n	80087ce <USBD_GetDescriptor+0x2b6>
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	88db      	ldrh	r3, [r3, #6]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00d      	beq.n	80087ce <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	88da      	ldrh	r2, [r3, #6]
 80087b6:	893b      	ldrh	r3, [r7, #8]
 80087b8:	4293      	cmp	r3, r2
 80087ba:	bf28      	it	cs
 80087bc:	4613      	movcs	r3, r2
 80087be:	b29b      	uxth	r3, r3
 80087c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80087c2:	893b      	ldrh	r3, [r7, #8]
 80087c4:	461a      	mov	r2, r3
 80087c6:	68f9      	ldr	r1, [r7, #12]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 fa22 	bl	8008c12 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	88db      	ldrh	r3, [r3, #6]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d104      	bne.n	80087e0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fa5b 	bl	8008c92 <USBD_CtlSendStatus>
 80087dc:	e000      	b.n	80087e0 <USBD_GetDescriptor+0x2c8>
    return;
 80087de:	bf00      	nop
    }
  }
}
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop

080087e8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	889b      	ldrh	r3, [r3, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d130      	bne.n	800885c <USBD_SetAddress+0x74>
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	88db      	ldrh	r3, [r3, #6]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d12c      	bne.n	800885c <USBD_SetAddress+0x74>
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	885b      	ldrh	r3, [r3, #2]
 8008806:	2b7f      	cmp	r3, #127	; 0x7f
 8008808:	d828      	bhi.n	800885c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	885b      	ldrh	r3, [r3, #2]
 800880e:	b2db      	uxtb	r3, r3
 8008810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008814:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800881c:	2b03      	cmp	r3, #3
 800881e:	d104      	bne.n	800882a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008820:	6839      	ldr	r1, [r7, #0]
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f98b 	bl	8008b3e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008828:	e01d      	b.n	8008866 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	7bfa      	ldrb	r2, [r7, #15]
 800882e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008832:	7bfb      	ldrb	r3, [r7, #15]
 8008834:	4619      	mov	r1, r3
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 fe43 	bl	80094c2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 fa28 	bl	8008c92 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008842:	7bfb      	ldrb	r3, [r7, #15]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d004      	beq.n	8008852 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2202      	movs	r2, #2
 800884c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008850:	e009      	b.n	8008866 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2201      	movs	r2, #1
 8008856:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800885a:	e004      	b.n	8008866 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800885c:	6839      	ldr	r1, [r7, #0]
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 f96d 	bl	8008b3e <USBD_CtlError>
  }
}
 8008864:	bf00      	nop
 8008866:	bf00      	nop
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
	...

08008870 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	885b      	ldrh	r3, [r3, #2]
 800887e:	b2da      	uxtb	r2, r3
 8008880:	4b41      	ldr	r3, [pc, #260]	; (8008988 <USBD_SetConfig+0x118>)
 8008882:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008884:	4b40      	ldr	r3, [pc, #256]	; (8008988 <USBD_SetConfig+0x118>)
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d904      	bls.n	8008896 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800888c:	6839      	ldr	r1, [r7, #0]
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f955 	bl	8008b3e <USBD_CtlError>
 8008894:	e075      	b.n	8008982 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800889c:	2b02      	cmp	r3, #2
 800889e:	d002      	beq.n	80088a6 <USBD_SetConfig+0x36>
 80088a0:	2b03      	cmp	r3, #3
 80088a2:	d023      	beq.n	80088ec <USBD_SetConfig+0x7c>
 80088a4:	e062      	b.n	800896c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80088a6:	4b38      	ldr	r3, [pc, #224]	; (8008988 <USBD_SetConfig+0x118>)
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d01a      	beq.n	80088e4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80088ae:	4b36      	ldr	r3, [pc, #216]	; (8008988 <USBD_SetConfig+0x118>)
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	461a      	mov	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2203      	movs	r2, #3
 80088bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80088c0:	4b31      	ldr	r3, [pc, #196]	; (8008988 <USBD_SetConfig+0x118>)
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7ff f9e8 	bl	8007c9c <USBD_SetClassConfig>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d104      	bne.n	80088dc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80088d2:	6839      	ldr	r1, [r7, #0]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f932 	bl	8008b3e <USBD_CtlError>
            return;
 80088da:	e052      	b.n	8008982 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 f9d8 	bl	8008c92 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80088e2:	e04e      	b.n	8008982 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 f9d4 	bl	8008c92 <USBD_CtlSendStatus>
        break;
 80088ea:	e04a      	b.n	8008982 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80088ec:	4b26      	ldr	r3, [pc, #152]	; (8008988 <USBD_SetConfig+0x118>)
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d112      	bne.n	800891a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2202      	movs	r2, #2
 80088f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80088fc:	4b22      	ldr	r3, [pc, #136]	; (8008988 <USBD_SetConfig+0x118>)
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	461a      	mov	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008906:	4b20      	ldr	r3, [pc, #128]	; (8008988 <USBD_SetConfig+0x118>)
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	4619      	mov	r1, r3
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f7ff f9e4 	bl	8007cda <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f9bd 	bl	8008c92 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008918:	e033      	b.n	8008982 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800891a:	4b1b      	ldr	r3, [pc, #108]	; (8008988 <USBD_SetConfig+0x118>)
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	461a      	mov	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	429a      	cmp	r2, r3
 8008926:	d01d      	beq.n	8008964 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	b2db      	uxtb	r3, r3
 800892e:	4619      	mov	r1, r3
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f7ff f9d2 	bl	8007cda <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008936:	4b14      	ldr	r3, [pc, #80]	; (8008988 <USBD_SetConfig+0x118>)
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	461a      	mov	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008940:	4b11      	ldr	r3, [pc, #68]	; (8008988 <USBD_SetConfig+0x118>)
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	4619      	mov	r1, r3
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f7ff f9a8 	bl	8007c9c <USBD_SetClassConfig>
 800894c:	4603      	mov	r3, r0
 800894e:	2b02      	cmp	r3, #2
 8008950:	d104      	bne.n	800895c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008952:	6839      	ldr	r1, [r7, #0]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f8f2 	bl	8008b3e <USBD_CtlError>
            return;
 800895a:	e012      	b.n	8008982 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f998 	bl	8008c92 <USBD_CtlSendStatus>
        break;
 8008962:	e00e      	b.n	8008982 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f994 	bl	8008c92 <USBD_CtlSendStatus>
        break;
 800896a:	e00a      	b.n	8008982 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f8e5 	bl	8008b3e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008974:	4b04      	ldr	r3, [pc, #16]	; (8008988 <USBD_SetConfig+0x118>)
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	4619      	mov	r1, r3
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f7ff f9ad 	bl	8007cda <USBD_ClrClassConfig>
        break;
 8008980:	bf00      	nop
    }
  }
}
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	20000150 	.word	0x20000150

0800898c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	88db      	ldrh	r3, [r3, #6]
 800899a:	2b01      	cmp	r3, #1
 800899c:	d004      	beq.n	80089a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800899e:	6839      	ldr	r1, [r7, #0]
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 f8cc 	bl	8008b3e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80089a6:	e022      	b.n	80089ee <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	dc02      	bgt.n	80089b8 <USBD_GetConfig+0x2c>
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	dc03      	bgt.n	80089be <USBD_GetConfig+0x32>
 80089b6:	e015      	b.n	80089e4 <USBD_GetConfig+0x58>
 80089b8:	2b03      	cmp	r3, #3
 80089ba:	d00b      	beq.n	80089d4 <USBD_GetConfig+0x48>
 80089bc:	e012      	b.n	80089e4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	3308      	adds	r3, #8
 80089c8:	2201      	movs	r2, #1
 80089ca:	4619      	mov	r1, r3
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 f920 	bl	8008c12 <USBD_CtlSendData>
        break;
 80089d2:	e00c      	b.n	80089ee <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	3304      	adds	r3, #4
 80089d8:	2201      	movs	r2, #1
 80089da:	4619      	mov	r1, r3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f918 	bl	8008c12 <USBD_CtlSendData>
        break;
 80089e2:	e004      	b.n	80089ee <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80089e4:	6839      	ldr	r1, [r7, #0]
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f8a9 	bl	8008b3e <USBD_CtlError>
        break;
 80089ec:	bf00      	nop
}
 80089ee:	bf00      	nop
 80089f0:	3708      	adds	r7, #8
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b082      	sub	sp, #8
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a06:	3b01      	subs	r3, #1
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d81e      	bhi.n	8008a4a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	88db      	ldrh	r3, [r3, #6]
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d004      	beq.n	8008a1e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008a14:	6839      	ldr	r1, [r7, #0]
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f891 	bl	8008b3e <USBD_CtlError>
        break;
 8008a1c:	e01a      	b.n	8008a54 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2201      	movs	r2, #1
 8008a22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d005      	beq.n	8008a3a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	f043 0202 	orr.w	r2, r3, #2
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	330c      	adds	r3, #12
 8008a3e:	2202      	movs	r2, #2
 8008a40:	4619      	mov	r1, r3
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f8e5 	bl	8008c12 <USBD_CtlSendData>
      break;
 8008a48:	e004      	b.n	8008a54 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 f876 	bl	8008b3e <USBD_CtlError>
      break;
 8008a52:	bf00      	nop
  }
}
 8008a54:	bf00      	nop
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	885b      	ldrh	r3, [r3, #2]
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d106      	bne.n	8008a7c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2201      	movs	r2, #1
 8008a72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f90b 	bl	8008c92 <USBD_CtlSendStatus>
  }
}
 8008a7c:	bf00      	nop
 8008a7e:	3708      	adds	r7, #8
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a94:	3b01      	subs	r3, #1
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d80b      	bhi.n	8008ab2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	885b      	ldrh	r3, [r3, #2]
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d10c      	bne.n	8008abc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 f8f1 	bl	8008c92 <USBD_CtlSendStatus>
      }
      break;
 8008ab0:	e004      	b.n	8008abc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008ab2:	6839      	ldr	r1, [r7, #0]
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f842 	bl	8008b3e <USBD_CtlError>
      break;
 8008aba:	e000      	b.n	8008abe <USBD_ClrFeature+0x3a>
      break;
 8008abc:	bf00      	nop
  }
}
 8008abe:	bf00      	nop
 8008ac0:	3708      	adds	r7, #8
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	b083      	sub	sp, #12
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	781a      	ldrb	r2, [r3, #0]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	785a      	ldrb	r2, [r3, #1]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	3302      	adds	r3, #2
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	3303      	adds	r3, #3
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	021b      	lsls	r3, r3, #8
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	4413      	add	r3, r2
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	3304      	adds	r3, #4
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	3305      	adds	r3, #5
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	021b      	lsls	r3, r3, #8
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	4413      	add	r3, r2
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	3306      	adds	r3, #6
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	3307      	adds	r3, #7
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	021b      	lsls	r3, r3, #8
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	4413      	add	r3, r2
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	80da      	strh	r2, [r3, #6]

}
 8008b34:	bf00      	nop
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bc80      	pop	{r7}
 8008b3c:	4770      	bx	lr

08008b3e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b082      	sub	sp, #8
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
 8008b46:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008b48:	2180      	movs	r1, #128	; 0x80
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 fc4f 	bl	80093ee <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008b50:	2100      	movs	r1, #0
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fc4b 	bl	80093ee <USBD_LL_StallEP>
}
 8008b58:	bf00      	nop
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d032      	beq.n	8008bdc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f000 f834 	bl	8008be4 <USBD_GetLen>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	3301      	adds	r3, #1
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	005b      	lsls	r3, r3, #1
 8008b84:	b29a      	uxth	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008b8a:	7dfb      	ldrb	r3, [r7, #23]
 8008b8c:	1c5a      	adds	r2, r3, #1
 8008b8e:	75fa      	strb	r2, [r7, #23]
 8008b90:	461a      	mov	r2, r3
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	4413      	add	r3, r2
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	7812      	ldrb	r2, [r2, #0]
 8008b9a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008b9c:	7dfb      	ldrb	r3, [r7, #23]
 8008b9e:	1c5a      	adds	r2, r3, #1
 8008ba0:	75fa      	strb	r2, [r7, #23]
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	2203      	movs	r2, #3
 8008baa:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008bac:	e012      	b.n	8008bd4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	1c5a      	adds	r2, r3, #1
 8008bb2:	60fa      	str	r2, [r7, #12]
 8008bb4:	7dfa      	ldrb	r2, [r7, #23]
 8008bb6:	1c51      	adds	r1, r2, #1
 8008bb8:	75f9      	strb	r1, [r7, #23]
 8008bba:	4611      	mov	r1, r2
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	440a      	add	r2, r1
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008bc4:	7dfb      	ldrb	r3, [r7, #23]
 8008bc6:	1c5a      	adds	r2, r3, #1
 8008bc8:	75fa      	strb	r2, [r7, #23]
 8008bca:	461a      	mov	r2, r3
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	4413      	add	r3, r2
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1e8      	bne.n	8008bae <USBD_GetString+0x4e>
    }
  }
}
 8008bdc:	bf00      	nop
 8008bde:	3718      	adds	r7, #24
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008bec:	2300      	movs	r3, #0
 8008bee:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008bf0:	e005      	b.n	8008bfe <USBD_GetLen+0x1a>
  {
    len++;
 8008bf2:	7bfb      	ldrb	r3, [r7, #15]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1f5      	bne.n	8008bf2 <USBD_GetLen+0xe>
  }

  return len;
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3714      	adds	r7, #20
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bc80      	pop	{r7}
 8008c10:	4770      	bx	lr

08008c12 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b084      	sub	sp, #16
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	60f8      	str	r0, [r7, #12]
 8008c1a:	60b9      	str	r1, [r7, #8]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2202      	movs	r2, #2
 8008c24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c28:	88fa      	ldrh	r2, [r7, #6]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008c2e:	88fa      	ldrh	r2, [r7, #6]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c34:	88fb      	ldrh	r3, [r7, #6]
 8008c36:	68ba      	ldr	r2, [r7, #8]
 8008c38:	2100      	movs	r1, #0
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f000 fc60 	bl	8009500 <USBD_LL_Transmit>

  return USBD_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b084      	sub	sp, #16
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	60f8      	str	r0, [r7, #12]
 8008c52:	60b9      	str	r1, [r7, #8]
 8008c54:	4613      	mov	r3, r2
 8008c56:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c58:	88fb      	ldrh	r3, [r7, #6]
 8008c5a:	68ba      	ldr	r2, [r7, #8]
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f000 fc4e 	bl	8009500 <USBD_LL_Transmit>

  return USBD_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b084      	sub	sp, #16
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	60f8      	str	r0, [r7, #12]
 8008c76:	60b9      	str	r1, [r7, #8]
 8008c78:	4613      	mov	r3, r2
 8008c7a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c7c:	88fb      	ldrh	r3, [r7, #6]
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	2100      	movs	r1, #0
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f000 fc5f 	bl	8009546 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b082      	sub	sp, #8
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2204      	movs	r2, #4
 8008c9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	2100      	movs	r1, #0
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fc29 	bl	8009500 <USBD_LL_Transmit>

  return USBD_OK;
 8008cae:	2300      	movs	r3, #0
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3708      	adds	r7, #8
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2205      	movs	r2, #5
 8008cc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cc8:	2300      	movs	r3, #0
 8008cca:	2200      	movs	r2, #0
 8008ccc:	2100      	movs	r1, #0
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 fc39 	bl	8009546 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3708      	adds	r7, #8
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
	...

08008ce0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b087      	sub	sp, #28
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	4613      	mov	r3, r2
 8008cec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008cf6:	4b1e      	ldr	r3, [pc, #120]	; (8008d70 <FATFS_LinkDriverEx+0x90>)
 8008cf8:	7a5b      	ldrb	r3, [r3, #9]
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d831      	bhi.n	8008d64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008d00:	4b1b      	ldr	r3, [pc, #108]	; (8008d70 <FATFS_LinkDriverEx+0x90>)
 8008d02:	7a5b      	ldrb	r3, [r3, #9]
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	461a      	mov	r2, r3
 8008d08:	4b19      	ldr	r3, [pc, #100]	; (8008d70 <FATFS_LinkDriverEx+0x90>)
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008d0e:	4b18      	ldr	r3, [pc, #96]	; (8008d70 <FATFS_LinkDriverEx+0x90>)
 8008d10:	7a5b      	ldrb	r3, [r3, #9]
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	4a16      	ldr	r2, [pc, #88]	; (8008d70 <FATFS_LinkDriverEx+0x90>)
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4413      	add	r3, r2
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008d1e:	4b14      	ldr	r3, [pc, #80]	; (8008d70 <FATFS_LinkDriverEx+0x90>)
 8008d20:	7a5b      	ldrb	r3, [r3, #9]
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	461a      	mov	r2, r3
 8008d26:	4b12      	ldr	r3, [pc, #72]	; (8008d70 <FATFS_LinkDriverEx+0x90>)
 8008d28:	4413      	add	r3, r2
 8008d2a:	79fa      	ldrb	r2, [r7, #7]
 8008d2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008d2e:	4b10      	ldr	r3, [pc, #64]	; (8008d70 <FATFS_LinkDriverEx+0x90>)
 8008d30:	7a5b      	ldrb	r3, [r3, #9]
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	1c5a      	adds	r2, r3, #1
 8008d36:	b2d1      	uxtb	r1, r2
 8008d38:	4a0d      	ldr	r2, [pc, #52]	; (8008d70 <FATFS_LinkDriverEx+0x90>)
 8008d3a:	7251      	strb	r1, [r2, #9]
 8008d3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008d3e:	7dbb      	ldrb	r3, [r7, #22]
 8008d40:	3330      	adds	r3, #48	; 0x30
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	223a      	movs	r2, #58	; 0x3a
 8008d4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	3302      	adds	r3, #2
 8008d54:	222f      	movs	r2, #47	; 0x2f
 8008d56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	3303      	adds	r3, #3
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008d60:	2300      	movs	r3, #0
 8008d62:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	371c      	adds	r7, #28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bc80      	pop	{r7}
 8008d6e:	4770      	bx	lr
 8008d70:	20000154 	.word	0x20000154

08008d74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008d7e:	2200      	movs	r2, #0
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f7ff ffac 	bl	8008ce0 <FATFS_LinkDriverEx>
 8008d88:	4603      	mov	r3, r0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
	...

08008d94 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d98:	2200      	movs	r2, #0
 8008d9a:	4912      	ldr	r1, [pc, #72]	; (8008de4 <MX_USB_DEVICE_Init+0x50>)
 8008d9c:	4812      	ldr	r0, [pc, #72]	; (8008de8 <MX_USB_DEVICE_Init+0x54>)
 8008d9e:	f7fe ff23 	bl	8007be8 <USBD_Init>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d001      	beq.n	8008dac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008da8:	f7f7 fbac 	bl	8000504 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8008dac:	490f      	ldr	r1, [pc, #60]	; (8008dec <MX_USB_DEVICE_Init+0x58>)
 8008dae:	480e      	ldr	r0, [pc, #56]	; (8008de8 <MX_USB_DEVICE_Init+0x54>)
 8008db0:	f7fe ff45 	bl	8007c3e <USBD_RegisterClass>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008dba:	f7f7 fba3 	bl	8000504 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8008dbe:	490c      	ldr	r1, [pc, #48]	; (8008df0 <MX_USB_DEVICE_Init+0x5c>)
 8008dc0:	4809      	ldr	r0, [pc, #36]	; (8008de8 <MX_USB_DEVICE_Init+0x54>)
 8008dc2:	f7fd fef1 	bl	8006ba8 <USBD_MSC_RegisterStorage>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d001      	beq.n	8008dd0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008dcc:	f7f7 fb9a 	bl	8000504 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008dd0:	4805      	ldr	r0, [pc, #20]	; (8008de8 <MX_USB_DEVICE_Init+0x54>)
 8008dd2:	f7fe ff4d 	bl	8007c70 <USBD_Start>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d001      	beq.n	8008de0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008ddc:	f7f7 fb92 	bl	8000504 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008de0:	bf00      	nop
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	200000c4 	.word	0x200000c4
 8008de8:	20000918 	.word	0x20000918
 8008dec:	20000020 	.word	0x20000020
 8008df0:	20000114 	.word	0x20000114

08008df4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	6039      	str	r1, [r7, #0]
 8008dfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	2212      	movs	r2, #18
 8008e04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008e06:	4b03      	ldr	r3, [pc, #12]	; (8008e14 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bc80      	pop	{r7}
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	200000e0 	.word	0x200000e0

08008e18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	4603      	mov	r3, r0
 8008e20:	6039      	str	r1, [r7, #0]
 8008e22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	2204      	movs	r2, #4
 8008e28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008e2a:	4b03      	ldr	r3, [pc, #12]	; (8008e38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bc80      	pop	{r7}
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	200000f4 	.word	0x200000f4

08008e3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	4603      	mov	r3, r0
 8008e44:	6039      	str	r1, [r7, #0]
 8008e46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e48:	79fb      	ldrb	r3, [r7, #7]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d105      	bne.n	8008e5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e4e:	683a      	ldr	r2, [r7, #0]
 8008e50:	4907      	ldr	r1, [pc, #28]	; (8008e70 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e52:	4808      	ldr	r0, [pc, #32]	; (8008e74 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e54:	f7ff fe84 	bl	8008b60 <USBD_GetString>
 8008e58:	e004      	b.n	8008e64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e5a:	683a      	ldr	r2, [r7, #0]
 8008e5c:	4904      	ldr	r1, [pc, #16]	; (8008e70 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e5e:	4805      	ldr	r0, [pc, #20]	; (8008e74 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e60:	f7ff fe7e 	bl	8008b60 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e64:	4b02      	ldr	r3, [pc, #8]	; (8008e70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3708      	adds	r7, #8
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	20000bdc 	.word	0x20000bdc
 8008e74:	080096dc 	.word	0x080096dc

08008e78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	4603      	mov	r3, r0
 8008e80:	6039      	str	r1, [r7, #0]
 8008e82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008e84:	683a      	ldr	r2, [r7, #0]
 8008e86:	4904      	ldr	r1, [pc, #16]	; (8008e98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008e88:	4804      	ldr	r0, [pc, #16]	; (8008e9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008e8a:	f7ff fe69 	bl	8008b60 <USBD_GetString>
  return USBD_StrDesc;
 8008e8e:	4b02      	ldr	r3, [pc, #8]	; (8008e98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	20000bdc 	.word	0x20000bdc
 8008e9c:	080096f0 	.word	0x080096f0

08008ea0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	6039      	str	r1, [r7, #0]
 8008eaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	221a      	movs	r2, #26
 8008eb0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008eb2:	f000 f843 	bl	8008f3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008eb6:	4b02      	ldr	r3, [pc, #8]	; (8008ec0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	200000f8 	.word	0x200000f8

08008ec4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	4603      	mov	r3, r0
 8008ecc:	6039      	str	r1, [r7, #0]
 8008ece:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ed0:	79fb      	ldrb	r3, [r7, #7]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d105      	bne.n	8008ee2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	4907      	ldr	r1, [pc, #28]	; (8008ef8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008eda:	4808      	ldr	r0, [pc, #32]	; (8008efc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008edc:	f7ff fe40 	bl	8008b60 <USBD_GetString>
 8008ee0:	e004      	b.n	8008eec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ee2:	683a      	ldr	r2, [r7, #0]
 8008ee4:	4904      	ldr	r1, [pc, #16]	; (8008ef8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ee6:	4805      	ldr	r0, [pc, #20]	; (8008efc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ee8:	f7ff fe3a 	bl	8008b60 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008eec:	4b02      	ldr	r3, [pc, #8]	; (8008ef8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	20000bdc 	.word	0x20000bdc
 8008efc:	08009704 	.word	0x08009704

08008f00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	4603      	mov	r3, r0
 8008f08:	6039      	str	r1, [r7, #0]
 8008f0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f0c:	79fb      	ldrb	r3, [r7, #7]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d105      	bne.n	8008f1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	4907      	ldr	r1, [pc, #28]	; (8008f34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f16:	4808      	ldr	r0, [pc, #32]	; (8008f38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f18:	f7ff fe22 	bl	8008b60 <USBD_GetString>
 8008f1c:	e004      	b.n	8008f28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	4904      	ldr	r1, [pc, #16]	; (8008f34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f22:	4805      	ldr	r0, [pc, #20]	; (8008f38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f24:	f7ff fe1c 	bl	8008b60 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f28:	4b02      	ldr	r3, [pc, #8]	; (8008f34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3708      	adds	r7, #8
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	20000bdc 	.word	0x20000bdc
 8008f38:	08009710 	.word	0x08009710

08008f3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008f42:	4b0f      	ldr	r3, [pc, #60]	; (8008f80 <Get_SerialNum+0x44>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008f48:	4b0e      	ldr	r3, [pc, #56]	; (8008f84 <Get_SerialNum+0x48>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008f4e:	4b0e      	ldr	r3, [pc, #56]	; (8008f88 <Get_SerialNum+0x4c>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4413      	add	r3, r2
 8008f5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d009      	beq.n	8008f76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f62:	2208      	movs	r2, #8
 8008f64:	4909      	ldr	r1, [pc, #36]	; (8008f8c <Get_SerialNum+0x50>)
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f000 f814 	bl	8008f94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f6c:	2204      	movs	r2, #4
 8008f6e:	4908      	ldr	r1, [pc, #32]	; (8008f90 <Get_SerialNum+0x54>)
 8008f70:	68b8      	ldr	r0, [r7, #8]
 8008f72:	f000 f80f 	bl	8008f94 <IntToUnicode>
  }
}
 8008f76:	bf00      	nop
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	1ffff7e8 	.word	0x1ffff7e8
 8008f84:	1ffff7ec 	.word	0x1ffff7ec
 8008f88:	1ffff7f0 	.word	0x1ffff7f0
 8008f8c:	200000fa 	.word	0x200000fa
 8008f90:	2000010a 	.word	0x2000010a

08008f94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b087      	sub	sp, #28
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	75fb      	strb	r3, [r7, #23]
 8008faa:	e027      	b.n	8008ffc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	0f1b      	lsrs	r3, r3, #28
 8008fb0:	2b09      	cmp	r3, #9
 8008fb2:	d80b      	bhi.n	8008fcc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	0f1b      	lsrs	r3, r3, #28
 8008fb8:	b2da      	uxtb	r2, r3
 8008fba:	7dfb      	ldrb	r3, [r7, #23]
 8008fbc:	005b      	lsls	r3, r3, #1
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	440b      	add	r3, r1
 8008fc4:	3230      	adds	r2, #48	; 0x30
 8008fc6:	b2d2      	uxtb	r2, r2
 8008fc8:	701a      	strb	r2, [r3, #0]
 8008fca:	e00a      	b.n	8008fe2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	0f1b      	lsrs	r3, r3, #28
 8008fd0:	b2da      	uxtb	r2, r3
 8008fd2:	7dfb      	ldrb	r3, [r7, #23]
 8008fd4:	005b      	lsls	r3, r3, #1
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	440b      	add	r3, r1
 8008fdc:	3237      	adds	r2, #55	; 0x37
 8008fde:	b2d2      	uxtb	r2, r2
 8008fe0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	011b      	lsls	r3, r3, #4
 8008fe6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008fe8:	7dfb      	ldrb	r3, [r7, #23]
 8008fea:	005b      	lsls	r3, r3, #1
 8008fec:	3301      	adds	r3, #1
 8008fee:	68ba      	ldr	r2, [r7, #8]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008ff6:	7dfb      	ldrb	r3, [r7, #23]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	75fb      	strb	r3, [r7, #23]
 8008ffc:	7dfa      	ldrb	r2, [r7, #23]
 8008ffe:	79fb      	ldrb	r3, [r7, #7]
 8009000:	429a      	cmp	r2, r3
 8009002:	d3d3      	bcc.n	8008fac <IntToUnicode+0x18>
  }
}
 8009004:	bf00      	nop
 8009006:	bf00      	nop
 8009008:	371c      	adds	r7, #28
 800900a:	46bd      	mov	sp, r7
 800900c:	bc80      	pop	{r7}
 800900e:	4770      	bx	lr

08009010 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	4603      	mov	r3, r0
 8009018:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800901a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800901c:	4618      	mov	r0, r3
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	bc80      	pop	{r7}
 8009024:	4770      	bx	lr

08009026 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8009026:	b480      	push	{r7}
 8009028:	b085      	sub	sp, #20
 800902a:	af00      	add	r7, sp, #0
 800902c:	4603      	mov	r3, r0
 800902e:	60b9      	str	r1, [r7, #8]
 8009030:	607a      	str	r2, [r7, #4]
 8009032:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800903a:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009042:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8009044:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009046:	4618      	mov	r0, r3
 8009048:	3714      	adds	r7, #20
 800904a:	46bd      	mov	sp, r7
 800904c:	bc80      	pop	{r7}
 800904e:	4770      	bx	lr

08009050 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	4603      	mov	r3, r0
 8009058:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800905a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800905c:	4618      	mov	r0, r3
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	bc80      	pop	{r7}
 8009064:	4770      	bx	lr

08009066 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8009066:	b480      	push	{r7}
 8009068:	b083      	sub	sp, #12
 800906a:	af00      	add	r7, sp, #0
 800906c:	4603      	mov	r3, r0
 800906e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009070:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009072:	4618      	mov	r0, r3
 8009074:	370c      	adds	r7, #12
 8009076:	46bd      	mov	sp, r7
 8009078:	bc80      	pop	{r7}
 800907a:	4770      	bx	lr

0800907c <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	60b9      	str	r1, [r7, #8]
 8009084:	607a      	str	r2, [r7, #4]
 8009086:	461a      	mov	r2, r3
 8009088:	4603      	mov	r3, r0
 800908a:	73fb      	strb	r3, [r7, #15]
 800908c:	4613      	mov	r3, r2
 800908e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8009090:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009092:	4618      	mov	r0, r3
 8009094:	3714      	adds	r7, #20
 8009096:	46bd      	mov	sp, r7
 8009098:	bc80      	pop	{r7}
 800909a:	4770      	bx	lr

0800909c <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60b9      	str	r1, [r7, #8]
 80090a4:	607a      	str	r2, [r7, #4]
 80090a6:	461a      	mov	r2, r3
 80090a8:	4603      	mov	r3, r0
 80090aa:	73fb      	strb	r3, [r7, #15]
 80090ac:	4613      	mov	r3, r2
 80090ae:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 80090b0:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3714      	adds	r7, #20
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bc80      	pop	{r7}
 80090ba:	4770      	bx	lr

080090bc <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80090bc:	b480      	push	{r7}
 80090be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80090c0:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bc80      	pop	{r7}
 80090c8:	4770      	bx	lr
	...

080090cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a0d      	ldr	r2, [pc, #52]	; (8009110 <HAL_PCD_MspInit+0x44>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d113      	bne.n	8009106 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80090de:	4b0d      	ldr	r3, [pc, #52]	; (8009114 <HAL_PCD_MspInit+0x48>)
 80090e0:	69db      	ldr	r3, [r3, #28]
 80090e2:	4a0c      	ldr	r2, [pc, #48]	; (8009114 <HAL_PCD_MspInit+0x48>)
 80090e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80090e8:	61d3      	str	r3, [r2, #28]
 80090ea:	4b0a      	ldr	r3, [pc, #40]	; (8009114 <HAL_PCD_MspInit+0x48>)
 80090ec:	69db      	ldr	r3, [r3, #28]
 80090ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090f2:	60fb      	str	r3, [r7, #12]
 80090f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80090f6:	2200      	movs	r2, #0
 80090f8:	2100      	movs	r1, #0
 80090fa:	2014      	movs	r0, #20
 80090fc:	f7f7 fed9 	bl	8000eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009100:	2014      	movs	r0, #20
 8009102:	f7f7 fef2 	bl	8000eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009106:	bf00      	nop
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	40005c00 	.word	0x40005c00
 8009114:	40021000 	.word	0x40021000

08009118 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800912c:	4619      	mov	r1, r3
 800912e:	4610      	mov	r0, r2
 8009130:	f7fe fde6 	bl	8007d00 <USBD_LL_SetupStage>
}
 8009134:	bf00      	nop
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	460b      	mov	r3, r1
 8009146:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800914e:	78fa      	ldrb	r2, [r7, #3]
 8009150:	6879      	ldr	r1, [r7, #4]
 8009152:	4613      	mov	r3, r2
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	4413      	add	r3, r2
 8009158:	00db      	lsls	r3, r3, #3
 800915a:	440b      	add	r3, r1
 800915c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	78fb      	ldrb	r3, [r7, #3]
 8009164:	4619      	mov	r1, r3
 8009166:	f7fe fe18 	bl	8007d9a <USBD_LL_DataOutStage>
}
 800916a:	bf00      	nop
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b082      	sub	sp, #8
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	460b      	mov	r3, r1
 800917c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009184:	78fa      	ldrb	r2, [r7, #3]
 8009186:	6879      	ldr	r1, [r7, #4]
 8009188:	4613      	mov	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	00db      	lsls	r3, r3, #3
 8009190:	440b      	add	r3, r1
 8009192:	333c      	adds	r3, #60	; 0x3c
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	78fb      	ldrb	r3, [r7, #3]
 8009198:	4619      	mov	r1, r3
 800919a:	f7fe fe6f 	bl	8007e7c <USBD_LL_DataInStage>
}
 800919e:	bf00      	nop
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b082      	sub	sp, #8
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7fe ff7f 	bl	80080b8 <USBD_LL_SOF>
}
 80091ba:	bf00      	nop
 80091bc:	3708      	adds	r7, #8
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b084      	sub	sp, #16
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80091ca:	2301      	movs	r3, #1
 80091cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	d001      	beq.n	80091da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80091d6:	f7f7 f995 	bl	8000504 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80091e0:	7bfa      	ldrb	r2, [r7, #15]
 80091e2:	4611      	mov	r1, r2
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7fe ff2f 	bl	8008048 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7fe fee8 	bl	8007fc6 <USBD_LL_Reset>
}
 80091f6:	bf00      	nop
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
	...

08009200 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800920e:	4618      	mov	r0, r3
 8009210:	f7fe ff29 	bl	8008066 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	699b      	ldr	r3, [r3, #24]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d005      	beq.n	8009228 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800921c:	4b04      	ldr	r3, [pc, #16]	; (8009230 <HAL_PCD_SuspendCallback+0x30>)
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	4a03      	ldr	r2, [pc, #12]	; (8009230 <HAL_PCD_SuspendCallback+0x30>)
 8009222:	f043 0306 	orr.w	r3, r3, #6
 8009226:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009228:	bf00      	nop
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	e000ed00 	.word	0xe000ed00

08009234 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009242:	4618      	mov	r0, r3
 8009244:	f7fe ff23 	bl	800808e <USBD_LL_Resume>
}
 8009248:	bf00      	nop
 800924a:	3708      	adds	r7, #8
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009258:	4a23      	ldr	r2, [pc, #140]	; (80092e8 <USBD_LL_Init+0x98>)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a21      	ldr	r2, [pc, #132]	; (80092e8 <USBD_LL_Init+0x98>)
 8009264:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009268:	4b1f      	ldr	r3, [pc, #124]	; (80092e8 <USBD_LL_Init+0x98>)
 800926a:	4a20      	ldr	r2, [pc, #128]	; (80092ec <USBD_LL_Init+0x9c>)
 800926c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800926e:	4b1e      	ldr	r3, [pc, #120]	; (80092e8 <USBD_LL_Init+0x98>)
 8009270:	2208      	movs	r2, #8
 8009272:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009274:	4b1c      	ldr	r3, [pc, #112]	; (80092e8 <USBD_LL_Init+0x98>)
 8009276:	2202      	movs	r2, #2
 8009278:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800927a:	4b1b      	ldr	r3, [pc, #108]	; (80092e8 <USBD_LL_Init+0x98>)
 800927c:	2200      	movs	r2, #0
 800927e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009280:	4b19      	ldr	r3, [pc, #100]	; (80092e8 <USBD_LL_Init+0x98>)
 8009282:	2200      	movs	r2, #0
 8009284:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009286:	4b18      	ldr	r3, [pc, #96]	; (80092e8 <USBD_LL_Init+0x98>)
 8009288:	2200      	movs	r2, #0
 800928a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800928c:	4816      	ldr	r0, [pc, #88]	; (80092e8 <USBD_LL_Init+0x98>)
 800928e:	f7f7 fffa 	bl	8001286 <HAL_PCD_Init>
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d001      	beq.n	800929c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009298:	f7f7 f934 	bl	8000504 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092a2:	2318      	movs	r3, #24
 80092a4:	2200      	movs	r2, #0
 80092a6:	2100      	movs	r1, #0
 80092a8:	f7f9 fc9d 	bl	8002be6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092b2:	2358      	movs	r3, #88	; 0x58
 80092b4:	2200      	movs	r2, #0
 80092b6:	2180      	movs	r1, #128	; 0x80
 80092b8:	f7f9 fc95 	bl	8002be6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092c2:	2398      	movs	r3, #152	; 0x98
 80092c4:	2200      	movs	r2, #0
 80092c6:	2181      	movs	r1, #129	; 0x81
 80092c8:	f7f9 fc8d 	bl	8002be6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092d2:	23d8      	movs	r3, #216	; 0xd8
 80092d4:	2200      	movs	r2, #0
 80092d6:	2101      	movs	r1, #1
 80092d8:	f7f9 fc85 	bl	8002be6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	20000ddc 	.word	0x20000ddc
 80092ec:	40005c00 	.word	0x40005c00

080092f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092f8:	2300      	movs	r3, #0
 80092fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009306:	4618      	mov	r0, r3
 8009308:	f7f8 f8c8 	bl	800149c <HAL_PCD_Start>
 800930c:	4603      	mov	r3, r0
 800930e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009310:	7bfb      	ldrb	r3, [r7, #15]
 8009312:	4618      	mov	r0, r3
 8009314:	f000 f96e 	bl	80095f4 <USBD_Get_USB_Status>
 8009318:	4603      	mov	r3, r0
 800931a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800931c:	7bbb      	ldrb	r3, [r7, #14]
}
 800931e:	4618      	mov	r0, r3
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b084      	sub	sp, #16
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
 800932e:	4608      	mov	r0, r1
 8009330:	4611      	mov	r1, r2
 8009332:	461a      	mov	r2, r3
 8009334:	4603      	mov	r3, r0
 8009336:	70fb      	strb	r3, [r7, #3]
 8009338:	460b      	mov	r3, r1
 800933a:	70bb      	strb	r3, [r7, #2]
 800933c:	4613      	mov	r3, r2
 800933e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009340:	2300      	movs	r3, #0
 8009342:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800934e:	78bb      	ldrb	r3, [r7, #2]
 8009350:	883a      	ldrh	r2, [r7, #0]
 8009352:	78f9      	ldrb	r1, [r7, #3]
 8009354:	f7f8 fa42 	bl	80017dc <HAL_PCD_EP_Open>
 8009358:	4603      	mov	r3, r0
 800935a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800935c:	7bfb      	ldrb	r3, [r7, #15]
 800935e:	4618      	mov	r0, r3
 8009360:	f000 f948 	bl	80095f4 <USBD_Get_USB_Status>
 8009364:	4603      	mov	r3, r0
 8009366:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009368:	7bbb      	ldrb	r3, [r7, #14]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b084      	sub	sp, #16
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
 800937a:	460b      	mov	r3, r1
 800937c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009382:	2300      	movs	r3, #0
 8009384:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800938c:	78fa      	ldrb	r2, [r7, #3]
 800938e:	4611      	mov	r1, r2
 8009390:	4618      	mov	r0, r3
 8009392:	f7f8 fa89 	bl	80018a8 <HAL_PCD_EP_Close>
 8009396:	4603      	mov	r3, r0
 8009398:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800939a:	7bfb      	ldrb	r3, [r7, #15]
 800939c:	4618      	mov	r0, r3
 800939e:	f000 f929 	bl	80095f4 <USBD_Get_USB_Status>
 80093a2:	4603      	mov	r3, r0
 80093a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	460b      	mov	r3, r1
 80093ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093bc:	2300      	movs	r3, #0
 80093be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093c0:	2300      	movs	r3, #0
 80093c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093ca:	78fa      	ldrb	r2, [r7, #3]
 80093cc:	4611      	mov	r1, r2
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7f8 fbfd 	bl	8001bce <HAL_PCD_EP_Flush>
 80093d4:	4603      	mov	r3, r0
 80093d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093d8:	7bfb      	ldrb	r3, [r7, #15]
 80093da:	4618      	mov	r0, r3
 80093dc:	f000 f90a 	bl	80095f4 <USBD_Get_USB_Status>
 80093e0:	4603      	mov	r3, r0
 80093e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b084      	sub	sp, #16
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
 80093f6:	460b      	mov	r3, r1
 80093f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093fa:	2300      	movs	r3, #0
 80093fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093fe:	2300      	movs	r3, #0
 8009400:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009408:	78fa      	ldrb	r2, [r7, #3]
 800940a:	4611      	mov	r1, r2
 800940c:	4618      	mov	r0, r3
 800940e:	f7f8 fb2a 	bl	8001a66 <HAL_PCD_EP_SetStall>
 8009412:	4603      	mov	r3, r0
 8009414:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009416:	7bfb      	ldrb	r3, [r7, #15]
 8009418:	4618      	mov	r0, r3
 800941a:	f000 f8eb 	bl	80095f4 <USBD_Get_USB_Status>
 800941e:	4603      	mov	r3, r0
 8009420:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009422:	7bbb      	ldrb	r3, [r7, #14]
}
 8009424:	4618      	mov	r0, r3
 8009426:	3710      	adds	r7, #16
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	460b      	mov	r3, r1
 8009436:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009438:	2300      	movs	r3, #0
 800943a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800943c:	2300      	movs	r3, #0
 800943e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009446:	78fa      	ldrb	r2, [r7, #3]
 8009448:	4611      	mov	r1, r2
 800944a:	4618      	mov	r0, r3
 800944c:	f7f8 fb6b 	bl	8001b26 <HAL_PCD_EP_ClrStall>
 8009450:	4603      	mov	r3, r0
 8009452:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009454:	7bfb      	ldrb	r3, [r7, #15]
 8009456:	4618      	mov	r0, r3
 8009458:	f000 f8cc 	bl	80095f4 <USBD_Get_USB_Status>
 800945c:	4603      	mov	r3, r0
 800945e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009460:	7bbb      	ldrb	r3, [r7, #14]
}
 8009462:	4618      	mov	r0, r3
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800946a:	b480      	push	{r7}
 800946c:	b085      	sub	sp, #20
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
 8009472:	460b      	mov	r3, r1
 8009474:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800947c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800947e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009482:	2b00      	cmp	r3, #0
 8009484:	da0c      	bge.n	80094a0 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009486:	78fb      	ldrb	r3, [r7, #3]
 8009488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800948c:	68f9      	ldr	r1, [r7, #12]
 800948e:	1c5a      	adds	r2, r3, #1
 8009490:	4613      	mov	r3, r2
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	4413      	add	r3, r2
 8009496:	00db      	lsls	r3, r3, #3
 8009498:	440b      	add	r3, r1
 800949a:	3302      	adds	r3, #2
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	e00b      	b.n	80094b8 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80094a0:	78fb      	ldrb	r3, [r7, #3]
 80094a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094a6:	68f9      	ldr	r1, [r7, #12]
 80094a8:	4613      	mov	r3, r2
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	4413      	add	r3, r2
 80094ae:	00db      	lsls	r3, r3, #3
 80094b0:	440b      	add	r3, r1
 80094b2:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80094b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3714      	adds	r7, #20
 80094bc:	46bd      	mov	sp, r7
 80094be:	bc80      	pop	{r7}
 80094c0:	4770      	bx	lr

080094c2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b084      	sub	sp, #16
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	460b      	mov	r3, r1
 80094cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ce:	2300      	movs	r3, #0
 80094d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094d2:	2300      	movs	r3, #0
 80094d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094dc:	78fa      	ldrb	r2, [r7, #3]
 80094de:	4611      	mov	r1, r2
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7f8 f956 	bl	8001792 <HAL_PCD_SetAddress>
 80094e6:	4603      	mov	r3, r0
 80094e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094ea:	7bfb      	ldrb	r3, [r7, #15]
 80094ec:	4618      	mov	r0, r3
 80094ee:	f000 f881 	bl	80095f4 <USBD_Get_USB_Status>
 80094f2:	4603      	mov	r3, r0
 80094f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b086      	sub	sp, #24
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	607a      	str	r2, [r7, #4]
 800950a:	461a      	mov	r2, r3
 800950c:	460b      	mov	r3, r1
 800950e:	72fb      	strb	r3, [r7, #11]
 8009510:	4613      	mov	r3, r2
 8009512:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009514:	2300      	movs	r3, #0
 8009516:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009518:	2300      	movs	r3, #0
 800951a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009522:	893b      	ldrh	r3, [r7, #8]
 8009524:	7af9      	ldrb	r1, [r7, #11]
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	f7f8 fa5a 	bl	80019e0 <HAL_PCD_EP_Transmit>
 800952c:	4603      	mov	r3, r0
 800952e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009530:	7dfb      	ldrb	r3, [r7, #23]
 8009532:	4618      	mov	r0, r3
 8009534:	f000 f85e 	bl	80095f4 <USBD_Get_USB_Status>
 8009538:	4603      	mov	r3, r0
 800953a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800953c:	7dbb      	ldrb	r3, [r7, #22]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3718      	adds	r7, #24
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b086      	sub	sp, #24
 800954a:	af00      	add	r7, sp, #0
 800954c:	60f8      	str	r0, [r7, #12]
 800954e:	607a      	str	r2, [r7, #4]
 8009550:	461a      	mov	r2, r3
 8009552:	460b      	mov	r3, r1
 8009554:	72fb      	strb	r3, [r7, #11]
 8009556:	4613      	mov	r3, r2
 8009558:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009568:	893b      	ldrh	r3, [r7, #8]
 800956a:	7af9      	ldrb	r1, [r7, #11]
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	f7f8 f9e3 	bl	8001938 <HAL_PCD_EP_Receive>
 8009572:	4603      	mov	r3, r0
 8009574:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009576:	7dfb      	ldrb	r3, [r7, #23]
 8009578:	4618      	mov	r0, r3
 800957a:	f000 f83b 	bl	80095f4 <USBD_Get_USB_Status>
 800957e:	4603      	mov	r3, r0
 8009580:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009582:	7dbb      	ldrb	r3, [r7, #22]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3718      	adds	r7, #24
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	460b      	mov	r3, r1
 8009596:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800959e:	78fa      	ldrb	r2, [r7, #3]
 80095a0:	4611      	mov	r1, r2
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7f8 fa05 	bl	80019b2 <HAL_PCD_EP_GetRxCount>
 80095a8:	4603      	mov	r3, r0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
	...

080095b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80095bc:	4b02      	ldr	r3, [pc, #8]	; (80095c8 <USBD_static_malloc+0x14>)
}
 80095be:	4618      	mov	r0, r3
 80095c0:	370c      	adds	r7, #12
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bc80      	pop	{r7}
 80095c6:	4770      	bx	lr
 80095c8:	20000160 	.word	0x20000160

080095cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]

}
 80095d4:	bf00      	nop
 80095d6:	370c      	adds	r7, #12
 80095d8:	46bd      	mov	sp, r7
 80095da:	bc80      	pop	{r7}
 80095dc:	4770      	bx	lr

080095de <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095de:	b480      	push	{r7}
 80095e0:	b083      	sub	sp, #12
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
 80095e6:	460b      	mov	r3, r1
 80095e8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80095ea:	bf00      	nop
 80095ec:	370c      	adds	r7, #12
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bc80      	pop	{r7}
 80095f2:	4770      	bx	lr

080095f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	4603      	mov	r3, r0
 80095fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009602:	79fb      	ldrb	r3, [r7, #7]
 8009604:	2b03      	cmp	r3, #3
 8009606:	d817      	bhi.n	8009638 <USBD_Get_USB_Status+0x44>
 8009608:	a201      	add	r2, pc, #4	; (adr r2, 8009610 <USBD_Get_USB_Status+0x1c>)
 800960a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960e:	bf00      	nop
 8009610:	08009621 	.word	0x08009621
 8009614:	08009627 	.word	0x08009627
 8009618:	0800962d 	.word	0x0800962d
 800961c:	08009633 	.word	0x08009633
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009620:	2300      	movs	r3, #0
 8009622:	73fb      	strb	r3, [r7, #15]
    break;
 8009624:	e00b      	b.n	800963e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009626:	2302      	movs	r3, #2
 8009628:	73fb      	strb	r3, [r7, #15]
    break;
 800962a:	e008      	b.n	800963e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800962c:	2301      	movs	r3, #1
 800962e:	73fb      	strb	r3, [r7, #15]
    break;
 8009630:	e005      	b.n	800963e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009632:	2302      	movs	r3, #2
 8009634:	73fb      	strb	r3, [r7, #15]
    break;
 8009636:	e002      	b.n	800963e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009638:	2302      	movs	r3, #2
 800963a:	73fb      	strb	r3, [r7, #15]
    break;
 800963c:	bf00      	nop
  }
  return usb_status;
 800963e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009640:	4618      	mov	r0, r3
 8009642:	3714      	adds	r7, #20
 8009644:	46bd      	mov	sp, r7
 8009646:	bc80      	pop	{r7}
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop

0800964c <__libc_init_array>:
 800964c:	b570      	push	{r4, r5, r6, lr}
 800964e:	2600      	movs	r6, #0
 8009650:	4d0c      	ldr	r5, [pc, #48]	; (8009684 <__libc_init_array+0x38>)
 8009652:	4c0d      	ldr	r4, [pc, #52]	; (8009688 <__libc_init_array+0x3c>)
 8009654:	1b64      	subs	r4, r4, r5
 8009656:	10a4      	asrs	r4, r4, #2
 8009658:	42a6      	cmp	r6, r4
 800965a:	d109      	bne.n	8009670 <__libc_init_array+0x24>
 800965c:	f000 f822 	bl	80096a4 <_init>
 8009660:	2600      	movs	r6, #0
 8009662:	4d0a      	ldr	r5, [pc, #40]	; (800968c <__libc_init_array+0x40>)
 8009664:	4c0a      	ldr	r4, [pc, #40]	; (8009690 <__libc_init_array+0x44>)
 8009666:	1b64      	subs	r4, r4, r5
 8009668:	10a4      	asrs	r4, r4, #2
 800966a:	42a6      	cmp	r6, r4
 800966c:	d105      	bne.n	800967a <__libc_init_array+0x2e>
 800966e:	bd70      	pop	{r4, r5, r6, pc}
 8009670:	f855 3b04 	ldr.w	r3, [r5], #4
 8009674:	4798      	blx	r3
 8009676:	3601      	adds	r6, #1
 8009678:	e7ee      	b.n	8009658 <__libc_init_array+0xc>
 800967a:	f855 3b04 	ldr.w	r3, [r5], #4
 800967e:	4798      	blx	r3
 8009680:	3601      	adds	r6, #1
 8009682:	e7f2      	b.n	800966a <__libc_init_array+0x1e>
 8009684:	08009774 	.word	0x08009774
 8009688:	08009774 	.word	0x08009774
 800968c:	08009774 	.word	0x08009774
 8009690:	08009778 	.word	0x08009778

08009694 <memset>:
 8009694:	4603      	mov	r3, r0
 8009696:	4402      	add	r2, r0
 8009698:	4293      	cmp	r3, r2
 800969a:	d100      	bne.n	800969e <memset+0xa>
 800969c:	4770      	bx	lr
 800969e:	f803 1b01 	strb.w	r1, [r3], #1
 80096a2:	e7f9      	b.n	8009698 <memset+0x4>

080096a4 <_init>:
 80096a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a6:	bf00      	nop
 80096a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096aa:	bc08      	pop	{r3}
 80096ac:	469e      	mov	lr, r3
 80096ae:	4770      	bx	lr

080096b0 <_fini>:
 80096b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b2:	bf00      	nop
 80096b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096b6:	bc08      	pop	{r3}
 80096b8:	469e      	mov	lr, r3
 80096ba:	4770      	bx	lr
